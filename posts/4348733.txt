Saving interactive Matplotlib figures
Is there a way to save a Matplotlib figure such that it can be re-opened and have typical interaction restored ? ( Like the .fig format in MATLAB ? )
I find myself running the same scripts many times to generate these interactive figures . Or I'm sending my colleagues multiple static PNG files to show different aspects of a plot . I'd rather send the figure object and have them interact with it themselves .
This would be a great feature , but AFAIK it isn't implemented in Matplotlib and likely would be difficult to implement yourself due to the way figures are stored .
I'd suggest either ( a ) separate processing the data from generating the figure ( which saves data with a unique name ) and write a figure generating script ( loading a specified file of the saved data ) and editing as you see fit or ( b ) save as PDF SVG / PostScript format and edit in some fancy figure editor like Adobe Illustrator ( or Inkscape ) .
Somewhat surprised this isn't implemented .. But ok , I'll save the processed data in an intermediate file and send that and a script for plotting to colleagues . Thanks .
I suspect implementation is hard , which is why it works so poorly an MATLAB . Back when I used it , figures used to crash MATLAB , and even slightly different versions were not able to read each others .fig files .
` pickle ` now works on MPL figures , so this can be done and appears to work reasonable well - almost like a Matlab " .fig " figure file . See my answer below ( for now ? ) for an example of how to do it .
As of Matplotlib 1.2 , we now have experimental pickle support . Give that a go and see if it works well for your case . If you have any issues , please let us know on the Matplotlib mailing list or by opening an issue on github.com/matplotlib/matplotlib .
Any reason this useful feature could be added to the figure's " Save as " itself . Adding .pkl perhaps ?
Good idea @USER . I'd support that if you wanted to give implementing it a go ?
Does this only work on a subset of backends ? When I try to pickle a simple figure in OSX , I get ` PicklingError : Can't pickle type ' _macosx.GraphicsContext ' : it's not found as _macosx.GraphicsContext ` .
The above ` PicklingError ` only occurs if you call ` plt.show() ` before doing the pickle . So just place ` plt.show() ` after ` pickle.dump() ` .
On my py3.5 on MacOS 10.11 , the order of ` fig.show() ` doesn't appear to matter - maybe that bug was fixed . I can pickle before / after ` show() ` without issue .
I just found out how to do this . The " experimental pickle support " mentioned by @USER works quite well .
Try this :
After your interactive tweaking , save the figure object as a binary file :
Later , open the figure and the tweaks should be saved and GUI interactivity should be present :
You can even extract the data from the plots :
( It works for lines , pcolor imshow - pcolormesh works with some tricks to reconstruct the flattened data . )
I got the excellent tip from Saving Matplotlib Figures Using Pickle .
I believe this is not robust to version changes etc ., and not cross-compatible between py2.x py3.x . Also I thought the ` pickle ` documentation stated that we need to setup the environment similarly as when the object was pickled ( saved ) , but I've found you don't need to ` import matplotlib.pyplot as plt ` when unpickling ( loading ) - it saves the import statements in the pickled file .
Why not just send the Python script ? MATLAB's .fig files require the recipient to have MATLAB to display them , so that's about equivalent to sending a Python script that requires Matplotlib to display .
Alternatively ( disclaimer : I haven't tried this yet ) , you could try pickling the figure :
Unfortunately , matplotlib figures aren't pickleable , so that approach won't work . Behind the scenes , there are too many C extensions that don't support pickling . I completely agree on just sending the script + data , though ... I guess I've never really seen the point of matlab's saved .fig ' s , so I never used them . Sending someone stand-alone code and data has been the easiest in the long run , in my experience , anyway . Still , it would be nice if matplotlib's figure objects where pickleable .
Even our preprocessed data is somewhat large and the plotting procedure is complex . Looks like the only recourse though . thanks .
Figures are apparently now pickleable - it works quite well ! Example below .
The benefit to pickle is that you don't have to programmatically adjust all the figure / subplot spacings / positions . You can use the MPL plot's GUI to make the figure look nice etc ., then save the ` MyPlot.fig.pickle ` file - retaining the later ability to adjust the plot presentation as needed . This is also what's great about Matlab's ` .fig ` files . Especially useful when you need to change the size / aspect ratio of a fig ( for inserting into presentations / papers ) .
Good question . Here is the doc text from ` pylab.save ` :
pylab no longer provides a save function , though the old pylab
function is still available as matplotlib.mlab.save ( you can still
refer to it in pylab as " mlab.save ") . However , for plain text
files , we recommend numpy.savetxt . For saving numpy arrays ,
we recommend numpy.save , and its analog numpy.load , which are
available in pylab as np.save and np.load .
This saves the data from the a pylab object , but doesn't allow you to regenerate the figure .
Correct . I ought to clarify that the answer was not a recommendation to use ` pylab.save ` . In fact , from the doc text , it appears that one should not use it .
Is there any external method to send a 3D Figure ? Possible even a simple GUI to exe ..