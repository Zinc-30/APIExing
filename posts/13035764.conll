Remove	O
rows	O
with	O
duplicate	O
indices	O
(	O
Pandas	O
DataFrame	B-API
and	O
TimeSeries	O
)	O

I'm	O
reading	O
some	O
automated	O
weather	O
data	O
from	O
the	O
web	O
.	O

The	O
observations	O
occur	O
every	O
5	O
minutes	O
and	O
are	O
compiled	O
into	O
monthly	O
files	O
for	O
each	O
weather	O
station	O
.	O

Once	O
I'm	O
done	O
parsing	O
a	O
file	O
,	O
the	O
DataFrame	B-API
looks	O
something	O
like	O
this	O
:	O

The	O
problem	O
I'm	O
having	O
is	O
that	O
sometimes	O
a	O
scientist	O
goes	O
back	O
and	O
corrects	O
observations	O
--	O
not	O
by	O
editing	O
the	O
erroneous	O
rows	O
,	O
but	O
by	O
appending	O
a	O
duplicate	O
row	O
to	O
the	O
end	O
of	O
a	O
file	O
.	O

Simple	O
example	O
of	O
such	O
a	O
case	O
is	O
illustrated	O
below	O
:	O

And	O
so	O
I	O
need	O
`	O
df3	O
`	O
to	O
evenutally	O
become	O
:	O

I	O
thought	O
that	O
adding	O
a	O
column	O
of	O
row	O
numbers	O
(	O
`	O
df3	O
[	O
'	O
rownum	O
']	O
=	O
range	O
(	O
df3.shape	O
[	O
0	O
])`)	O
would	O
help	O
me	O
select	O
out	O
the	O
bottom-most	O
row	O
for	O
any	O
value	O
of	O
the	O
`	O
DatetimeIndex	B-API
`	O
,	O
but	O
I	O
am	O
stuck	O
on	O
figuring	O
out	O
the	O
`	O
group_by	O
`	O
or	O
`	O
pivot	B-API
`	O
(	O
or	O
???	O
)	O
statements	O
to	O
make	O
that	O
work	O
.	O

Another	O
way	O
of	O
getting	O
duplicates	O
is	O
hourly	O
data	O
in	O
the	O
night	O
when	O
clocks	O
are	O
set	O
back	O
for	O
daylight	O
saving	O
time	O
:	O
1	O
AM	O
,	O
2	O
,	O
3	O
,	O
2	O
,	O
3	O
again	O
,	O
4	O
...	O

A	O
simple	O
solution	O
is	O
to	O
use	O
`	O
drop_duplicates	B-API
`	O

For	O
me	O
,	O
this	O
operated	O
quickly	O
on	O
large	O
data	O
sets	O
.	O

This	O
requires	O
that	O
'	O
rownum	O
'	O
be	O
the	O
column	O
with	O
duplicates	O
.	O

In	O
the	O
modified	O
example	O
,	O
'	O
rownum	O
'	O
has	O
no	O
duplicates	O
,	O
therefore	O
nothing	O
gets	O
eliminated	O
.	O

What	O
we	O
really	O
want	O
is	O
to	O
have	O
the	O
'	O
cols	O
'	O
be	O
set	O
to	O
the	O
index	O
.	O

I've	O
not	O
found	O
a	O
way	O
to	O
tell	O
drop_duplicates	B-API
to	O
only	O
consider	O
the	O
index	O
.	O

Here	O
is	O
a	O
solution	O
that	O
adds	O
the	O
index	O
as	O
a	O
dataframe	B-API
column	O
,	O
drops	O
duplicates	O
on	O
that	O
,	O
then	O
removes	O
the	O
new	O
column	O
:	O

And	O
if	O
you	O
want	O
things	O
back	O
in	O
the	O
proper	O
order	O
,	O
just	O
call	O
`	O
sort	B-API
`	O
on	O
the	O
dataframe	B-API
.	O

Edit	O
:	O
Better	O
answer	O
below	O

Take	O
a	O
look	O
at	O
n8yoder's	O
answer	O
using	O
'	O
duplicated	O
'	O
.	O

I	O
don't	O
believe	O
this	O
existed	O
in	O
older	O
versions	O
of	O
Pandas	O
,	O
where	O
this	O
answer	O
might	O
still	O
apply	B-API
.	O

Another	O
variation	O
on	O
this	O
is	O
:	O
`	O
df.reset_index()	B-API
.drop_duplicates	B-API
(	O
cols=	O
'	O
index	O
'	O
,	O
take_last=True	O
)	O
.set_index	B-API
(	O
'	O
index	O
')`	O

While	O
this	O
method	O
does	O
work	O
it	O
also	O
creates	O
two	O
temporary	O
copies	O
of	O
the	O
DataFrame	B-API
and	O
is	O
significantly	O
less	O
performant	O
than	O
using	O
either	O
the	O
duplicated	O
index	O
or	O
groupby	B-API
methods	O
suggested	O
as	O
alternative	O
answers	O
.	O

If	O
your	O
index	O
is	O
a	O
MultiIndex	B-API
,	O
`	O
reset_index()	B-API
`	O
adds	O
columns	O
level_0	O
,	O
level_1	O
,	O
etc	O
.	O

And	O
if	O
your	O
index	O
has	O
a	O
name	O
that	O
name	O
will	O
be	O
used	O
in	O
place	O
of	O
the	O
"	O
index	O
"	O
label	O
.	O

That	O
makes	O
this	O
a	O
bit	O
more	O
than	O
a	O
one-liner	O
to	O
do	O
it	O
right	O
for	O
any	O
DataFrame	B-API
.	O

`	O
index_label	O
=	O
getattr	O
(	O
df.index	O
,	O
'	O
names	O
'	O
,	O
getattr	O
(	O
df.index	O
,	O
'	O
name	O
'	O
,	O
'	O
index	O
'))`	O
then	O
`	O
cols=index_label	O
`	O
then	O
`	O
set_index	B-API
(	O
index_labels	O
)`	O
and	O
even	O
this	O
isn't	O
foolproof	O
(	O
won't	O
work	O
for	O
unnamed	O
multiindexes	O
)	O
.	O

Moving	O
the	O
index	O
to	O
a	O
column	O
,	O
clearing	O
duplicates	O
,	O
and	O
resetting	O
the	O
index	O
was	O
awesome	O
,	O
that	O
was	O
exactly	O
what	O
I	O
needed	O
!	O

I	O
would	O
suggest	O
using	O
the	O
duplicated	O
method	O
on	O
the	O
Pandas	O
Index	O
itself	O
:	O

While	O
all	O
the	O
other	O
methods	O
work	O
,	O
the	O
currently	O
accepted	O
answer	O
is	O
by	O
far	O
the	O
least	O
performant	O
for	O
the	O
provided	O
example	O
.	O

Furthermore	O
,	O
while	O
the	O
groupby	B-API
method	O
is	O
only	O
slightly	O
less	O
performant	O
,	O
I	O
find	O
the	O
duplicated	O
method	O
to	O
be	O
more	O
readable	O
.	O

Using	O
the	O
sample	O
data	O
provided	O
:	O

Note	O
that	O
you	O
can	O
keep	O
the	O
last	O
element	O
by	O
changing	O
the	O
keep	O
argument	O
.	O

It	O
should	O
also	O
be	O
noted	O
that	O
this	O
method	O
works	O
with	O
`	O
MultiIndex	B-API
`	O
as	O
well	O
(	O
using	O
df1	O
as	O
specified	O
in	O
Paul's	O
example	O
):	O

Thanks	O
for	O
merging	O
the	O
comment	O
into	O
your	O
answer	O
.	O

I	O
didn't	O
even	O
know	O
there	O
was	O
a	O
~	O
notation	O
for	O
"	O
not	O
"	O
.	O

Excellent	O
speed	O
and	O
language	O
elegance	O
.	O

This	O
should	O
be	O
the	O
accepted	O
answer	O
.	O

Looks	O
like	O
this	O
is	O
a	O
new	O
Pandas	O
function	O
since	O
my	O
answer	O
.	O

I'd	O
nominate	O
this	O
as	O
a	O
better	O
answer	O
given	O
the	O
latest	O
Pandas	O
.	O

What's	O
the	O
best	O
Stack	B-API
Overflow	O
practice	O
?	O

Is	O
there	O
a	O
way	O
to	O
reference	O
this	O
answer	O
from	O
my	O
original	O
answer	O
above	O
?	O

Oh	O
my	O
.	O

This	O
is	O
actually	O
so	O
simple	O
!	O

Follow	O
up	O
edit	O
2013-10-29	O

In	O
the	O
case	O
where	O
I	O
have	O
a	O
fairly	O
complex	O
`	O
MultiIndex	B-API
`	O
,	O
I	O
think	O
I	O
prefer	O
the	O
`	O
groupby	B-API
`	O
approach	O
.	O

Here's	O
simple	O
example	O
for	O
posterity	O
:	O

and	O
here's	O
the	O
important	O
part	O

if	O
they	O
have	O
names	O
,	O
otherwise	O
(	O
if	O
one	O
name	O
is	O
None	O
)	O
lets	O
say	O
`	O
level	O
=[	O
0	O
,	O
1	O
]`	O
will	O
work	O
if	O
there	O
are	O
2	O
levels	O
`	O
df1.groupby	O
(	O
level	O
=[	O
0	O
,	O
1	O
])	O
.last()	B-API
`	O
.	O

This	O
should	O
be	O
part	O
of	O
Pandas	O
as	O
a	O
complimentary	O
to	O
`	O
drop_duplicates	B-API
`	O

@USER	O
yeah	O
.	O

Using	O
`	O
df.index.names	O
`	O
is	O
just	O
an	O
easy	O
way	O
to	O
group	O
by	O
all	O
levels	O
of	O
the	O
index	O
.	O

Unfortunately	O
,	O
I	O
don't	O
think	O
Pandas	O
allows	O
one	O
to	O
drop	O
dups	O
off	O
the	O
indices	O
.	O

I	O
would	O
suggest	O
the	O
following	O
:	O

