is	O
it	O
possible	O
to	O
do	O
fuzzy	O
match	O
merge	B-API
with	O
python	O
pandas	O
?	O

I	O
have	O
two	O
DataFrames	O
which	O
I	O
want	O
to	O
merge	B-API
based	O
on	O
a	O
column	O
.	O

However	O
,	O
due	O
to	O
alternate	O
spellings	O
,	O
different	O
number	O
of	O
spaces	O
,	O
absence	O
/	O
presence	O
of	O
diacritical	O
marks	O
,	O
I	O
would	O
like	O
to	O
be	O
able	O
to	O
merge	B-API
as	O
long	O
as	O
they	O
are	O
similar	O
to	O
one	O
another	O
.	O

Any	O
similarity	O
algorithm	O
will	O
do	O
(	O
soundex	O
,	O
Levenshtein	O
,	O
difflib's	O
)	O
.	O

Say	O
one	O
DataFrame	B-API
has	O
the	O
following	O
data	O
:	O

Then	O
I	O
want	O
to	O
get	O
the	O
resulting	O
DataFrame	B-API

I	O
just	O
merged	O
a	O
few	O
hundred	O
DataFrames	O
yesterday	O
using	O
`	O
.rename	B-API
`	O
,	O
usually	O
this	O
is	O
quite	O
a	O
quick	O
solution	O
(	O
although	O
I	O
guess	O
it	O
depends	O
how	O
many	O
misspelling	O
there	O
are	O
...	O
)	O
-	O
and	O
I	O
like	O
to	O
control	O
what	O
column	O
names	O
are	O
truly	O
similar	O
.	O

Perhaps	O
I	O
should	O
have	O
been	O
clearer	O
(	O
will	O
edit	O
question	O
now	O
)	O
.	O

I	O
want	O
to	O
merge	B-API
on	O
similar	O
values	O
between	O
two	O
DataFrames	O

Similar	O
to	O
@USER	O
suggestion	O
,	O
you	O
can	O
apply	B-API
`	O
difflib	O
`	O
'	O
s	O
`	O
get_closest_matches	O
`	O
to	O
`	O
df2	O
`'	O
s	O
index	O
and	O
then	O
apply	B-API
a	O
`	O
join	B-API
`	O
:	O

.	O

If	O
these	O
were	O
columns	O
,	O
in	O
the	O
same	O
vein	O
you	O
could	O
apply	B-API
to	O
the	O
column	O
then	O
`	O
merge	B-API
`	O
:	O

That's	O
great	O
.	O

While	O
locojay	O
provided	O
the	O
basic	O
idea	O
(	O
and	O
faster	O
)	O
your	O
example	O
implementation	O
gets	O
the	O
answer	O
accepted	O
.	O

Makes	O
it	O
all	O
the	O
easier	O
to	O
test	O
.	O

Upvote	O
for	O
providing	O
both	O
index	O
and	O
column	O
based	O
answers	O
!	O

Does	O
anyone	O
know	O
if	O
there	O
is	O
a	O
way	O
to	O
do	O
this	O
between	O
rows	O
of	O
one	O
column	O
?	O

I'm	O
trying	O
to	O
find	O
duplicates	O
that	O
might	O
have	O
typos	O

you	O
can	O
use	O
n=1	O
to	O
limit	O
the	O
results	O
to	O
1	O
.	O
docs.python.org/3/library	O

Doesn't	O
work	O
if	O
there	O
are	O
several	O
matches	O
.	O

http://pandas.pydata.org/pandas-docs/dev/merging.html	O
does	O
not	O
have	O
a	O
hook	O
function	O
to	O
do	O
this	O
on	O
the	O
fly	O
.	O

Would	O
be	O
nice	O
though	O
...	O

I	O
would	O
just	O
do	O
a	O
separate	O
step	O
and	O
use	O
difflib	O
getclosest_matches	O
to	O
create	O
a	O
new	O
column	O
in	O
one	O
of	O
the	O
2	O
dataframes	O
and	O
the	O
merge	B-API
/	O
join	B-API
on	O
the	O
fuzzy	O
matched	O
column	O

Could	O
you	O
explain	O
how	O
to	O
use	O
`	O
difflib.get_closest_matches	O
`	O
to	O
create	O
such	O
a	O
column	O
and	O
then	O
merge	B-API
on	O
that	O
?	O

I	O
would	O
use	O
Jaro-Winkler	O
,	O
because	O
it	O
is	O
one	O
of	O
the	O
most	O
performant	O
and	O
accurate	O
approximate	O
string	O
matching	O
algorithms	O
currently	O
available	O
[	O
Cohen	O
,	O
et	O
al	O
.	O
]	O
,	O
[	O
Winkler	O
]	O
.	O

This	O
is	O
how	O
I	O
would	O
do	O
it	O
with	O
Jaro-Winkler	O
from	O
the	O
jellyfish	O
package	O
:	O

Output	O
:	O

how	O
about	O
def	O
get_closest_match	O
(	O
x	O
,	O
list_strings	O
):	O
return	O
sorted	O
(	O
list_strings	O
,	O
key=lambda	O
y	O
:	O
jellyfish.jaro_winkler	O
(	O
x	O
,	O
y	O
)	O
,	O
reverse=True	O
)	O
[	O
0	O
]	O

As	O
a	O
heads	O
up	O
,	O
this	O
basically	O
works	O
,	O
except	O
if	O
no	O
match	O
is	O
found	O
,	O
or	O
if	O
you	O
have	O
NaNs	O
in	O
either	O
column	O
.	O

Instead	O
of	O
directly	O
applying	O
`	O
get_close_matches	O
`	O
,	O
I	O
found	O
it	O
easier	O
to	O
apply	B-API
the	O
following	O
function	O
.	O

The	O
choice	O
of	O
NaN	O
replacements	O
will	O
depend	O
a	O
lot	O
on	O
your	O
dataset	O
.	O

