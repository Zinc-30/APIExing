Modify tick label text
I want to make some modifications to a few selected tick labels in a plot .
For example , if I do :
the font size and the orientation of the tick label is changed .
However , if try :
the tick label is not modified . Also if I do :
nothing is printed .
Here's some more strangeness . When I tried this :
Only empty strings are printed , but the plot contains ticks labeled as ' 0.0 ' , ' 0.5 ' , ' 1.0 ' , ' 1.5 ' , and ' 2.0 ' .
Can you supply the plot you used for getting the label from ?
See snippet above
You're getting blank labels because you haven't drawn the canvas yet . If you call ` draw() ` before trying to print the labels , you'll get what you expect . Setting individual tick labels is unfortunately a touch more difficult ( what's happening is that the tick locator and formatter hasn't been reset and it overrides things when you ` set_text `) . I'll add an example in a bit , if someone doesn't beat me to it . I have to catch the bus , at the moment , though .
@USER : Great ! Looking forward to see your fix .
@USER - Well , it seems I spoke a touch too soon . What I had in mind works for older versions of matplotlib , but not the latest version . I need to do a bit more digging . That having been said , this shouldn't be as complicated as it is ...
Caveat : Unless the ticklabels are already set to a string ( as is usually the case in e.g. a boxplot ) , this will not work with any version of matplotlib newer than ` 1.1.0 ` . If you're working from the current github master , this won't work . I'm not sure what the problem is yet ... It may be an unintended change , or it may not be ...
Normally , you'd do something along these lines :
To understand the reason why you need to jump through so many hoops , you need to understand a bit more about how matplotlib is structured .
Matplotlib deliberately avoids doing " static " positioning of ticks , etc , unless it's explicitly told to . The assumption is that you'll want to interact with the plot , and so the bounds of the plot , ticks , ticklabels , etc will be dynamically changing .
Therefore , you can't just set the text of a given tick label . By default , it's re-set by the axis's Locator and Formatter every time the plot is drawn .
However , if the Locators and Formatters are set to be static ( ` FixedLocator ` and ` FixedFormatter ` , respectively ) , then the tick labels stay the same .
This is what ` set_*ticklabels ` or ` ax . * axis.set_ticklabels ` does .
Hopefully that makes it slighly more clear as to why changing an individual tick label is a bit convoluted .
Often , what you actually want to do is just annotate a certain position . In that case , look into ` annotate ` , instead .
this does not appear to work with the current version ( 1.20 ) !
If the ticklabels are already set to a string as in e.g. a boxplot , this is still working . This might be obvious , but since the first line of the answer is that it is not working on newer matplotlib versions , users might skip it completely ( I did initially ) . Maybe mention this briefly .
i think you can condense it down to plt.gca() .set_xticklabels ( labels )
In newer versions of ` matplotlib ` , if you do not set the tick labels with a bunch of ` str ` values , they are `''` by default ( and when the plot is draw the labels are simply the ticks values ) . Knowing that , to get your desired output would require something like this :
and the result :
and now if you check the ` _xticklabels ` , they are no longer a bunch of `''` .
It works in the versions from ` 1.1.1rc1 ` to the current version ` 2.0 ` .
Thanks , this is the answer I was looking for . Cleanest solution IMO ; just supply ` set_xticklabels ` with a mixed list of strings and tick objects .
One can also do this with pylab and xticks
http://matplotlib.org/examples/ticks_and_spines/ticklabels_demo_rotation.html
This is a simple solution and works with pyplot 1.5.1 . This should be upvoted .
Although the question didn't ask for this , I appreciate that this example lets you set the location of the ticks at the same time as modifying their labels .
The axes class has a set_yticklabels function which allows you to set the tick labels , like so :
I'm still working on why your example above didn't work .
But I only want to alter a single label . The above trick requires that you extract all tick labels and set the desired one to a new value . But how can I extract the tick labels when label.get_text() returns nothing ?
This works :
you can do :