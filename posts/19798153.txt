Difference between map , applymap and apply methods in Pandas
Can you tell me when to use these vectorization methods with basic examples ? I see that ` map ` is a ` Series ` method whereas the rest are ` DataFrame ` methods . I got confused about ` apply ` and ` applymap ` methods though . Why do we have two methods for applying a function to a DataFrame ? Again , simple examples which illustrate the usage would be great !
Thanks !
Straight from Wes McKinney's Python for Data Analysis book , pg . 132 ( I highly recommended this book ):
Another frequent operation is applying a function on 1D arrays to each column or row . DataFrame s apply method does exactly this :
Many of the most common array statistics ( like sum and mean ) are DataFrame methods ,
so using apply is not necessary .
Element-wise Python functions can be used , too . Suppose you wanted to compute a formatted string from each floating point value in frame . You can do this with applymap :
The reason for the name applymap is that Series has a map method for applying an element-wise function :
Summing up , ` apply ` works on a row / column basis of a DataFrame , ` applymap ` works element-wise on a DataFrame , and ` map ` works element-wise on a Series .
strictly speaking , applymap internally is implemented via apply with a little wrap-up over passed function parameter ( rougly speaking replacing ` func ` to ` lambda x : [ func ( y ) for y in x ]` , and applying column-wise )
Thanks for the explanation . Since ` map ` and ` applymap ` both work element-wise , I would expect a single method ( either ` map ` or ` applymap `) which would work both for a Series and a DataFrame . Probably there are other design considerations , and Wes McKinney decided to come up with two different methods .
It's on page 129 in my copy for some reason . There's no label for second edition or anything .
Is there a way to do ` applymap ` along with ` groupby ` function in pandas ?
Adding to the other answers , in a ` Series ` there are also map and apply .
Apply can make a DataFrame out of a series ; however , map will just put a series in every cell of another series , which is probably not what you want .
Also if I had a function with side effects , such as " connect to a web server " , I'd probably use ` apply ` just for the sake of clarity .
` Map ` can use not only a function , but also a dictionary or another series . Let's say you want to manipulate permutations .
Take
The square of this permutation is
You can compute it using ` map ` . Not sure if self-application is documented , but it works in ` 0.15.1 ` .
Also , .apply() lets you pass in kwargs into the function while .map() doesn't .
@USER mentioned that apply works on row / columns , while applymap works element-wise . But it seems you can still use apply for element-wise computation ....
Good catch with this . The reason this works in your example is because np.sqrt is a ufunc , i.e. if you give it an array , it will broadcast the sqrt function onto each element of the array . So when apply pushes np.sqrt on each columns , np.sqrt works itself on each of the elements of the columns , so you are essentially getting the same result as applymap .
There's great information in these answers , but I'm adding my own to clearly summarize which methods work array-wise versus element-wise . jeremiahbuddha mostly did this but did not mention Series.apply . I don't have the rep to comment .
` DataFrame.apply ` operates on entire rows or columns at a time .
` DataFrame.applymap ` , ` Series.apply ` , and ` Series.map ` operate on one
element at time .
There is a lot of overlap between the capabilities of ` Series.apply ` and ` Series.map ` , meaning that either one will work in most cases . They do have some slight differences though , some of which were discussed in osa's answer .
Just wanted to point out , as I struggled with this for a bit
this does not modify the dataframe itself , has to be reassigned
I sometimes have trouble in figuring out whether you have to reassign or not after doing something with the df . It's mostly trial and error for me , but I bet there is a logic to how it works ( that I am missing out ) .
in general , a pandas dataframe is only modified by either reassigning ` df = modified_df ` or if you set ` inplace=True ` flag . Also dataframe will change if you pass a dataframe to a function by reference and the function modifies the dataframe
This is not entirely true , think of ` .ix ` or ` .where ` etc . Not sure what the full explanation is for when you need to re-assign and when not .
Probably simplest explanation the difference between apply and applymap :
apply takes the whole column as a parameter and then assign the result to this column
applymap takes the separate cell value as a parameter and assign the result back to this cell .
NB If apply returns the single value you will have this value instead of the column after assigning and eventually will have just a row instead of matrix .