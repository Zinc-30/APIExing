Histogram Matplotlib
So I have a little problem . I have a data set in scipy that is already in the histogram format , so I have the center of the bins and the number of events per bin . How can I now plot is as a histogram . I tried just doing
but it didn't like that . Any recommendations ?
The object-oriented interface is also straightforward :
If you are using custom ( non-constant ) bins , you can pass compute the widths using ` np.diff ` , pass the widths to ` ax.bar ` and use ` ax.set_xticks ` to label the bin edges :
Is there a way to pass the bin edges to the x-axis of the bar graph ?
@USER : ` plt.bar `' s ` width ` parameter can accept an array-like object ( instead of a scalar ) . So you could use ` width = np.diff ( bins )` instead of ` width = 0.7 * ( bins [ 1 ] - bins [ 0 ])` .
But the ` width ` setting by itself only sets the width of the bar right ? I'm talking about the x-axis labels ( that is I want to see the actual bin edges being labels on the x-axis ) . It should be similar to how ` plt.hist ` works .
@USER : You could use ` ax.set_xticks ` to set the xlabels . I've added an example above to show what I mean .
Thanks , that solves the problem .
If you don't want bars you can plot it like this :
You can also use ` ax.step ` .
If you're willing / desiring to use Pandas :
If you are going to suggest using ` pandas ` you should probably include a link to their site and a more through example that explains what is going on .
I know this does not answer your question , but I always end up on this page , when I search for the matplotlib solution to histograms , because the simple ` histogram_demo ` was removed from the matplotlib example gallery page .
Here is a solution , which doesn't require ` numpy ` to be imported . I only import numpy to generate the data ` x ` to be plotted . It relies on the function ` hist ` instead of the function ` bar ` as in the answer by @USER .
Also check out the matplotlib gallery and the matplotlib examples .
I think this might be useful for someone .
Numpy's histogram function , to my annoyance ( although , I appreciate there is a good reason for it ) , returns back the edges of each bin , rather than the value of the bin . While , this makes sense for floating-point numbers , which can lie within an interval ( i.e. the center value is not super meaningful ) , this is not the desired output when dealing with discrete values or integers ( 0 , 1 , 2 , etc ) . In particular , the length of bins returned from np.histogram is not equal to the length of the counts / density .
To get around this , I used np.digitize to quantize the input , and return a discrete number of bins , along with fraction of counts for each bin . You could easily edit to get the integer number of counts .
Refs :
[ 1 ] https://docs.scipy.org/doc/numpy/reference/generated/numpy.histogram.html
[ 2 ]
https://docs.scipy.org/doc/numpy/reference/generated/numpy.digitize.html
Best way to do this is :
x.hist ( y , 20 )
This is assuming that x is the name of whatever data you want to make into a histogram , y is the column of data you want to make the data of ( in a matrix ) , and 20 is the number of bins you want in your histogram .
I find this method easier and shorter than most others . Hope it helps !
You don't say what type of object ` x ` is . But assuming it is a numpy array , it doesn't have the ` hist ` method , so this wouldn't work .