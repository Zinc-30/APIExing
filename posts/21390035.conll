Python	O
pandas	O
groupby	B-API
object	O
apply	B-API
method	O
duplicates	O
first	O
group	O

My	O
first	O
SO	O
question	O
:	O

I	O
am	O
confused	O
about	O
this	O
behavior	O
of	O
apply	B-API
method	O
of	O
groupby	B-API
in	O
pandas	O
(	O
0.12.0-4	O
)	O
,	O
it	O
appears	O
to	O
apply	B-API
the	O
function	O
TWICE	O
to	O
the	O
first	O
row	O
of	O
a	O
data	O
frame	O
.	O

For	O
example	O
:	O

I	O
first	O
check	O
that	O
the	O
groupby	B-API
function	O
works	O
ok	O
,	O
and	O
it	O
seems	O
to	O
be	O
fine	O
:	O

Then	O
I	O
try	O
to	O
do	O
something	O
similar	O
using	O
apply	B-API
on	O
the	O
groupby	B-API
object	O
and	O
I	O
get	O
the	O
first	O
row	O
output	O
twice	O
:	O

Any	O
help	O
would	O
be	O
appreciated	O
!	O

Thanks	O
.	O

Edit	O
:	O
@USER	O
provides	O
the	O
answer	O
below	O
.	O

I	O
am	O
dense	O
and	O
did	O
not	O
understand	O
it	O
immediately	O
,	O
so	O
here	O
is	O
a	O
simple	O
example	O
to	O
show	O
that	O
despite	O
the	O
double	O
printout	O
of	O
the	O
first	O
group	O
in	O
the	O
example	O
above	O
,	O
the	O
apply	B-API
method	O
operates	O
only	O
once	O
on	O
the	O
first	O
group	O
and	O
does	O
not	O
mutate	O
the	O
original	O
data	O
frame	O
:	O

But	O
by	O
assigning	O
the	O
return	O
of	O
the	O
method	O
to	O
a	O
new	O
object	O
,	O
we	O
see	O
that	O
it	O
works	O
as	O
expected	O
:	O

df2	O
=	O
df.groupby	B-API
(	O
'	O
class	O
'	O
,	O
group_keys	O
=	O
True	O
)	O
.apply	B-API
(	O
addone	O
)	O

print	O
(	O
df2	O
)	O

This	O
is	O
checking	O
whether	O
you	O
are	O
mutating	O
the	O
data	O
in	O
the	O
apply	B-API
.	O

If	O
you	O
are	O
then	O
it	O
has	O
to	O
take	O
a	O
slower	O
path	O
than	O
otherwise	O
.	O

It	O
doesn't	O
change	O
the	O
results	O
.	O

@USER	O
:	O
Could	O
the	O
result	O
of	O
the	O
first	O
call	O
be	O
saved	O
so	O
it	O
is	O
not	O
called	O
again	O
?	O

This	O
might	O
help	O
if	O
the	O
function	O
called	O
by	O
apply	B-API
takes	O
a	O
long	O
time	O
...	O

(	O
along	O
with	O
being	O
more	O
intuitive	O
,	O
since	O
this	O
question	O
comes	O
up	O
a	O
lot	O
.	O
)	O

@USER	O
:	O
Or	O
maybe	O
the	O
function	O
could	O
be	O
wrapped	O
in	O
a	O
memoizer	O
...	O

its	O
actually	O
tricky	O
;	O
the	O
fast-path	O
is	O
in	O
cython	O
(	O
usually	O
)	O
,	O
so	O
right	O
now	O
it	O
doesn't	O
pass	O
it	O
back	O
to	O
python	O
space	O
(	O
it	O
could	O
I	O
suppose	O
)	O
.	O
transform	B-API
DOES	O
do	O
this	O
however	O
(	O
where	O
it	O
choses	O
a	O
path	O
and	O
then	O
uses	O
that	O
result	O
to	O
move	O
on	O
)	O
.	O

Its	O
just	O
a	O
little	O
bit	O
tricky	O
in	O
code	O
.	O

Welcome	O
to	O
do	O
a	O
PR	O
!	O

Wouldn't	O
it	O
make	O
more	O
sense	O
to	O
just	O
bite	O
the	O
bullet	O
and	O
make	O
an	O
explicit	O
mutating	O
/	O
non-mutating	O
parameter	O
,	O
defaulting	O
to	O
non-mutating	O
?	O

[	O
Somewhat	O
silly	O
additional	O
comment	O
deleted	O
,	O
but	O
my	O
first	O
question	O
stands	O
.	O
]	O

This	O
is	O
by	O
design	O
,	O
as	O
described	O
here	O
and	O
here	O

The	O
`	O
apply	B-API
`	O
function	O
needs	O
to	O
know	O
the	O
shape	O
of	O
the	O
returned	O
data	O
to	O
intelligently	O
figure	O
out	O
how	O
it	O
will	O
be	O
combined	O
.	O

To	O
do	O
this	O
it	O
calls	O
the	O
function	O
(	O
`	O
checkit	O
`	O
in	O
your	O
case	O
)	O
twice	O
to	O
achieve	O
this	O
.	O

Depending	O
on	O
your	O
actual	O
use	O
case	O
,	O
you	O
can	O
replace	O
the	O
call	O
to	O
`	O
apply	B-API
`	O
with	O
`	O
aggregate	B-API
`	O
,	O
`	O
transform	B-API
`	O
or	O
`	O
filter	B-API
`	O
,	O
as	O
described	O
in	O
detail	O
here	O
.	O

These	O
functions	O
require	O
the	O
return	O
value	O
to	O
be	O
a	O
particular	O
shape	O
,	O
and	O
so	O
don't	O
call	O
the	O
function	O
twice	O
.	O

However	O
-	O
if	O
the	O
function	O
you	O
are	O
calling	O
does	O
not	O
have	O
side-effects	O
,	O
it	O
most	O
likely	O
does	O
not	O
matter	O
that	O
the	O
function	O
is	O
being	O
called	O
twice	O
on	O
the	O
first	O
value	O
.	O

