How	O
to	O
change	O
the	O
order	O
of	O
DataFrame	B-API
columns	O
?	O

I	O
have	O
the	O
following	O
`	O
DataFrame	B-API
`	O
(	O
`	O
df	O
`)	O
:	O

I	O
add	O
more	O
column	O
(	O
s	O
)	O
by	O
assignment	O
:	O

How	O
can	O
I	O
move	O
the	O
column	O
`	O
mean	B-API
`	O
to	O
the	O
front	O
,	O
i.e.	O
set	O
it	O
as	O
first	O
column	O
leaving	O
the	O
order	O
of	O
the	O
other	O
columns	O
untouched	O
?	O

possible	O
duplicate	O
of	O
Python	O
Pandas	O
-	O
Re-ordering	O
columns	O
in	O
a	O
dataframe	B-API
based	O
on	O
column	O
name	O

Out	O
of	O
curiosity	O
,	O
what	O
would	O
be	O
the	O
consequences	O
of	O
allowing	O
someone	O
with	O
high	O
reputation	O
accept	O
the	O
most	O
popular	O
/	O
correct	O
answer	O
when	O
the	O
original	O
author	O
of	O
the	O
question	O
does	O
not	O
?	O

One	O
easy	O
way	O
would	O
be	O
to	O
reassign	O
the	O
dataframe	B-API
with	O
a	O
list	O
of	O
the	O
columns	O
,	O
rearranged	O
as	O
needed	O
.	O

This	O
is	O
what	O
you	O
have	O
now	O
:	O

Rearrange	O
`	O
cols	O
`	O
in	O
any	O
way	O
you	O
want	O
.	O

This	O
is	O
how	O
I	O
moved	O
the	O
last	O
element	O
to	O
the	O
first	O
position	O
:	O

Then	O
reorder	O
the	O
dataframe	B-API
like	O
this	O
:	O

incase	O
you	O
get	O
"	O
cannot	O
concatenate	O
'	O
str	O
'	O
and	O
'	O
list	O
'	O
objects	O
"	O
make	O
sure	O
you	O
[	O
]	O
the	O
str	O
value	O
in	O
cols	O
:	O
cols	O
=	O
[	O
cols	O
[	O
7	O
]]	O
+	O
cols	O
[:	O
7	O
]	O
+	O
cols	O
[8	O
:]	O

Is	O
there	O
any	O
reason	O
to	O
use	O
`	O
df.ix	B-API
[:	O
,	O
cols	O
]`	O
over	O
`	O
df	O
[	O
cols	O
]`	O
?	O

@USER	O
That's	O
not	O
a	O
set	O
union	O
it's	O
a	O
concatenation	O
of	O
two	O
ordered	O
lists	O
.	O

@USER	O
I'm	O
just	O
pointing	O
out	O
that	O
your	O
code	O
is	O
deprecated	O
.	O

Your	O
handling	O
of	O
your	O
post	O
is	O
at	O
your	O
discretion	O
.	O

@USER	O
,	O
the	O
type	O
of	O
`	O
cols	O
`	O
is	O
`	O
list	O
`	O
;	O
it	O
even	O
allows	O
duplicates	O
(	O
which	O
will	O
be	O
discarded	O
when	O
used	O
on	O
the	O
dataframe	B-API
)	O
.	O

You	O
are	O
thinking	O
of	O
`	O
Index	B-API
`	O
objects	O
.	O

You	O
could	O
also	O
do	O
something	O
like	O
this	O
:	O

You	O
can	O
get	O
the	O
list	O
of	O
columns	O
with	O
:	O

The	O
output	O
will	O
produce	O
:	O

...	O
which	O
is	O
then	O
easy	O
to	O
rearrange	O
manually	O
before	O
dropping	O
it	O
into	O
the	O
first	O
function	O

You	O
could	O
also	O
get	O
the	O
list	O
of	O
columns	O
with	O
list	O
(	O
df.columns	O
)	O

or	O
`	O
df.columns.tolist()	O
`	O

Just	O
assign	O
the	O
column	O
names	O
in	O
the	O
order	O
you	O
want	O
them	O
,	O
to	O
`	O
dataframe	B-API
.columns	O
`	O
like	O
below	O
:	O

Now	O
,	O
'	O
mean	O
'	O
column	O
comes	O
out	O
in	O
the	O
front	O
:	O

This	O
should	O
be	O
the	O
accepted	O
answer	O
.	O

Does	O
it	O
make	O
a	O
copy	O
?	O

@USER	O
-	O
This	O
isn't	O
the	O
best	O
answer	O
if	O
you	O
have	O
,	O
say	O
,	O
1000	O
columns	O
in	O
your	O
df	O
.	O

How	O
about	O
:	O

http://pandas.pydata.org/pandas-docs/stable/dsintro.html#column-selection-addition-deletion	O

Could	O
this	O
be	O
a	O
future	O
feature	O
add	O
to	O
`	O
pandas	O
`	O
?	O

something	O
like	O
`	O
df.move	O
(	O
0	O
,	O
df.mean	B-API
)`	O
?	O

In	O
your	O
case	O
,	O

will	O
do	O
exactly	O
what	O
you	O
what	O
.	O

In	O
my	O
case	O
(	O
general	O
form	O
):	O

You	O
need	O
to	O
create	O
a	O
new	O
list	O
of	O
your	O
columns	O
in	O
the	O
desired	O
order	O
,	O
then	O
use	O
`	O
df	O
=	O
df	O
[	O
cols	O
]`	O
to	O
rearrange	O
the	O
columns	O
in	O
this	O
new	O
order	O
.	O

You	O
can	O
also	O
use	O
a	O
more	O
general	O
approach	O
.	O

In	O
this	O
example	O
,	O
the	O
last	O
column	O
(	O
indicated	O
by	O
-1	O
)	O
is	O
inserted	O
as	O
the	O
first	O
column	O
.	O

You	O
can	O
also	O
use	O
this	O
approach	O
for	O
reordering	O
columns	O
in	O
a	O
desired	O
order	O
if	O
they	O
are	O
present	O
in	O
the	O
DataFrame	B-API
.	O

This	O
function	O
takes	O
two	O
arguments	O
,	O
the	O
first	O
is	O
the	O
dataset	O
,	O
the	O
second	O
are	O
the	O
columns	O
in	O
the	O
data	O
set	O
that	O
you	O
want	O
to	O
bring	O
to	O
the	O
front	O
.	O

So	O
in	O
my	O
case	O
I	O
have	O
a	O
data	O
set	O
called	O
Frame	O
with	O
variables	O
A1	O
,	O
A2	O
,	O
B1	O
,	O
B2	O
,	O
Total	O
and	O
Date	O
.	O

If	O
I	O
want	O
to	O
bring	O
Total	O
to	O
the	O
front	O
then	O
all	O
I	O
have	O
to	O
do	O
is	O
:	O

If	O
I	O
want	O
to	O
bring	O
Total	O
and	O
Date	O
to	O
the	O
front	O
then	O
I	O
do	O
:	O

EDIT	O
:	O

Another	O
useful	O
way	O
to	O
use	O
this	O
is	O
,	O
if	O
you	O
have	O
an	O
unfamiliar	O
table	O
and	O
you're	O
looking	O
with	O
variables	O
with	O
a	O
particular	O
term	O
in	O
them	O
,	O
like	O
VAR1	O
,	O
VAR2	O
,...	O
you	O
may	O
execute	O
something	O
like	O
:	O

Simply	O
do	O
,	O

TypeError	O
:	O
Can't	O
convert	O
'	O
int	O
'	O
object	O
to	O
str	O
implicitly	O

could	O
be	O
API	O
has	O
changed	O
,	O
you	O
can	O
also	O
do	O
this	O
...	O

`	O
order	O
=	O
df.columns.tolist()	O
`	O
`	O
df	O
[	O
'	O
mean	O
']	O
=	O
df.mean	B-API
(	O
1	O
)`	O
`	O
df.columns	O
=	O
[	O
'	O
mean	O
']	O
+	O
order	O
`	O

A	O
variation	O
of	O
this	O
worked	O
well	O
for	O
me	O
.	O

With	O
an	O
existing	O
list	O
,	O
`	O
headers	O
`	O
,	O
that	O
was	O
used	O
to	O
create	O
a	O
dict	O
that	O
was	O
then	O
used	O
to	O
create	O
the	O
DataFrame	B-API
,	O
I	O
called	O
`	O
df.reindex	B-API
(	O
columns=headers	O
)`	O
.	O

The	O
only	O
problem	O
I	O
ran	O
into	O
was	O
I	O
had	O
already	O
called	O
`	O
df.set_index	B-API
(	O
'	O
some	O
header	O
name	O
'	O
,	O
inplace=True	O
)`	O
,	O
so	O
when	O
the	O
reindex	B-API
was	O
done	O
,	O
it	O
added	O
another	O
column	O
named	O
`	O
some	O
header	O
name	O
`	O
since	O
the	O
original	O
column	O
was	O
now	O
the	O
index	O
.	O

As	O
for	O
the	O
syntax	O
specified	O
above	O
,	O
`	O
[	O
'	O
mean	O
']	O
+	O
df.columns	O
`	O
in	O
the	O
python	O
interpreter	O
gives	O
me	O
`	O
Index	O
(	O
u'meanAddress	O
'	O
,	O
u'meanCity	O
'	O
,	O
u'meanFirst	O
Name	O
'	O
...	O

`	O

@USER	O
:	O
I	O
don't	O
know	O
your	O
prior	O
code	O
is	O
,	O
but	O
the	O
edit	O
should	O
work	O
(	O
using	O
0.19.2	O
)	O

The	O
edit	O
does	O
indeed	O
work	O
(	O
I'm	O
on	O
0.20.2	O
)	O
.	O

In	O
my	O
case	O
,	O
I've	O
already	O
got	O
the	O
columns	O
I	O
want	O
,	O
so	O
I	O
think	O
df.reindex()	B-API
is	O
what	O
I	O
really	O
should	O
use	O
.	O

I	O
ran	O
into	O
a	O
similar	O
question	O
myself	O
,	O
and	O
just	O
wanted	O
to	O
add	O
what	O
I	O
settled	O
on	O
.	O

I	O
liked	O
the	O
reindex_axis	B-API
(	O
)	O
method	O
for	O
changing	O
column	O
order	O
.	O

This	O
worked	O
:	O

`	O
df	O
=	O
df.reindex_axis	B-API
([	O
'	O
mean	O
']	O
+	O
list	O
(	O
df.columns	O
[:	O
-1	O
])	O
,	O
axis=1	O
)`	O

You	O
could	O
do	O
the	O
following	O
(	O
borrowing	O
parts	O
from	O
Aman's	O
answer	O
):	O

This	O
question	O
has	O
been	O
answered	O
before	O
:	O

No	O
,	O
that's	O
different	O
.	O

There	O
the	O
user	O
wants	O
to	O
sort	O
all	O
columns	O
by	O
name	O
.	O

Here	O
they	O
want	O
to	O
move	O
one	O
column	O
to	O
the	O
first	O
column	O
while	O
leaving	O
the	O
order	O
of	O
the	O
other	O
columns	O
untouched	O
.	O

What	O
if	O
you	O
don't	O
want	O
them	O
sorted	O
?	O

How	O
about	O
using	O
"	O
T	B-API
"	O
?	O

I	O
tried	O
the	O
`	O
insert()	O
`	O
function	O
as	O
suggested	O
by	O
Wes	O
McKinney	O
.	O

df.insert	B-API
(	O
0	O
,	O
'	O
mean	O
'	O
,	O
df.mean	B-API
(	O
1	O
))	O

This	O
got	O
the	O
result	O
that	O
Timmie	O
wanted	O
,	O
in	O
one	O
line	O
,	O
without	O
the	O
need	O
to	O
move	O
that	O
last	O
column	O
.	O

I	O
believe	O
@USER	O
'	O
s	O
answer	O
is	O
the	O
best	O
if	O
you	O
know	O
the	O
location	O
of	O
the	O
other	O
column	O
.	O

If	O
you	O
don't	O
know	O
the	O
location	O
of	O
`	O
mean	B-API
`	O
,	O
but	O
only	O
have	O
its	O
name	O
,	O
you	O
cannot	O
resort	O
directly	O
to	O
`	O
cols	O
=	O
cols	O
[	O
-1	O
:]	O
+	O
cols	O
[:	O
-1	O
]`	O
.	O

Following	O
is	O
the	O
next-best	O
thing	O
I	O
could	O
come	O
up	O
with	O
:	O

Just	O
type	O
the	O
column	O
name	O
you	O
want	O
to	O
change	O
,	O
and	O
set	O
the	O
index	O
for	O
the	O
new	O
location	O
.	O

For	O
your	O
case	O
,	O
this	O
would	O
be	O
like	O
:	O

@USER	O
:	O
Your	O
solution	O
was	O
very	O
helpful	O
for	O
me	O
,	O
as	O
I	O
wanted	O
to	O
bring	O
two	O
columns	O
in	O
front	O
from	O
a	O
dataframe	B-API
where	O
I	O
do	O
not	O
know	O
exactly	O
the	O
names	O
of	O
all	O
columns	O
,	O
because	O
they	O
are	O
generated	O
from	O
a	O
pivot	B-API
statement	O
before	O
.	O

So	O
,	O
if	O
you	O
are	O
in	O
the	O
same	O
situation	O
:	O
To	O
bring	O
columns	O
in	O
front	O
that	O
you	O
know	O
the	O
name	O
of	O
and	O
then	O
let	O
them	O
follow	O
by	O
"	O
all	O
the	O
other	O
columns	O
"	O
,	O
I	O
came	O
up	O
with	O
the	O
following	O
general	O
solution	O
;	O

The	O
simplest	O
way	O
would	O
be	O
to	O
change	O
the	O
order	O
of	O
the	O
column	O
names	O
like	O
this	O

`	O
df	O
=	O
df	O
[[	O
'	O
mean	O
'	O
,	O
Col1	O
,	O
Col2	O
,	O
Col3	O
]]`	O

`	O
DataFrame.sort_index	B-API
(	O
axis=1	O
)`	O
is	O
quite	O
clean	O
.	O

Check	O
doc	O
here	O

