Python	O
,	O
Pandas	O
:	O
Use	O
the	O
GroupBy.groups	B-API
description	O
to	O
apply	B-API
it	O
to	O
another	O
grouping	O

Let's	O
consider	O
a	O
DataFrame	B-API
that	O
contains	O
1	O
row	O
of	O
2	O
values	O
per	O
each	O
day	O
of	O
the	O
month	O
of	O
Jan	O
2010	O
:	O

I	O
split	O
that	O
DataFrame	B-API
into	O
a	O
list	O
of	O
5	O
DataFrames	O
,	O
each	O
of	O
them	O
containing	O
1	O
week	O
worth	O
of	O
data	O
from	O
the	O
original	O
:	O
`	O
df_weeks	O
=	O
[	O
g	O
for	O
n	O
,	O
g	O
in	O
df.groupby	B-API
(	O
pd.TimeGrouper	O
(	O
'	O
W	O
'))]`	O

If	O
I	O
type	O
`	O
df.groupby	B-API
(	O
pd.TimeGrouper	O
(	O
'	O
W	O
'))	O
.groups	B-API
`	O
I	O
can	O
see	O
a	O
dict	O
explaining	O
how	O
the	O
groups	O
are	O
split	O
:	O

Let's	O
consider	O
another	O
TimeSerie	O
that	O
has	O
sparser	O
data	O
yet	O
overlaps	O
with	O
the	O
first	O
one	O
:	O

If	O
I	O
run	O
the	O
same	O
code	O
`	O
obs_weeks	O
=	O
[	O
g	O
for	O
n	O
,	O
g	O
in	O
observations.groupby	O
(	O
pd.TimeGrouper	O
(	O
'	O
W	O
'))]`	O
,	O
obviously	O
it	O
will	O
returns	O
less	O
DataFrames	O
in	O
the	O
list	O
,	O
as	O
the	O
data	O
covers	O
less	O
span	O
.	O

`	O
observations.groupby	O
(	O
pd.TimeGrouper	O
(	O
'	O
W	O
'))	O
.groups	B-API
`	O
returns	O
:	O

But	O
would	O
there	O
be	O
a	O
way	O
to	O
reuse	O
the	O
groups	O
of	O
the	O
first	O
DataFrame.GroupBy	B-API
to	O
apply	B-API
it	O
to	O
the	O
second	O
one	O
?	O

i.e.	O
that	O
would	O
mean	O
in	O
that	O
specific	O
case	O
ending	O
up	O
with	O
a	O
variable	O
`	O
obs_weeks	O
`	O
containing	O
5	O
DataFrames	O
spanning	O
the	O
same	O
time	O
range	O
as	O
`	O
df_weeks	O
`	O
,	O
2	O
of	O
them	O
being	O
empty	O
?	O

One	O
simple	O
solution	O
to	O
your	O
problem	O
would	O
be	O
to	O
make	O
sure	O
the	O
observations	O
dataframe	B-API
contains	O
all	O
the	O
dates	O
that	O
the	O
df	O
dataframe	B-API
does	O
.	O

You	O
can	O
do	O
this	O
with	O
the	O
`	O
reindex	B-API
`	O
method	O
.	O

You	O
will	O
then	O
have	O
the	O
exact	O
same	O
groups	O
.	O

You	O
can	O
also	O
use	O
`	O
resample	B-API
(	O
'	O
W	O
')`	O
instead	O
of	O
`	O
groupby	B-API
(	O
pd.Timegrouper	O
(	O
'	O
W	O
'))`	O

And	O
if	O
we	O
do	O
a	O
simple	O
aggregation	O
like	O
sum	O
we	O
can	O
see	O
the	O
results	O
of	O
both	O
frames	O

And	O
now	O
with	O
`	O
obs2	O
`	O
which	O
has	O
2	O
missing	O
groups	O

Thanks	O
a	O
lot	O
for	O
your	O
answer	O
.	O

However	O
I	O
am	O
receiving	O
the	O
following	O
error	O
message	O
when	O
trying	O
`	O
observations.reindex	O
(	O
df	O
)`	O
:	O
`	O
ValueError	O
:	O
The	O
truth	O
value	O
of	O
an	O
array	O
with	O
more	O
than	O
one	O
element	O
is	O
ambiguous	O
.	O

Use	O
a.any()	O
or	O
a.all()	O
`	O

I	O
am	O
using	O
a	O
slightly	O
different	O
dataset	O
for	O
`	O
observations	O
`	O
with	O
dates	O
1	O
8/	O
01	O
,	O
20	O
/	O
01	O
,	O
22	O
/	O
01	O
,	O
2	O
8/	O
01	O
,	O
but	O
I	O
would	O
assume	O
this	O
should	O
still	O
work	O
.	O

Apologies	O
.	O

I	O
meant	O
df.index	O
.	O

it's	O
corrected	O
now	O

