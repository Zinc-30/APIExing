Moving	O
matplotlib	O
legend	O
outside	O
of	O
the	O
axis	O
makes	O
it	O
cutoff	O
by	O
the	O
figure	O
box	O

I'm	O
familiar	O
with	O
the	O
following	O
questions	O
:	O

Matplotlib	O
savefig	O
with	O
a	O
legend	O
outside	O
the	O
plot	O

How	O
to	O
put	O
the	O
legend	O
out	O
of	O
the	O
plot	O

It	O
seems	O
that	O
the	O
answers	O
in	O
these	O
questions	O
have	O
the	O
luxury	O
of	O
being	O
able	O
to	O
fiddle	O
with	O
the	O
exact	O
shrinking	O
of	O
the	O
axis	O
so	O
that	O
the	O
legend	O
fits	O
.	O

Shrinking	O
the	O
axes	O
,	O
however	O
,	O
is	O
not	O
an	O
ideal	O
solution	O
because	O
it	O
makes	O
the	O
data	O
smaller	O
making	O
it	O
actually	O
more	O
difficult	O
to	O
interpret	O
;	O
particularly	O
when	O
its	O
complex	O
and	O
there	O
are	O
lots	O
of	O
things	O
going	O
on	O
...	O
hence	O
needing	O
a	O
large	O
legend	O

The	O
example	O
of	O
a	O
complex	O
legend	O
in	O
the	O
documentation	O
demonstrates	O
the	O
need	O
for	O
this	O
because	O
the	O
legend	O
in	O
their	O
plot	O
actually	O
completely	O
obscures	O
multiple	O
data	O
points	O
.	O

http://matplotlib.sourceforge.net/users/legend_guide.html#legend-of-complex-plots	O

What	O
I	O
would	O
like	O
to	O
be	O
able	O
to	O
do	O
is	O
dynamically	O
expand	O
the	O
size	O
of	O
the	O
figure	O
box	O
to	O
accommodate	O
the	O
expanding	B-API
figure	O
legend	O
.	O

Notice	O
how	O
the	O
final	O
label	O
'	O
Inverse	O
tan	O
'	O
is	O
actually	O
outside	O
the	O
figure	O
box	O
(	O
and	O
looks	O
badly	O
cutoff	O
-	O
not	O
publication	O
quality	O
!	O
)	O

Finally	O
,	O
I've	O
been	O
told	O
that	O
this	O
is	O
normal	O
behaviour	O
in	O
R	O
and	O
LaTeX	O
,	O
so	O
I'm	O
a	O
little	O
confused	O
why	O
this	O
is	O
so	O
difficult	O
in	O
python	O
...	O

Is	O
there	O
a	O
historical	O
reason	O
?	O

Is	O
Matlab	O
equally	O
poor	O
on	O
this	O
matter	O
?	O

I	O
have	O
the	O
(	O
only	O
slightly	O
)	O
longer	O
version	O
of	O
this	O
code	O
on	O
pastebin	O
http://pastebin.com/grVjc007	O

As	O
far	O
as	O
the	O
why's	O
it's	O
because	O
matplotlib	O
is	O
geared	O
towards	O
interactive	O
plots	O
,	O
while	O
R	O
,	O
etc	O
,	O
aren't	O
.	O

(	O
And	O
yes	O
,	O
Matlab	O
is	O
"	O
equally	O
poor	O
"	O
in	O
this	O
particular	O
case	O
.	O
)	O
To	O
do	O
it	O
properly	O
,	O
you	O
need	O
to	O
worry	O
about	O
resizing	O
the	O
axes	O
every	O
time	O
the	O
figure	O
is	O
resized	O
,	O
zoomed	O
,	O
or	O
the	O
legend's	O
position	O
is	O
updated	O
.	O

(	O
Effectively	O
,	O
this	O
means	O
checking	O
every	O
time	O
the	O
plot	O
is	O
drawn	O
,	O
which	O
leads	O
to	O
slowdowns	O
.	O
)	O
Ggplot	O
,	O
etc	O
,	O
are	O
static	O
,	O
so	O
that's	O
why	O
they	O
tend	O
to	O
do	O
this	O
by	O
default	O
,	O
whereas	O
matplotlib	O
and	O
matlab	O
don't	O
.	O

That	O
having	O
been	O
said	O
,	O
`	O
tight_layout()	O
`	O
should	O
be	O
changed	O
to	O
take	O
legends	O
into	O
account	O
.	O

I'm	O
also	O
discussing	O
this	O
question	O
on	O
the	O
matplotlib	O
users	O
mailing	O
list	O
.	O

So	O
I	O
have	O
the	O
suggestions	O
of	O
adjusting	O
the	O
savefig	O
line	O
to	O
:	O
fig.savefig	O
(	O
'	O
samplefigure	O
'	O
,	O
bbox_extra_artists	O
=(	O
lgd	O
,	O
)	O
,	O
bbox=	O
'	O
tight	O
')	O

I	O
know	O
matplotlib	O
likes	O
to	O
tout	O
that	O
everything	O
is	O
under	O
the	O
control	O
of	O
the	O
user	O
,	O
but	O
this	O
entire	O
thing	O
with	O
the	O
legends	O
is	O
too	O
much	O
of	O
a	O
good	O
thing	O
.	O

If	O
I	O
put	O
the	O
legend	O
outside	O
,	O
I	O
obviously	O
want	O
it	O
to	O
still	O
be	O
visible	O
.	O

The	O
window	O
should	O
just	O
scale	O
itself	O
to	O
fit	O
instead	O
of	O
creating	O
this	O
huge	O
rescaling	O
hassle	O
.	O

At	O
the	O
very	O
least	O
there	O
should	O
be	O
a	O
default	O
True	O
option	O
to	O
control	O
this	O
autoscaling	O
behavior	O
.	O

Forcing	O
users	O
to	O
go	O
through	O
a	O
ridiculous	O
number	O
of	O
re-renders	O
to	O
try	O
and	O
get	O
the	O
scale	O
numbers	O
right	O
in	O
the	O
name	O
of	O
control	O
accomplishes	O
the	O
opposite	O
.	O

Sorry	O
EMS	O
,	O
but	O
I	O
actually	O
just	O
got	O
another	O
response	O
from	O
the	O
matplotlib	O
mailling	O
list	O
(	O
Thanks	O
goes	O
out	O
to	O
Benjamin	O
Root	O
)	O
.	O

The	O
code	O
I	O
am	O
looking	O
for	O
is	O
adjusting	O
the	O
savefig	O
call	O
to	O
:	O

This	O
is	O
apparently	O
similar	O
to	O
calling	O
tight_layout	O
,	O
but	O
instead	O
you	O
allow	O
savefig	O
to	O
consider	O
extra	O
artists	O
in	O
the	O
calculation	O
.	O

This	O
did	O
in	O
fact	O
resize	O
the	O
figure	O
box	O
as	O
desired	O
.	O

This	O
produces	O
:	O

/	O
!	O

\	O
Seems	O
to	O
work	O
only	O
since	O
matplotlib	O
=	O
1.0	O
(	O
Debian	O
squeeze	O
have	O
0.99	O
and	O
this	O
does	O
not	O
work	O
)	O

Can't	O
get	O
this	O
to	O
work	O
:(	O
I	O
pass	O
in	O
lgd	O
to	O
savefig	O
but	O
it	O
still	O
doesn't	O
resize	O
.	O

The	O
problem	O
may	O
be	O
I'm	O
not	O
using	O
a	O
subplot	O
.	O

Ah	O
!	O

I	O
just	O
needed	O
to	O
use	O
bbox_inches	O
=	O
"	O
tight	O
"	O
as	O
you	O
did	O
.	O

Thanks	O
!	O

This	O
is	O
nice	O
,	O
but	O
I	O
still	O
get	O
my	O
figure	O
cut	B-API
when	O
I	O
try	O
to	O
`	O
plt.show()	O
`	O
it	O
.	O

Any	O
fix	O
for	O
that	O
?	O

I	O
know	O
this	O
is	O
old	O
,	O
but	O
is	O
there	O
any	O
way	O
to	O
make	O
this	O
work	O
for	O
version	O
0.99	O
?	O

Added	O
:	O
I	O
found	O
something	O
that	O
should	O
do	O
the	O
trick	O
right	O
away	O
,	O
but	O
the	O
rest	O
of	O
the	O
code	O
below	O
also	O
offers	O
an	O
alternative	O
.	O

Use	O
the	O
`	O
subplots_adjust()	O
`	O
function	O
to	O
move	O
the	O
bottom	O
of	O
the	O
subplot	O
up	O
:	O

Then	O
play	O
with	O
the	O
offset	O
in	O
the	O
legend	O
`	O
bbox_to_anchor	O
`	O
part	O
of	O
the	O
legend	O
command	O
,	O
to	O
get	O
the	O
legend	O
box	O
where	O
you	O
want	O
it	O
.	O

Some	O
combination	O
of	O
setting	O
the	O
`	O
figsize	O
`	O
and	O
using	O
the	O
`	O
subplots_adjust	O
(	O
bottom=	O
...	O
)`	O
should	O
produce	O
a	O
quality	O
plot	O
for	O
you	O
.	O

Alternative	O
:	O

I	O
simply	O
changed	O
the	O
line	O
:	O

to	O
:	O

and	O
changed	O

to	O

and	O
it	O
shows	O
up	O
fine	O
on	O
my	O
screen	O
(	O
a	O
24-inch	O
CRT	O
monitor	O
)	O
.	O

Here	O
`	O
figsize	O
=(	O
M	O
,	O
N	O
)`	O
sets	O
the	O
figure	O
window	O
to	O
be	O
M	O
inches	O
by	O
N	O
inches	O
.	O

Just	O
play	O
with	O
this	O
until	O
it	O
looks	O
right	O
for	O
you	O
.	O

Convert	O
it	O
to	O
a	O
more	O
scalable	O
image	O
format	O
and	O
use	O
GIMP	O
to	O
edit	O
if	O
necessary	O
,	O
or	O
just	O
crop	O
with	O
the	O
LaTeX	O
`	O
viewport	O
`	O
option	O
when	O
including	O
graphics	O
.	O

It	O
would	O
seem	O
that	O
this	O
is	O
the	O
best	O
solution	O
at	O
the	O
current	O
time	O
,	O
even	O
though	O
it	O
still	O
requires	O
'	O
playing	O
until	O
it	O
looks	O
good	O
'	O
which	O
is	O
not	O
a	O
good	O
solution	O
for	O
a	O
autoreport	O
generator	O
.	O

I	O
actually	O
already	O
use	O
this	O
solution	O
,	O
the	O
real	O
problem	O
is	O
that	O
matplotlib	O
doesn't	O
dynamically	O
compensate	O
for	O
the	O
legend	O
being	O
outside	O
the	O
bbox	O
of	O
the	O
axis	O
.	O

As	O
@USER	O
said	O
,	O
tight_layout	O
should	O
take	O
into	O
account	O
more	O
features	O
than	O
just	O
axis	O
,	O
titles	O
and	O
lables	O
.	O

I	O
might	O
add	O
this	O
as	O
a	O
feature	O
request	O
on	O
the	O
matplotlib	O
.	O

also	O
works	O
for	O
me	O
to	O
get	O
a	O
big	O
enough	O
picture	O
to	O
fit	O
the	O
xlabels	O
previously	O
being	O
cut	B-API
off	O

here	O
is	O
the	O
documentation	O
with	O
example	O
code	O
from	O
matplotlib.org	O

Here	O
is	O
another	O
,	O
very	O
manual	O
solution	O
.	O

You	O
can	O
define	O
the	O
size	O
of	O
the	O
axis	O
and	O
paddings	O
are	O
considered	O
accordingly	O
(	O
including	O
legend	O
and	O
tickmarks	O
)	O
.	O

Hope	O
it	O
is	O
of	O
use	O
to	O
somebody	O
.	O

Example	O
(	O
axes	O
size	O
are	O
the	O
same	O
!	O
):	O

Code	O
:	O

This	O
didn't	O
work	O
for	O
me	O
until	O
I	O
changed	O
the	O
first	O
`	O
plt.draw()	O
`	O
to	O
`	O
ax.figure.canvas.draw()	O
`	O
.	O

I'm	O
not	O
sure	O
why	O
,	O
but	O
before	O
this	O
change	O
the	O
legend	O
size	O
was	O
not	O
getting	O
updated	O
.	O

If	O
you	O
are	O
trying	O
to	O
use	O
this	O
on	O
a	O
GUI	O
window	O
,	O
you	O
need	O
to	O
change	O
`	O
fig.set_size_inches	O
(	O
widthTot	O
,	O
heightTot	O
)`	O
to	O
`	O
fig.set_size_inches	O
(	O
widthTot	O
,	O
heightTot	O
,	O
forward=True	O
)`	O
.	O

