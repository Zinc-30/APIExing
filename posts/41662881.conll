Pandas	O
DataFrame	B-API
iloc	B-API
spoils	O
the	O
data	O
type	O

Having	O
pandas	O
0.19.2	O
.	O

Here's	O
an	O
example	O
:	O

Output	O
:	O

Everything	O
looks	O
fine	O
for	O
now	O
,	O
but	O
what	O
I	O
don't	O
like	O
is	O
that	O
(	O
note	O
,	O
that	O
first	O
call	O
is	O
a	O
`	O
pd.Series.iloc	B-API
`	O
and	O
the	O
second	O
one	O
is	O
`	O
pd.DataFrame.iloc	B-API
`)	O

Output	O
:	O

I	O
found	O
it	O
while	O
trying	O
to	O
understand	O
why	O
`	O
pd.DataFrame.join()	B-API
`	O
operation	O
returned	O
almost	O
no	O
intersections	O
of	O
two	O
`	O
int64	O
`	O
columns	O
while	O
there	O
should	O
be	O
many	O
.	O

My	O
guess	O
is	O
because	O
of	O
type	O
inconsistency	O
which	O
might	O
be	O
connected	O
with	O
this	O
behaviour	O
,	O
but	O
I'm	O
not	O
sure	O
...	O

My	O
short	O
investigation	O
revealed	O
the	O
thing	O
above	O
and	O
now	O
I'm	O
confused	O
a	O
bit	O
.	O

If	O
someone	O
knows	O
how	O
to	O
solve	O
it	O
-	O
I'll	O
be	O
very	O
grateful	O
for	O
any	O
hints	O
!	O

UPD	O

Thanks	O
to	O
@USER	O
for	O
comments	O
.	O

So	O
here	O
is	O
the	O
example	O
with	O
my	O
generated	O
data	O
and	O
join	B-API
/	O
merge	B-API
behaviour	O

`	O
testdf.join	O
(	O
testdf	O
,	O
on=	O
'	O
A	O
'	O
,	O
rsuffix=	O
'	O
3	O
')`	O

And	O
what	O
is	O
considered	O
to	O
be	O
quite	O
the	O
same	O

`	O
pd.merge	B-API
(	O
left=testdf	O
,	O
right=testdf	O
,	O
on=	O
'	O
A	O
')`	O

returns	O

UPD2	O
Replicating	O
@USER	O
comment	O
on	O
`	O
join	B-API
`	O
and	O
`	O
merge	B-API
`	O
behaviour	O
.	O

The	O
problem	O
is	O
that	O
`	O
A.join	O
(	O
B	O
,	O
on=	O
'	O
C	O
')`	O
will	O
use	O
index	O
in	O
`	O
A	O
`	O
and	O
join	B-API
it	O
with	O
column	O
`	O
B	O
[	O
'	O
C	O
']`	O
,	O
since	O
by	O
default	O
join	B-API
uses	O
index	O
.	O

In	O
my	O
case	O
I	O
just	O
used	O
merge	B-API
to	O
get	O
desireable	O
result	O
.	O

`	O
iloc	B-API
`	O
returns	O
a	O
series	O
of	O
your	O
row	O
,	O
there	O
is	O
no	O
dtype	B-API
that	O
will	O
satisfy	O
both	O
int	O
and	O
float	O
hence	O
`	O
object	O
`	O
is	O
shown	O
,	O
what's	O
the	O
problem	O
here	O
as	O
your	O
row	O
is	O
a	O
mixed	O
dtype	B-API
?	O

if	O
your	O
columns	O
you're	O
trying	O
to	O
match	O
are	O
int64	O
then	O
value	O
comparison	O
should	O
work	O
as	O
expected	O
,	O
if	O
they're	O
float	O
then	O
this	O
may	O
run	O
into	O
precision	O
problems	O
,	O
this	O
has	O
nothing	O
to	O
do	O
with	O
what	O
you're	O
showing	O
above	O

@USER	O
Well	O
,	O
thanks	O
,	O
your	O
point	O
explains	O
my	O
example	O
.	O

My	O
columns	O
are	O
not	O
float	O
,	O
so	O
this	O
is	O
a	O
problem	O
somewhere	O
.	O

For	O
example	O
,	O
I	O
can	O
manually	O
find	O
specified	O
value	O
in	O
both	O
tables	O
,	O
however	O
,	O
join	B-API
fails	O
for	O
it	O
.	O

It	O
sounds	O
like	O
you	O
have	O
a	O
data	O
problem	O
,	O
if	O
your	O
values	O
don't	O
match	O
exactly	O
then	O
they	O
won't	O
join	B-API
/	O
merge	B-API
you	O
need	O
to	O
solve	O
that	O
issue	O
first	O
.	O
try	O
`	O
merge	B-API
`	O
and	O
pass	O
a	O
list	O
of	O
columns	O
to	O
`	O
on=	O
`	O
,	O
if	O
have	O
missing	O
values	O
in	O
a	O
column	O
then	O
the	O
dtype	B-API
becomes	O
float	O
,	O
additionally	O
trying	O
to	O
merge	B-API
`	O
NaN	O
`	O
will	O
introduce	O
errors	O
,	O
you	O
need	O
to	O
decide	O
whether	O
to	O
replace	O
these	O
or	O
drop	O
them	O
but	O
I	O
can't	O
tell	O
without	O
seeing	O
your	O
data	O
and	O
code	O
of	O
your	O
real	O
problem	O

note	O
`	O
join	B-API
`	O
by	O
default	O
tries	O
to	O
join	B-API
on	O
index	O
,	O
`	O
merge	B-API
`	O
will	O
try	O
to	O
merge	B-API
on	O
columns	O
,	O
they	O
are	O
semantically	O
different	O
but	O
you	O
can	O
get	O
the	O
same	O
results	O
depending	O
on	O
params	O
passed	O

This	O
is	O
as	O
expected	O
.	O

`	O
pandas	O
`	O
tracks	O
`	O
dtypes	B-API
`	O
per	O
column	O
.	O

When	O
you	O
call	O
`	O
testdf.iloc	O
[	O
0	O
]`	O
you	O
are	O
asking	O
pandas	O
for	O
a	O
row	O
.	O

It	O
has	O
to	O
convert	O
the	O
entire	O
row	O
into	O
a	O
series	O
.	O

That	O
row	O
contained	O
a	O
float	O
.	O

Therefore	O
the	O
row	O
as	O
a	O
series	O
must	O
be	O
float	O
.	O

However	O
,	O
it	O
seems	O
that	O
when	O
pandas	O
uses	O
`	O
loc	B-API
`	O
or	O
`	O
iloc	B-API
`	O
it	O
makes	O
this	O
conversion	O
when	O
you	O
use	O
a	O
single	O
`	O
__getitem__	O
`	O

Here	O
are	O
some	O
interesting	O
test	O
cases	O
for	O
a	O
`	O
testdf	O
`	O
with	O
one	O
`	O
int	O
`	O
column	O

Change	O
it	O
to	O
OP	O
test	O
case	O

So	O
,	O
it	O
appears	O
that	O
when	O
`	O
pandas	O
`	O
uses	O
`	O
loc	B-API
`	O
or	O
`	O
iloc	B-API
`	O
it	O
makes	O
some	O
conversions	O
across	O
rows	O
which	O
I	O
still	O
don't	O
fully	O
understand	O
.	O

I'm	O
sure	O
it	O
has	O
something	O
to	O
do	O
with	O
the	O
fact	O
that	O
the	O
nature	O
of	O
`	O
loc	B-API
`	O
and	O
`	O
iloc	B-API
`	O
are	O
different	O
than	O
`	O
at	B-API
`	O
,	O
`	O
iat	B-API
`	O
,	O
`	O
get_value	B-API
`	O
in	O
that	O
`	O
iloc	B-API
`	O
and	O
`	O
loc	B-API
`	O
allow	O
you	O
to	O
access	O
the	O
dataframe	B-API
with	O
index	O
arrays	O
and	O
boolean	O
arrays	O
.	O

While	O
`	O
at	B-API
`	O
,	O
`	O
iat	B-API
`	O
,	O
and	O
`	O
get_value	B-API
`	O
only	O
access	O
a	O
single	O
cell	O
at	O
a	O
time	O
.	O

Despite	O
that	O

When	O
we	O
assign	O
to	O
that	O
location	O
via	O
`	O
loc	B-API
`	O
,	O
`	O
pandas	O
`	O
ensures	O
the	O
`	O
dtype	B-API
`	O
stays	O
consistent	O
.	O

Thank	O
you	O
for	O
a	O
very	O
detailed	O
explanation	O
!	O

