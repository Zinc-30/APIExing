Slice	O
2d	O
array	O
into	O
smaller	O
2d	O
arrays	O

Is	O
there	O
a	O
way	O
to	O
slice	O
a	O
2d	O
array	O
in	O
numpy	O
into	O
smaller	O
2d	O
arrays	O
?	O

Example	O

So	O
I	O
basically	O
want	O
to	O
cut	B-API
down	O
a	O
2x4	O
array	O
into	O
2	O
2x2	O
arrays	O
.	O

Looking	O
for	O
a	O
generic	O
solution	O
to	O
be	O
used	O
on	O
images	O
.	O

You	O
should	O
be	O
able	O
to	O
break	O
your	O
array	O
into	O
"	O
blocks	O
"	O
using	O
some	O
combination	O
of	O
`	O
reshape	B-API
`	O
and	O
`	O
swapaxes	B-API
`	O
:	O

turns	O
`	O
c	O
`	O

into	O

I've	O
posted	O
an	O
inverse	O
function	O
,	O
`	O
unblockshaped	O
`	O
,	O
here	O
,	O
and	O
an	O
N-dimensional	O
generalization	O
here	O
.	O

The	O
generalization	O
gives	O
a	O
little	O
more	O
insight	O
into	O
the	O
reasoning	O
behind	O
this	O
algorithm	O
.	O

Note	O
that	O
there	O
is	O
also	O
superbatfish's	O

`	O
blockwise_view	O
`	O
.	O

It	O
arranges	O
the	O

blocks	O
in	O
a	O
different	O
format	O
(	O
using	O
more	O
axes	O
)	O
but	O
it	O
has	O
the	O
advantage	O
of	O
(	O
1	O
)	O

always	O
returning	O
a	O
view	O
and	O
(	O
2	O
)	O
being	O
capable	O
of	O
handing	O
arrays	O
of	O
any	O

dimension	O
.	O

Could	O
you	O
make	O
it	O
more	O
generic	O
,	O
so	O
that	O
block	O
sizes	O
are	O
variables	O
?	O

(	O
with	O
the	O
condition	O
that	O
blocks	O
perfectly	O
fit	O
in	O
the	O
original	O
array	O
)	O

Thanks	O
for	O
the	O
edit	O
.	O

Could	O
your	O
please	O
explain	O
the	O
reasoning	O
behind	O
the	O
algorithm	O
?	O

There	O
was	O
another	O
question	O
a	O
couple	O
of	O
months	O
ago	O
which	O
clued	O
me	O
in	O
to	O
the	O
idea	O
of	O
using	O
`	O
reshape	B-API
`	O
and	O
`	O
swapaxes	B-API
`	O
.	O

The	O
`	O
h	O
//	O
nrows	O
`	O
makes	O
sense	O
since	O
this	O
keeps	O
the	O
first	O
block's	O
rows	O
together	O
.	O

It	O
also	O
makes	O
sense	O
that	O
you'll	O
need	O
`	O
nrows	O
`	O
and	O
`	O
ncols	O
`	O
to	O
be	O
part	O
of	O
the	O
shape	O
.	O

`	O
-1	O
`	O
tells	O
reshape	O
to	O
fill	O
in	O
whatever	O
number	O
is	O
necessary	O
to	O
make	O
the	O
reshape	O
valid	O
.	O

Armed	O
with	O
the	O
form	O
of	O
the	O
solution	O
,	O
I	O
just	O
tried	O
things	O
until	O
I	O
found	O
the	O
formula	O
that	O
works	O
.	O

I'm	O
sorry	O
I	O
don't	O
have	O
a	O
more	O
insightful	O
explanation	O
for	O
you	O
.	O

It	O
seems	O
to	O
me	O
that	O
this	O
is	O
a	O
task	O
for	O
`	O
numpy.split	O
`	O
or	O
some	O
variant	O
.	O

e.g	O
.	O

If	O
you	O
have	O
a	O
NxN	O
image	O
you	O
can	O
create	O
,	O
e.g.	O
,	O
a	O
list	O
of	O
2	O
NxN	O
/	O
2	O
subimages	O
,	O
and	O
then	O
divide	O
them	O
along	O
the	O
other	O
axis	O
.	O

`	O
numpy.hsplit	O
`	O
and	O
`	O
numpy.vsplit	O
`	O
are	O
also	O
available	O
.	O

There	O
are	O
some	O
other	O
answers	O
that	O
seem	O
well-suited	O
for	O
your	O
specific	O
case	O
already	O
,	O
but	O
your	O
question	O
piqued	O
my	O
interest	O
in	O
the	O
possibility	O
of	O
a	O
memory-efficient	O
solution	O
usable	O
up	O
to	O
the	O
maximum	O
number	O
of	O
dimensions	O
that	O
numpy	O
supports	O
,	O
and	O
I	O
ended	O
up	O
spending	O
most	O
of	O
the	O
afternoon	O
coming	O
up	O
with	O
possible	O
method	O
.	O

(	O
The	O
method	O
itself	O
is	O
relatively	O
simple	O
,	O
it's	O
just	O
that	O
I	O
still	O
haven't	O
used	O
most	O
of	O
the	O
really	O
fancy	O
features	O
that	O
numpy	O
supports	O
so	O
most	O
of	O
the	O
time	O
was	O
spent	O
researching	O
to	O
see	O
what	O
numpy	O
had	O
available	O
and	O
how	O
much	O
it	O
could	O
do	O
so	O
that	O
I	O
didn't	O
have	O
to	O
do	O
it	O
.	O
)	O

If	O
you	O
want	O
a	O
solution	O
that	O
also	O
handles	O
the	O
cases	O
when	O
the	O
matrix	O
is	O

not	O
equally	O
divided	O
,	O
you	O
can	O
use	O
this	O
:	O

For	O
now	O
it	O
just	O
works	O
when	O
the	O
big	O
2d	O
array	O
can	O
be	O
perfectly	O
sliced	O
into	O
equally	O
sized	O
subarrays	O
.	O

The	O
code	O
bellow	O
slices	O

into	O
this	O

`	O
p	O
`	O
ang	O
`	O
q	O
`	O
determine	O
the	O
block	O
size	O

Code	O

You	O
question	O
practically	O
the	O
same	O
as	O
this	O
one	O
.	O

You	O
can	O
use	O
the	O
one-liner	O
with	O
`	O
np.ndindex()	O
`	O
and	O
`	O
reshape()	O
`	O
:	O

To	O
create	O
the	O
result	O
you	O
want	O
:	O

