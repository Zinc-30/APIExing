How	O
do	O
you	O
set	O
the	O
absolute	O
position	O
of	O
figure	O
windows	O
with	O
matplotlib	O
?	O

I'm	O
writing	O
a	O
simple	O
Python	O
application	O
that	O
uses	O
matplotlib	O
to	O
display	O
a	O
few	O
figures	O
on	O
screen	O
.	O

The	O
number	O
of	O
figures	O
generated	O
is	O
based	O
on	O
user	O
input	O
and	O
changes	O
throughout	O
the	O
application's	O
life	O
.	O

The	O
user	O
has	O
the	O
ability	O
to	O
issue	O
a	O
"	O
plot	O
"	O
command	O
to	O
generate	O
a	O
new	O
figure	O
window	O
with	O
the	O
selected	O
data	O
series	O
.	O

In	O
order	O
to	O
improve	O
the	O
user	O
experience	O
,	O
I	O
would	O
like	O
to	O
provide	O
another	O
command	O
that	O
would	O
programmatically	O
arrange	O
all	O
open	O
figure	O
windows	O
in	O
some	O
convenient	O
arrangement	O
(	O
e.g.	O
tile	O
them	O
across	O
the	O
available	O
screen	O
space	O
)	O
.	O

I	O
believe	O
to	O
have	O
found	O
APIs	O
that	O
allow	O
me	O
to	O
adjust	O
the	O
size	O
of	O
the	O
figure	O
window	O
(	O
in	O
pixels	O
)	O
,	O
but	O
haven't	O
had	O
any	O
success	O
in	O
finding	O
a	O
way	O
to	O
set	O
their	O
absolute	O
position	O
on	O
screen	O
.	O

Is	O
there	O
a	O
way	O
to	O
do	O
this	O
without	O
delving	O
into	O
the	O
details	O
of	O
whatever	O
backend	O
is	O
in	O
use	O
?	O

I	O
would	O
like	O
to	O
do	O
this	O
in	O
a	O
backend-agnostic	O
way	O
so	O
I	O
can	O
avoid	O
relying	O
upon	O
implementation	O
details	O
that	O
might	O
change	O
in	O
the	O
future	O
.	O

there	O
is	O
not	O
that	O
I	O
know	O
a	O
backend-agnostic	O
way	O
to	O
do	O
this	O
,	O
but	O
definitely	O
it	O
is	O
possible	O
to	O
do	O
it	O
for	O
some	O
common	O
backends	O
,	O
e.g.	O
,	O
WX	O
,	O
tkagg	O
etc	O
.	O

per	O
@USER	O
at	O
the	O
comment	O
section	O
below	O
,	O
you	O
might	O
wanna	O
switch	O
to	O

instead	O
.	O

For	O
`	O
TkAgg	O
`	O
,	O
just	O
change	O
it	O
to	O

So	O
I	O
think	O
you	O
can	O
exhaust	O
through	O
all	O
the	O
backends	O
that	O
are	O
capable	O
of	O
doing	O
this	O
,	O
if	O
imposing	O
a	O
certain	O
one	O
is	O
not	O
an	O
option	O
.	O

Thanks	O
.	O

I'm	O
using	O
TKAgg	O
on	O
my	O
system	O
,	O
but	O
I	O
don't	O
think	O
I	O
can	O
assume	O
that	O
the	O
end	O
user	O
will	O
.	O

I	O
might	O
be	O
able	O
to	O
enforce	O
that	O
the	O
user	O
must	O
use	O
some	O
subset	O
of	O
them	O
,	O
though	O
.	O

@USER	O
R	O
it	O
really	O
depends	O
on	O
how	O
important	O
this	O
specified	O
positioning	O
is	O
in	O
your	O
application	O
.	O

If	O
it	O
were	O
merely	O
for	O
improving	O
user	O
experience	O
,	O
you	O
can	O
simply	O
go	O
for	O
whichever	O
subset	O
you	O
can	O
take	O
care	O
of	O
,	O
otherwise	O
,	O
can	O
you	O
generate	O
only	O
one	O
window	O
,	O
and	O
dynamically	O
place	O
each	O
plot	O
as	O
sub_plots	O
while	O
erasing	O
old	O
sub_plots	O
?	O

Dunno	O
why	O
,	O
but	O
for	O
me	O
(	O
Windows	O
,	O
Python	O
Idle	O
,	O
Python	O
2.7	O
,	O
started	O
from	O
Notepad++	O
)	O
the	O
`	O
thismanager.window.wm_geometry	O
(	O
"	O
+500+0	O
")`	O
worked	O
,	O
the	O
`	O
thismanager.window.SetPosition	O
((	O
500	O
,	O
0	O
))`	O
didnt	O
;-)	O

Me	O
too	O
@USER	O
,	O
thanks	O
for	O
tip	O
!	O

FINALLY	O
found	O
the	O
solution	O
for	O
QT	O
backend	O
:	O

If	O
one	O
doesn't	O
know	O
the	O
x-	O
and	O
y-width	O
one	O
can	O
read	O
them	O
out	O
first	O
,	O
like	O
so	O
:	O

and	O
then	O
set	O
the	O
new	O
position	O
with	O
the	O
same	O
size	O
:	O

I	O
was	O
searching	O
quite	O
often	O
for	O
this	O
and	O
finally	O
invested	O
the	O
30	O
minutes	O
to	O
find	O
this	O
out	O
.	O

Hope	O
that	O
helps	O
someone	O
.	O

Great	O
solution	O
,	O
thanks	O
for	O
sharing	O
!	O

Much	O
better	O
answer	O
than	O
the	O
accepted	O
one	O
.	O

note	O
that	O
instead	O
of	O
mngr	O
=	O
get_current_fig_manager()	O
,	O
we	O
can	O
also	O
use	O
fig.canvas.manager	O

Inspired	O
by	O
@USER	O
answer	O
,	O
I	O
wrote	O
a	O
script	O
to	O
move	O
and	O
resize	O
a	O
window	O
to	O
a	O
specific	O
standard	O
position	O
on	O
the	O
screen	O
.	O

This	O
was	O
tested	O
with	O
the	O
Qt4Agg	O
backend	O
:	O

How	O
would	O
I	O
go	O
about	O
adding	O
a	O
middle	O
option	O
?	O

For	O
Qt4Agg	O
,	O
this	O
worked	O
for	O
me	O
.	O

Tested	O
on	O
Win7	O
,	O
mpl	O
version	O
1.4.2	O
,	O
python	O
2.7.5	O

With	O
help	O
from	O
the	O
answers	O
thus	O
far	O
and	O
some	O
tinkering	O
on	O
my	O
own	O
,	O
here's	O
a	O
solution	O
that	O
checks	O
for	O
the	O
current	O
backend	O
and	O
uses	O
the	O
correct	O
syntax	O
.	O

Hey	O
,	O
I	O
just	O
tried	O
this	O
and	O
got	O
an	O
error	O
:	O
`	O
AttributeError	O
:	O
'	O
AxesSubplot	O
'	O
object	O
has	O
no	O
attribute	O
'	O
canvas	O
'`	O

This	O
also	O
works	O
:	O

If	O
you	O
want	O
to	O
send	O
a	O
plot	O
to	O
an	O
image	O
and	O
have	O
it	O
open	O
with	O
the	O
default	O
image	O
manager	O
(	O
which	O
likely	O
remembers	O
position	O
)	O
use	O
this	O
from	O
here	O
:	O

with	O
small	O
`	O
m	O
`	O
in	O
`	O
move	O
`	O

does	O
not	O
work	O
with	O
QT	O
.	O

To	O
combine	O
the	O
two	O
previous	O
comments	O
:	O
At	O
least	O
when	O
using	O
the	O
Qt	O
backend	O
(	O
Qt4Agg	O
,	O
and	O
probably	O
also	O
Qt5Agg	O
)	O
,	O
the	O
correct	O
command	O
to	O
resize	O
is	O
`	O
fig.canvas.manager.window.move	O
(	O
100,400	O
)`	O
.	O

Seems	O
to	O
also	O
be	O
true	O
for	O
GTK3Agg	O
,	O
so	O
I'll	O
edit	O
this	O
answer	O
.	O

For	O
the	O
windows	O
platform	O
you	O
could	O
install	O
and	O
use	O
pyfig	O
module	O
from	O
Pyfig	O
.	O

Example	O
on	O
how	O
to	O
manipulate	O
the	O
figure	O
windows	O
is	O
given	O
below	O
:	O

How	O
about	O
defining	O
a	O
function	O
to	O
raise	O
the	O
window	O
to	O
the	O
top	O
level	O
and	O
move	O
it	O
toward	O
the	O
top-left	O
corner	O
(	O
for	O
example	O
)	O
like	O
this	O
:	O

Then	O
whenever	O
you	O
open	O
a	O
new	O
figure	O
you	O
just	O
type	O
"	O
topfig()	O
"	O
.	O

Is	O
there	O
a	O
way	O
to	O
pre-define	O
topfig	O
so	O
it	O
will	O
always	O
be	O
available	O
?	O

