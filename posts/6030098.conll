How	O
to	O
display	O
a	O
3D	O
plot	O
of	O
a	O
3D	O
array	O
isosurface	O
in	O
matplotlib	O
mplot3D	O
or	O
similar	O
?	O

I	O
have	O
a	O
3-dimensional	O
numpy	O
array	O
.	O

I'd	O
like	O
to	O
display	O
(	O
in	O
matplotlib	O
)	O
a	O
nice	O
3D	O
plot	O
of	O
an	O
isosurface	O
of	O
this	O
array	O
(	O
or	O
more	O
strictly	O
,	O
display	O
an	O
isosurface	O
of	O
the	O
3D	O
scalar	O
field	O
defined	O
by	O
interpolating	O
between	O
the	O
sample	O
points	O
)	O
.	O

matplotlib's	O
mplot3D	O
part	O
provides	O
nice	O
3D	O
plot	O
support	O
,	O
but	O
(	O
so	O
far	O
as	O
I	O
can	O
see	O
)	O
its	O
API	O
doesn't	O
have	O
anything	O
which	O
will	O
simply	O
take	O
a	O
3D	O
array	O
of	O
scalar	O
values	O
and	O
display	O
an	O
isosurface	O
.	O

However	O
,	O
it	O
does	O
support	O
displaying	O
a	O
collection	O
of	O
polygons	O
,	O
so	O
presumably	O
I	O
could	O
implement	O
the	O
marching	O
cubes	O
algorithm	O
to	O
generate	O
such	O
polygons	O
.	O

It	O
does	O
seem	O
quite	O
likely	O
that	O
a	O
scipy-friendly	O
marching	O
cubes	O
has	O
already	O
been	O
implemented	O
somewhere	O
and	O
that	O
I	O
haven't	O
found	O
it	O
,	O
or	O
that	O
I'm	O
missing	O
some	O
easy	O
way	O
of	O
doing	O
this	O
.	O

Alternatively	O
I'd	O
welcome	O
any	O
pointers	O
to	O
other	O
tools	O
for	O
visualising	O
3D	O
array	O
data	O
easily	O
usable	O
from	O
the	O
Python	O
/	O
numpy	O
/	O
scipy	O
world	O
.	O

Matplotlib's	O
3D	O
plotting	O
really	O
isn't	O
intended	O
for	O
things	O
like	O
this	O
.	O

(	O
It's	O
meant	O
to	O
produce	O
vector	O
output	O
for	O
simple	O
3D	O
plots	O
,	O
not	O
be	O
a	O
full	O
3D	O
plotting	O
engine	O
.	O
)	O
Use	O
mayavi	O
/	O
mlab	O
if	O
you	O
want	O
isosurfaces	O
.	O

Just	O
to	O
elaborate	O
on	O
my	O
comment	O
above	O
,	O
matplotlib's	O
3D	O
plotting	O
really	O
isn't	O
intended	O
for	O
something	O
as	O
complex	O
as	O
isosurfaces	O
.	O

It's	O
meant	O
to	O
produce	O
nice	O
,	O
publication-quality	O
vector	O
output	O
for	O
really	O
simple	O
3D	O
plots	O
.	O

It	O
can't	O
handle	O
complex	O
3D	O
polygons	O
,	O
so	O
even	O
if	O
implemented	O
marching	O
cubes	O
yourself	O
to	O
create	O
the	O
isosurface	O
,	O
it	O
wouldn't	O
render	O
it	O
properly	O
.	O

However	O
,	O
what	O
you	O
can	O
do	O
instead	O
is	O
use	O
mayavi	O
(	O
it's	O
mlab	O
API	O
is	O
a	O
bit	O
more	O
convenient	O
than	O
directly	O
using	O
mayavi	O
)	O
,	O
which	O
uses	O
VTK	O
to	O
process	O
and	O
visualize	O
multi-dimensional	O
data	O
.	O

As	O
a	O
quick	O
example	O
(	O
modified	O
from	O
one	O
of	O
the	O
mayavi	O
gallery	O
examples	O
):	O

Perfect	O
!	O

apt-get	O
install	O
mayavi2	O
,	O
ran	O
your	O
code	O
...	O

Just	O
Works	O
.	O

Exactly	O
what	O
I'm	O
looking	O
for	O
.	O

I'd	O
been	O
wondering	O
for	O
years	O
whether	O
I	O
shouldn't	O
make	O
use	O
of	O
VTK	O
somehow	O
;	O
this	O
looks	O
like	O
a	O
nice	O
way	O
into	O
it	O
from	O
the	O
scipy	O
world	O
.	O

OMG	O
it's	O
like	O
discovering	O
a	O
whole	O
new	O
planet	O
...	O

And	O
there's	O
an	O
mlab	O
contour3d	O
function	O
to	O
make	O
stuff	O
like	O
the	O
above	O
even	O
simpler	O
:	O
github.enthought.com/mayavi/mayavi/auto	O

Just	O
to	O
warn	O
you	O
,	O
the	O
"	O
list	O
of	O
specific	O
values	O
to	O
contour	O
"	O
functionality	O
in	O
`	O
contour3d	O
`	O
has	O
been	O
broken	O
for	O
quite	O
awhile	O
.	O

(	O
It	O
may	O
have	O
been	O
fixed	O
recently	O
,	O
but	O
don't	O
be	O
surprised	O
if	O
it	O
doesn't	O
work	O
.	O
)	O
It	O
sill	O
works	O
perfectly	O
if	O
you	O
just	O
want	O
,	O
say	O
,	O
5	O
contours	O
between	O
the	O
min	O
and	O
max	O
,	O
but	O
passing	O
in	O
a	O
list	O
of	O
specific	O
values	O
(	O
e.g.	O
`	O
[	O
0.1	O
,	O
0.5	O
,	O
0.9	O
,	O
1.5	O
,	O
2.5	O
]`)	O
will	O
silently	O
fail	O
.	O

By	O
and	O
large	O
,	O
though	O
,	O
it's	O
quite	O
slick	O
and	O
that's	O
the	O
only	O
annoying	O
bug	O
I've	O
run	O
into	O
!	O

It	O
handles	O
very	O
large	O
datasets	O
very	O
well	O
,	O
too	O
!	O

Cancel	O
that	O
,	O
passing	O
in	O
a	O
list	O
of	O
specific	O
values	O
seems	O
to	O
work	O
perfectly	O
in	O
the	O
latest	O
version	O
,	O
for	O
whatever	O
it's	O
worth	O
.	O

I've	O
just	O
been	O
looking	O
at	O
it	O
working	O
well	O
with	O
some	O
512^3	O
arrays	O
.	O

Interestingly	O
,	O
contour3d's	O
peak	O
memory	O
consumption	O
seems	O
considerably	O
lower	O
than	O
the	O
"	O
pipeline	O
"	O
version	O
above	O
(	O
about	O
2.5GB	O
vs	O
8GB	O
;	O
fortunately	O
I'm	O
on	O
a	O
big	O
64	O
bit	O
system	O
)	O
.	O

Haven't	O
tried	O
doing	O
anything	O
with	O
things	O
like	O
np.array	O
(	O
...,	O
dtype=	O
np.int16	O
)	O
yet	O
though	O
(	O
I	O
think	O
np	O
arrays	O
default	O
to	O
double	O
)	O
.	O

Complementing	O
the	O
answer	O
of	O
@USER	O
,	O
you	O
can	O
also	O
use	O
`	O
trisurf	O
`	O
to	O
visualize	O
the	O
polygons	O
obtained	O
in	O
the	O
marching	O
cubes	O
phase	O
.	O

If	O
you	O
want	O
to	O
keep	O
your	O
plots	O
in	O
matplotlib	O
(	O
much	O
easier	O
to	O
produce	O
publication-quality	O
images	O
than	O
mayavi	O
in	O
my	O
opinion	O
)	O
,	O
then	O
you	O
can	O
use	O
the	O
marching_cubes	O
function	O
implemented	O
in	O
skimage	O
and	O
then	O
plot	O
the	O
results	O
in	O
matplotlib	O
using	O

as	O
shown	O
in	O
the	O
link	O
above	O
.	O

Matplotlib	O
does	O
a	O
pretty	O
good	O
job	O
of	O
rendering	O
the	O
isosurface	O
.	O

Here	O
is	O
an	O
example	O
that	O
I	O
made	O
of	O
some	O
real	O
tomography	O
data	O
:	O

