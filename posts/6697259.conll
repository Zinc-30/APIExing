Interactive	O
matplotlib	O
plot	O
with	O
two	O
sliders	O

I	O
used	O
matplotlib	O
to	O
create	O
some	O
plot	O
,	O
which	O
depends	O
on	O
8	O
variables	O
.	O

I	O
would	O
like	O
to	O
study	O
how	O
the	O
plot	O
changes	O
when	O
I	O
change	O
some	O
of	O
them	O
.	O

I	O
created	O
some	O
script	O
that	O
calls	O
the	O
matplotlib	O
one	O
and	O
generates	O
different	O
snapshots	O
that	O
later	O
I	O
convert	O
into	O
a	O
movie	O
,	O
it	O
is	O
not	O
bad	O
,	O
but	O
a	O
bit	O
clumsy	O
.	O

I	O
wonder	O
if	O
somehow	O
I	O
could	O
interact	O
with	O
the	O
plot	O
regeneration	O
using	O
keyboard	O
keys	O
to	O
increase	O
/	O
decrease	O
values	O
of	O
some	O
of	O
the	O
variables	O
and	O
see	O
instantly	O
how	O
the	O
plot	O
changes	O
.	O

What	O
is	O
the	O
best	O
approach	O
for	O
this	O
?	O

Also	O
if	O
you	O
can	O
point	O
me	O
to	O
interesting	O
links	O
or	O
a	O
link	O
with	O
a	O
plot	O
example	O
with	O
just	O
two	O
sliders	O
?	O

In	O
addition	O
to	O
what	O
@USER	O
mentioned	O
,	O
have	O
a	O
look	O
at	O
the	O
slider	O
widget	O
.	O

There's	O
an	O
example	O
on	O
the	O
matplotlib	O
examples	O
page	O
.	O

It's	O
a	O
graphical	O
slider	O
bar	O
rather	O
than	O
keyboard	O
bindings	O
,	O
but	O
it	O
works	O
quite	O
well	O
for	O
what	O
you	O
want	O
to	O
do	O
.	O

(	O
I'm	O
making	O
this	O
community	O
wiki	O
,	O
as	O
I'm	O
just	O
copy-pasting	O
from	O
the	O
example	O
.	O
This	O
particular	O
example	O
teaches	O
bad	O
habits	O
(	O
e.g.	O
`	O
from	O
pylab	O
import	O
*	O
`)	O
,	O
but	O
it	O
gets	O
the	O
point	O
across	O
.	O
The	O
example	O
has	O
been	O
fixed	O
to	O
avoid	O
the	O
use	O
of	O
`	O
pylab	O
`	O
.	O
)	O

wow	O
,	O
this	O
is	O
awesome	O
,	O
exactly	O
what	O
I	O
need	O
!	O

thanks	O
!	O

Is	O
it	O
possible	O
to	O
actually	O
interact	O
with	O
this	O
tool	O
or	O
does	O
it	O
just	O
generate	O
an	O
image	O
?	O

If	O
so	O
,	O
what	O
do	O
I	O
need	O
to	O
run	O
it	O
?	O

I'm	O
currently	O
using	O
IPython	O

@USER	O
-	O
By	O
"	O
ipython	O
"	O
do	O
you	O
man	O
an	O
ipython	O
notebook	O
?	O

(	O
Instead	O
of	O
the	O
normal	O
ipython	O
shell	O
.	O
)	O
If	O
so	O
,	O
ipython	O
notebooks	O
can't	O
use	O
an	O
interactive	O
backend	O
.	O

You'll	O
need	O
to	O
run	O
things	O
either	O
in	O
a	O
regular	O
ipython	O
shell	O
,	O
or	O
directly	O
(	O
e.g.	O
"	O
python	O
name_of_your_file.py	O
")	O
.	O

@USER	O
-	O
Yes	O
,	O
by	O
default	O
matplotlib	O
will	O
be	O
built	O
with	O
an	O
interactive	O
backend	O
of	O
some	O
sort	O
.	O

If	O
you're	O
using	O
pre-built	O
binaries	O
(	O
as	O
you	O
would	O
be	O
on	O
windows	O
)	O
,	O
presumably	O
the	O
person	O
who	O
built	O
them	O
did	O
it	O
correctly	O
.	O

If	O
you're	O
using	O
winpython	O
,	O
matplotlib	O
definitely	O
has	O
an	O
interactive	O
backend	O
(	O
probably	O
TkAgg	O
)	O
.	O

Try	O
running	O
the	O
script	O
directly	O
and	O
see	O
what	O
happens	O
.	O

(	O
i.e.	O
type	O
"	O
python	O
name_of_the_file.py	O
"	O
in	O
a	O
terminal	O
/	O
cmd	O
window	O
.	O
)	O

To	O
explain	O
more	O
about	O
what's	O
going	O
on	O
,	O
an	O
ipython	O
notebook	O
is	O
not	O
the	O
same	O
as	O
ipython	O
.	O

`	O
ipython	O
`	O
is	O
an	O
interactive	O
python	O
shell	O
.	O

An	O
ipython	O
notebook	O
is	O
a	O
web-based	O
interface	O
that	O
basically	O
sends	O
snippets	O
of	O
code	O
back	O
to	O
`	O
ipython	O
`	O
to	O
evaluate	O
and	O
return	O
the	O
results	O
of	O
.	O

For	O
that	O
reason	O
,	O
ipython	O
notebooks	O
just	O
render	O
matplotlib	O
figures	O
as	O
static	O
.png	O
'	O
s	O
,	O
instead	O
of	O
popping	O
up	O
an	O
interactive	O
window	O
.	O

`	O
ipython	O
`	O
itself	O
(	O
or	O
just	O
running	O
the	O
script	O
directly	O
with	O
`	O
python	O
`)	O
will	O
show	O
an	O
interactive	O
gui	O
window	O
for	O
each	O
matplotlib	O
figure	O
.	O

Matplotlib	O
has	O
some	O
fairly	O
nice	O
gui	O
functionality	O
.	O

There	O
are	O
some	O
documentation	O
examples	O
in	O
the	O
source	O
tarball	O
of	O
matplotlib	O
,	O
in	O
/	O
examples	O
/	O
user_interfaces	O
and	O
matplotlib	O
/	O
examples	O
/	O
event_handling	O
.	O

Specifically	O
on	O
keyhandling	O
is	O
:	O
http://matplotlib.sourceforge.net/examples/event_handling/keypress_demo.html	O

I	O
have	O
done	O
something	O
kind	O
of	O
similar	O
to	O
what	O
you	O
are	O
aiming	O
for	O
:	O

I	O
was	O
using	O
this	O
to	O
shift	B-API
through	O
displaying	O
different	O
images	O
in	O
a	O
stack	B-API
on	O
keypresses	O
,	O
but	O
you	O
should	O
be	O
able	O
to	O
put	O
logic	O
in	O
to	O
modify	O
your	O
values	O
given	O
keyboard	O
input	O
.	O

If	O
you	O
want	O
to	O
do	O
things	O
like	O
have	O
the	O
user	O
input	O
values	O
,	O
I	O
think	O
the	O
examples	O
have	O
options	O
for	O
dialog	O
boxes	O
,	O
but	O
if	O
you	O
just	O
want	O
to	O
increment	O
/	O
decrement	O
a	O
number	O
of	O
variables	O
,	O
just	O
defining	O
keyboard	O
pairs	O
for	O
them	O
in	O
this	O
manner	O
might	O
work	O
well	O

I	O
don't	O
think	O
that	O
simply	O
plotting	O
graphs	O
using	O
`	O
plt.plot	O
`	O
will	O
allow	O
you	O
to	O
do	O
this	O
.	O

You	O
will	O
need	O
to	O
yourself	O
make	O
a	O
custom	O
GUI	O
script	O
/	O
app	O
by	O
embedding	O
Matplotlib	O
into	O
it	O
.	O

Currently	O
,	O
Matplotlib	O
supports	O
all	O
the	O
major	O
GUI	O
toolkits	O
-	O
PyGTK+	O
,	O
PyQt4	O
and	O
wxPython	O
.	O

I	O
use	O
wxPython	O
and	O
embedding	O
matplotlib	O
in	O
it	O
is	O
fairly	O
easy	O
.	O

Similar	O
should	O
be	O
case	O
with	O
the	O
other	O
GUI	O
toolkits	O
.	O

You	O
can	O
get	O
all	O
the	O
information	O
you	O
need	O
for	O
this	O
in	O
the	O
book	O
-	O

It	O
is	O
available	O
on	O
amazon	O
here	O
.	O

If	O
you	O
want	O
to	O
do	O
it	O
fast	O
and	O
simple	O
,	O
then	O
the	O
method	O
of	O
the	O
slider	O
inside	O
matplotlib	O
is	O
much	O
better	O
and	O
easier	O
.	O

Just	O
copy	O
the	O
snippet	O
and	O
change	O
a	O
few	O
things	O
.	O

This	O
book	O
is	O
also	O
good	O
,	O
but	O
more	O
for	O
advance	O
and	O
if	O
you	O
want	O
to	O
make	O
it	O
correct	O
!	O

Looks	O
a	O
bit	O
like	O
an	O
advertisment	O
and	O
its	O
contribution	O
is	O
questionable	O
.	O

It	O
is	O
true	O
that	O
a	O
solution	O
via	O
a	O
GUI	O
toolkit	O
is	O
possible	O
but	O
it	O
was	O
not	O
asked	O
for	O
such	O
.	O

Use	O
`	O
waitforbuttonpress	O
(	O
timeout=	O
0.001	O
)`	O
then	O
plot	O
will	O
see	O
your	O
mouse	O
ticks	O
.	O

