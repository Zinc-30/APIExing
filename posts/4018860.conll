Text	O
box	O
with	O
line	O
wrapping	O
in	O
matplotlib	O
?	O

Is	O
it	O
possible	O
to	O
display	O
text	O
in	O
a	O
box	O
through	O
Matplotlib	O
,	O
with	O
automatic	O
line	O
breaks	O
?	O

By	O
using	O
`	O
pyplot.text()	O
`	O
,	O
I	O
was	O
only	O
able	O
to	O
print	O
multi-line	O
text	O
that	O
flows	O
beyond	O
the	O
boundaries	O
of	O
the	O
window	O
,	O
which	O
is	O
annoying	O
.	O

The	O
size	O
of	O
the	O
lines	O
is	O
not	O
known	O
in	O
advance	O
Any	O
idea	O
would	O
be	O
much	O
appreciated	O
!	O

The	O
contents	O
of	O
this	O
answer	O
were	O
merged	O
into	O
mpl	O
master	O
in	O
https://github.com/matplotlib/matplotlib/pull/4342	O
and	O
will	O
be	O
in	O
the	O
next	O
feature	O
release	O
.	O

Wow	O
...	O

This	O
is	O
a	O
thorny	O
problem	O
...	O

(	O
And	O
it	O
exposes	O
a	O
lot	O
of	O
limitations	O
in	O
matplotlib's	O
text	O
rendering	O
...	O
)	O

This	O
should	O
(	O
i.m.o	O
.	O
)	O
be	O
something	O
that	O
matplotlib	O
has	O
built-in	O
,	O
but	O
it	O
doesn't	O
.	O

There	O
have	O
been	O
a	O
few	O
threads	O
about	O
it	O
on	O
the	O
mailing	O
list	O
,	O
but	O
no	O
solution	O
that	O
I	O
could	O
find	O
to	O
automatic	O
text	O
wrapping	O
.	O

So	O
,	O
first	O
off	O
,	O
there's	O
no	O
way	O
to	O
determine	O
the	O
size	O
(	O
in	O
pixels	O
)	O
of	O
the	O
rendered	O
text	O
string	O
before	O
it's	O
drawn	O
in	O
matplotlib	O
.	O

This	O
isn't	O
too	O
large	O
of	O
a	O
problem	O
,	O
as	O
we	O
can	O
just	O
draw	O
it	O
,	O
get	O
the	O
size	O
,	O
and	O
then	O
redraw	O
the	O
wrapped	O
text	O
.	O

(	O
It's	O
expensive	O
,	O
but	O
not	O
too	O
excessively	O
bad	O
)	O

The	O
next	O
problem	O
is	O
that	O
characters	O
don't	O
have	O
a	O
fixed	O
width	O
in	O
pixels	O
,	O
so	O
wrapping	O
a	O
text	O
string	O
to	O
a	O
given	O
number	O
of	O
characters	O
won't	O
necessarily	O
reflect	O
a	O
given	O
width	O
when	O
rendered	O
.	O

This	O
isn't	O
a	O
huge	O
problem	O
,	O
though	O
.	O

Beyond	O
that	O
,	O
we	O
can't	O
just	O
do	O
this	O
once	O
...	O

Otherwise	O
,	O
it	O
will	O
be	O
wrapped	O
correctly	O
when	O
drawn	O
the	O
first	O
time	O
(	O
on	O
the	O
screen	O
,	O
for	O
example	O
)	O
,	O
but	O
not	O
if	O
drawn	O
again	O
(	O
when	O
the	O
figure	O
is	O
resized	O
or	O
saved	O
as	O
an	O
image	O
with	O
a	O
different	O
DPI	O
than	O
the	O
screen	O
)	O
.	O

This	O
isn't	O
a	O
huge	O
problem	O
,	O
as	O
we	O
can	O
just	O
connect	O
a	O
callback	O
function	O
to	O
the	O
matplotlib	O
draw	O
event	O
.	O

At	O
any	O
rate	O
this	O
solution	O
is	O
imperfect	O
,	O
but	O
it	O
should	O
work	O
in	O
most	O
situations	O
.	O

I	O
don't	O
try	O
to	O
account	O
for	O
tex-rendered	O
strings	O
,	O
any	O
stretched	O
fonts	O
,	O
or	O
fonts	O
with	O
an	O
unusual	O
aspect	O
ratio	O
.	O

However	O
,	O
it	O
should	O
now	O
properly	O
handle	O
rotated	O
text	O
.	O

However	O
,	O
It	O
should	O
attempt	O
automatically	O
wrap	O
any	O
text	O
objects	O
in	O
multiple	O
subplots	O
in	O
whichever	O
figures	O
you	O
connect	O
the	O
`	O
on_draw	O
`	O
callback	O
to	O
...	O

It	O
will	O
be	O
imperfect	O
in	O
many	O
cases	O
,	O
but	O
it	O
does	O
a	O
decent	O
job	O
.	O

+1	O
.	O

Wow	O
!	O

Impressing	O
mastering	O
of	O
Matplotlib	O
.	O

:)	O
With	O
the	O
code	O
you	O
provide	O
,	O
when	O
I	O
change	O
the	O
window	O
size	O
,	O
widths	O
get	O
smaller	O
and	O
smaller	O
,	O
but	O
seem	O
to	O
never	O
get	O
bigger	O
again	O
(	O
including	O
reaching	O
their	O
original	O
size	O
when	O
the	O
window	O
is	O
put	O
back	O
to	O
its	O
original	O
size	O
)	O

@USER	O
:	O
The	O
thread	O
you	O
point	O
to	O
is	O
interesting	O
too	O
:	O
LaTeX	O
wrapping	O
could	O
be	O
a	O
useful	O
option	O
.	O

@USER	O
-	O
Thanks	O
!	O

I	O
added	O
a	O
new	O
version	O
that	O
fixes	O
the	O
resizing	O
problems	O
(	O
and	O
also	O
handles	O
center-aligned	O
text	O
properly	O
)	O
.	O

The	O
text	O
should	O
now	O
reflow	O
both	O
when	O
the	O
figure	O
is	O
made	O
larger	O
and	O
smaller	O
.	O

LaTeX	O
wrapping	O
is	O
a	O
good	O
option	O
(	O
and	O
definitely	O
simpler	O
!	O
)	O
,	O
but	O
I	O
can't	O
seem	O
to	O
find	O
a	O
way	O
to	O
make	O
it	O
automatically	O
fit	O
the	O
size	O
of	O
the	O
axes	O
...	O

Maybe	O
I'm	O
missing	O
something	O
obvious	O
?	O

@USER	O
:	O
Thank	O
you	O
.	O

This	O
is	O
impressive	O
.	O

Maybe	O
this	O
is	O
a	O
bug	O
in	O
my	O
Matplotlib	O
implementation	O
,	O
but	O
when	O
I	O
zoom	O
in	O
,	O
and	O
then	O
go	O
back	O
to	O
the	O
original	O
size	O
,	O
spaces	O
disappear	O
in	O
some	O
of	O
the	O
texts	O
.	O

Strange	O

Hi	O
,	O
I	O
appreciate	O
this	O
post	O
!	O

Is	O
still	O
the	O
way	O
to	O
go	O
today	O
or	O
is	O
there	O
novel	O
built-in	O
matplotlib	O
goodness	O
?	O

Also	O
:	O
Why	O
does	O
this	O
not	O
work	O
when	O
I	O
replace	O
`	O
plt.show()	O
`	O
with	O
`	O
plt.savefig	O
(	O
'	O
test.png	O
')`	O
?	O

Its	O
been	O
roughly	O
five	O
years	O
but	O
there	O
still	O
doesn't	O
seem	O
to	O
be	O
a	O
great	O
way	O
to	O
do	O
this	O
.	O

Here	O
is	O
my	O
version	O
of	O
the	O
accepted	O
solution	O
.	O

My	O
goal	O
was	O
to	O
allow	O
pixel-perfect	O
wrapping	O
to	O
be	O
selectively	O
applied	O
to	O
individual	O
text	O
instances	O
.	O

I	O
have	O
also	O
created	O
a	O
simple	O
textBox()	O
function	O
which	O
will	O
convert	O
any	O
axes	O
into	O
a	O
text	O
box	O
with	O
custom	O
margins	O
and	O
alignment	O
.	O

Instead	O
of	O
assuming	O
a	O
particular	O
font	O
aspect	O
ratio	O
or	O
average	O
width	O
,	O
I	O
actually	O
draw	O
the	O
string	O
one	O
word	O
at	O
a	O
time	O
and	O
insert	O
newlines	O
once	O
the	O
threshold	O
is	O
hit	O
.	O

This	O
is	O
horrendously	O
slow	O
compared	O
to	O
the	O
approximations	O
,	O
but	O
still	O
feels	O
quite	O
snappy	O
for	O
strings	O
of	O
200	O
words	O
.	O

Usage	O
:	O

I	O
dropped	O
a	O
few	O
features	O
which	O
weren't	O
as	O
important	O
to	O
me	O
.	O

Resizing	O
will	O
fail	O
as	O
each	O
call	O
to	O
_wrap()	O
inserts	O
additional	O
newlines	O
into	O
the	O
string	O
but	O
has	O
no	O
way	O
of	O
removing	O
them	O
.	O

This	O
can	O
be	O
solved	O
by	O
either	O
stripping	O
out	O
all	O
\n	O
characters	O
in	O
the	O
_wrap	O
function	O
,	O
or	O
storing	O
the	O
original	O
string	O
somewhere	O
and	O
"	O
resetting	O
"	O
the	O
text	O
instance	O
between	O
wraps	O
.	O

