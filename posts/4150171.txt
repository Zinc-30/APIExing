How to create a density plot in matplotlib ?
In R I can create the desired output by doing :
In python ( with matplotlib ) the closest I got was with a simple histogram :
I also tried the normed=True parameter but couldn't get anything other than trying to fit a gaussian to the histogram .
My latest attempts were around ` scipy.stats ` and ` gaussian_kde ` , following examples on the web , but I've been unsuccessful so far .
Have a look at ` seaborn ` stackoverflow.com/a/32803224/1922302
Sven has shown how to use the class ` gaussian_kde ` from Scipy , but you will notice that it doesn't look quite like what you generated with R . This is because ` gaussian_kde ` tries to infer the bandwidth automatically . You can play with the bandwidth in a way by changing the function ` covariance_factor ` of the ` gaussian_kde ` class . First , here is what you get without changing that function :
However , if I use the following code :
I get
which is pretty close to what you are getting from R . What have I done ? ` gaussian_kde ` uses a changable function , ` covariance_factor ` to calculate it's bandwidth . Before changing the function , the value returned by covariance_factor for this data was about .5 . Lowering this lowered the bandwidth . I had to call ` _compute_covariance ` after changing that function so that all of the factors would be calculated correctly . It isn't an exact correspondence with the bw parameter from R , but hopefully it helps you get in the right direction .
@USER Nice answer ( +1 ) and not wanting to start any Python v R flame wars or anything , but I am loving the way R works with data much more succinctly that python and other languages . I'm sure python has lots of good points over R ( I'm not a Python user so I'm so totally uniformed to possibly comment ) and can be used for lots more work than analysing data , but as a long-time R user I do forget how succinct a language it is for such tasks until examples like this crop up .
( still fighting with editing comments ) Here is a subclass of gaussian_kde that allows to set the bandwidth as an argument and more examples : mail.scipy.org/pipermail/scipy-user/2010-January/023877.html and there is an enhancement ticket at projects.scipy.org/scipy/ticket/1092 . Note , gaussian_kde is designed for n-dimensional data .
@USER Simpson , yes , R is more succinct because it has a narrower scope . It is made for statistical computation and graphics . Python is a general programming language that can do pretty much whatever you want it to do . Because of that , the syntax might not be as succinct . Part of that is a different design in Numpy / Scipy , but part of it is just the modular set-up on Python . R is great if you only need to do computations and graphics , but if you need to use those computations in some brader applicatoin , then you might want something like Python . However , you can also use R from Python ...
@USER - Yes indeed ! That was partly my point - it was a pleasant surprise on the R side rather than a dig at the python side .
A ` set_bandwidth ` method and a ` bw_method ` constructor argument were added to gaussian_kde in scipy 0.11.0 per issue 1619
Five years later , when I Google " how to create a kernel density plot using python " , this thread still shows up at the top !
Today , a much easier way to do this is to use seaborn , a package that provides many convenient plotting functions and good style management .
Thank you so much .. Been searching for something like this since days .. can u pls explain why the ` bw= 0.5 ` is given ?
@USER The ` bw ` parameter stands for bandwidth . I was trying to match OP's setting ( see his original first code example ) . For a detailed explanation of what ` bw ` controls , see en.wikipedia.org/wiki . Basically it controls how smooth you want the density plot to be . The larger the bw , the more smooth it will be .
I have another query to ask my data is discrete in nature and I am trying to plot the PDF for that , after reading through scipy doc I understood that PMF = PDF any suggestions on that how to plot it ?
When I try this I get ` TypeError : slice indices must be integers or None or have an __index__ method `
Maybe try something like :
You can easily replace ` gaussian_kde() ` by a different kernel density estimate .
+1 for the working example and already getting close to the desired output
After trying most on this page - thank you .
Option 1 :
Use ` pandas ` dataframe plot ( built on top of ` matplotlib `) :
Option 2 :
Use ` distplot ` of ` seaborn ` :
To add the bandwidth parameter : df.plot.density ( bw_method= 0.5 )