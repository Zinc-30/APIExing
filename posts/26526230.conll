Plotting	O
datetimeindex	B-API
on	O
x-axis	O
with	O
matplotlib	O
creates	O
wrong	O
ticks	O
in	O
pandas	O
0.15	O
in	O
contrast	O
to	O
0.14	O

I	O
create	O
a	O
simple	O
pandas	O
dataframe	B-API
with	O
some	O
random	O
values	O
and	O
a	O
DatetimeIndex	B-API
like	O
so	O
:	O

Then	O
I	O
plot	O
it	O
in	O
two	O
different	O
ways	O
:	O

(	O
Do	O
not	O
use	O
both	O
statements	O
at	O
the	O
same	O
time	O
as	O
they	O
plot	O
on	O
the	O
same	O
figure	O
.	O
)	O

I	O
use	O
Python	O
3.4	O
64bit	O
and	O
matplotlib	O
1.4	O
.	O

With	O
pandas	O
0.14	O
,	O
both	O
statements	O
give	O
me	O
the	O
expected	O
plot	O
(	O
they	O
use	O
slightly	O
different	O
formatting	O
of	O
the	O
x-axis	O
which	O
is	O
okay	O
;	O
note	O
that	O
data	O
is	O
random	O
so	O
the	O
plots	O
do	O
not	O
look	O
the	O
same	O
):	O

However	O
,	O
when	O
using	O
pandas	O
0.15	O
,	O
the	O
pandas	O
plot	O
looks	O
alright	O
but	O
the	O
matplotlib	O
plot	O
has	O
some	O
strange	O
tick	O
format	O
on	O
the	O
x-axis	O
:	O

Is	O
there	O
any	O
good	O
reason	O
for	O
this	O
behaviour	O
and	O
why	O
it	O
has	O
changed	O
from	O
pandas	O
0.14	O
to	O
0.15	O
?	O

A	O
workaround	O
is	O
to	O
call	O
`	O
to_pydatetimes	O
`	O
:	O
`	O
plt.plot	O
(	O
df.index.to_pydatetimes()	O
,	O
df.RandomValues	O
)`	O
.	O

You	O
probably	O
meant	O
`	O
to_pydatetime()	B-API
`	O
(	O
without	O
'	O
s	O
'	O
,	O
same	O
typo	O
in	O
your	O
answer	O
below	O
)	O
,	O
then	O
it	O
works	O
great	O
.	O

Ah	O
yes	O
,	O
indeed	O
,	O
thanks	O
!	O

Edited	O
it	O
in	O
my	O
answer	O

Note	O
that	O
this	O
bug	O
was	O
fixed	O
in	O
pandas	O
0.15.1	O
(	O
https://github.com/pandas-dev/pandas/pull/8693	O
)	O
,	O
and	O
`	O
plt.plot	O
(	O
df.index	O
,	O
df.RandomValues	O
)`	O
now	O
just	O
works	O
again	O
.	O

The	O
reason	O
for	O
this	O
change	O
in	O
behaviour	O
is	O
that	O
starting	O
from	O
0.15	O
,	O
the	O
pandas	O
`	O
Index	B-API
`	O
object	O
is	O
no	O
longer	O
a	O
numpy	O
ndarray	O
subclass	O
.	O

But	O
the	O
real	O
reason	O
is	O
that	O
matplotlib	O
does	O
not	O
support	O
the	O
`	O
datetime64	O
`	O
dtype	B-API
.	O

As	O
a	O
workaround	O
,	O
in	O
the	O
case	O
you	O
want	O
to	O
use	O
the	O
matplotlib	O
`	O
plot	B-API
`	O
function	O
,	O
you	O
can	O
convert	O
the	O
index	O
to	O
python	O
datetime's	O
using	O
`	O
to_pydatetime	B-API
`	O
:	O

More	O
in	O
detail	O
explanation	O
:	O

Because	O
`	O
Index	B-API
`	O
is	O
no	O
longer	O
a	O
ndarray	O
subclass	O
,	O
matplotlib	O
will	O
convert	O
the	O
index	O
to	O
a	O
numpy	O
array	O
with	O
`	O
datetime64	O
`	O
dtype	B-API
(	O
while	O
before	O
,	O
it	O
retained	O
the	O
`	O
Index	B-API
`	O
object	O
,	O
of	O
which	O
scalars	O
are	O
returned	O
as	O
`	O
Timestamp	O
`	O
values	O
,	O
a	O
subclass	O
of	O
`	O
datetime.datetime	O
`	O
,	O
which	O
matplotlib	O
can	O
handle	O
)	O
.	O

In	O
the	O
`	O
plot	B-API
`	O
function	O
,	O
it	O
calls	O
`	O
np.atleast_1d()	O
`	O
on	O
the	O
input	O
which	O
now	O
returns	O
a	O
datetime64	O
array	O
,	O
which	O
matplotlib	O
handles	O
as	O
integers	O
.	O

I	O
opened	O
an	O
issue	O
about	O
this	O
(	O
as	O
this	O
gets	O
possibly	O
a	O
lot	O
of	O
use	O
):	O
https://github.com/pydata/pandas/issues/8614	O

Thanks	O
for	O
your	O
effort	O
opening	O
an	O
issue	O
for	O
this	O
!	O

The	O
workaround	O
is	O
fine	O
,	O
letting	O
me	O
use	O
pandas	O
0.15	O
without	O
having	O
to	O
change	O
too	O
much	O
:)	O

With	O
matplotlib	O
1.5.0	O
this	O
'	O
just	O
works	O
'	O
:	O

