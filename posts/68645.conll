Static	O
class	O
variables	O
in	O
Python	O

Is	O
it	O
possible	O
to	O
have	O
static	O
class	O
variables	O
or	O
methods	O
in	O
python	O
?	O

What	O
syntax	O
is	O
required	O
to	O
do	O
this	O
?	O

Variables	O
declared	O
inside	O
the	O
class	O
definition	O
,	O
but	O
not	O
inside	O
a	O
method	O
are	O
class	O
or	O
static	O
variables	O
:	O

As	O
@	O
millerdev	O
points	O
out	O
,	O
this	O
creates	O
a	O
class-level	O
`	O
i	O
`	O
variable	O
,	O
but	O
this	O
is	O
distinct	O
from	O
any	O
instance-level	O
`	O
i	O
`	O
variable	O
,	O
so	O
you	O
could	O
have	O

This	O
is	O
different	O
from	O
C++	O
and	O
Java	O
,	O
but	O
not	O
so	O
different	O
from	O
C#	O
,	O
where	O
a	O
static	O
member	O
can't	O
be	O
accessed	O
using	O
a	O
reference	O
to	O
an	O
instance	O
.	O

See	O
what	O
the	O
Python	O
tutorial	O
has	O
to	O
say	O
on	O
the	O
subject	O
of	O
classes	O
and	O
class	O
objects	O
.	O

@USER	O
Johnson	O
has	O
already	O
answered	O
regarding	O
static	O
methods	O
,	O
also	O
documented	O
under	O
"	O
Built-in	O
Functions	O
"	O
in	O
the	O
Python	O
Library	O
Reference	O
.	O

@USER	O
recommends	O
classmethod	O
s	O
over	O
staticmethod	O
,	O
as	O
the	O
method	O
then	O
receives	O
the	O
class	O
type	O
as	O
the	O
first	O
argument	O
,	O
but	O
I'm	O
still	O
a	O
little	O
fuzzy	O
on	O
the	O
advantages	O
of	O
this	O
approach	O
over	O
staticmethod	O
.	O

If	O
you	O
are	O
too	O
,	O
then	O
it	O
probably	O
doesn't	O
matter	O
.	O

Anyone	O
reading	O
this	O
should	O
also	O
read	O
Daniel's	O
answer	O
way	O
below	O
;	O
it's	O
not	O
strictly	O
true	O
that	O
`	O
this	O
is	O
distinct	O
from	O
any	O
instance-level	O
"	O
i	O
"	O
variable	O
`	O
.	O

This	O
tripped	O
me	O
up	O
until	O
I	O
read	O
his	O
clarifications	O
below	O
.	O

I'm	O
just	O
learning	O
Python	O
,	O
but	O
the	O
advantages	O
of	O
`	O
@USER	O
`	O
over	O
`	O
@USER	O
`	O
AFAIK	O
is	O
that	O
you	O
always	O
get	O
the	O
name	O
of	O
the	O
class	O
the	O
method	O
was	O
invoked	O
on	O
,	O
even	O
if	O
it's	O
a	O
subclass	O
.	O

A	O
static	O
method	O
lacks	O
this	O
information	O
,	O
so	O
it	O
cannot	O
call	O
an	O
overridden	O
method	O
,	O
for	O
example	O
.	O

@USER	O
Is	O
this	O
something	O
I	O
want	O
to	O
do	O
.	O

As	O
an	O
example	O
,	O
if	O
you	O
wanted	O
to	O
be	O
able	O
to	O
access	O
`	O
PI	O
=	O
3.14	O
`	O
lots	O
of	O
times	O
in	O
a	O
class	O
(	O
ignoring	O
math	O
libraries	O
for	O
argument	O
sake	O
)	O
,	O
would	O
your	O
really	O
do	O
`	O
MyClass.PI	O
`	O
in	O
all	O
those	O
places	O
?	O

What	O
is	O
the	O
Pythonic	O
approach	O
?	O

Doesn't	O
this	O
look	O
kind	O
of	O
cluttered	O
and	O
ugly	O
?	O

Or	O
am	O
I	O
wrong	O
?	O

@USER	O
the	O
pythonic	O
way	O
for	O
constants	O
is	O
to	O
not	O
grow	O
a	O
class	O
for	O
constants	O
.	O

Just	O
have	O
some	O
`	O
const.py	O
`	O
with	O
`	O
PI	O
=	O
3.14	O
`	O
and	O
you	O
can	O
import	O
it	O
everywhere	O
.	O

`	O
from	O
const	O
import	O
PI	O
`	O

This	O
answer	O
is	O
likely	O
to	O
confuse	O
the	O
static	O
variable	O
issue	O
.	O

To	O
begin	O
with	O
,	O
`	O
i	O
=	O
3	O
`	O
is	O
not	O
a	O
static	O
variable	O
,	O
it	O
is	O
a	O
class	O
attribute	O
,	O
and	O
since	O
it	O
is	O
distinct	O
from	O
an	O
instance-level	O
attribute	O
`	O
i	O
`	O
it	O
does	O
not	O
behave	O
like	O
a	O
static	O
variable	O
in	O
other	O
languages	O
.	O

See	O
millerdev's	O
answer	O
,	O
Yann's	O
answer	O
,	O
and	O
my	O
answer	O
below	O
.	O

@USER	O
Conrad	O
said	O
static	O
variables	O
declared	O
inside	O
the	O
class	O
definition	O
,	O
but	O
not	O
inside	O
a	O
method	O
are	O
class	O
or	O
"	O
static	O
"	O
variables	O
:	O

There	O
are	O
a	O
few	O
gotcha's	O
here	O
.	O

Carrying	O
on	O
from	O
the	O
example	O
above	O
:	O

Notice	O
how	O
the	O
instance	O
variable	O
`	O
t.i	O
`	O
got	O
out	O
of	O
sync	O
with	O
the	O
"	O
static	O
"	O
class	O
variable	O
when	O
the	O
attribute	O
`	O
i	O
`	O
was	O
set	O
directly	O
on	O
`	O
t	B-API
`	O
.	O

This	O
is	O
because	O
`	O
i	O
`	O
was	O
re-bound	O
within	O
the	O
`	O
t	B-API
`	O
namespace	O
,	O
which	O
is	O
distinct	O
from	O
the	O
`	O
Test	O
`	O
namespace	O
.	O

If	O
you	O
want	O
to	O
change	O
the	O
value	O
of	O
a	O
"	O
static	O
"	O
variable	O
,	O
you	O
must	O
change	O
it	O
within	O
the	O
scope	O
(	O
or	O
object	O
)	O
where	O
it	O
was	O
originally	O
defined	O
.	O

I	O
put	O
"	O
static	O
"	O
in	O
quotes	O
because	O
Python	O
does	O
not	O
really	O
have	O
static	O
variables	O
in	O
the	O
sense	O
that	O
C++	O
and	O
Java	O
do	O
.	O

Although	O
it	O
doesn't	O
say	O
anything	O
specific	O
about	O
static	O
variables	O
or	O
methods	O
,	O
the	O
Python	O
tutorial	O
has	O
some	O
relevant	O
information	O
on	O
classes	O
and	O
class	O
objects	O
.	O

@USER	O
Johnson	O
also	O
answered	O
regarding	O
static	O
methods	O
,	O
also	O
documented	O
under	O
"	O
Built-in	O
Functions	O
"	O
in	O
the	O
Python	O
Library	O
Reference	O
.	O

@USER	O
also	O
mentioned	O
classmethod	O
,	O
which	O
is	O
similar	O
to	O
staticmethod	O
.	O

A	O
classmethod's	O
first	O
argument	O
is	O
the	O
class	O
object	O
.	O

Example	O
:	O

I	O
suggest	O
you	O
extend	O
the	O
example	O
just	O
a	O
little	O
:	O
if	O
,	O
after	O
setting	O
Test.i	O
=6	O
,	O
you	O
then	O
instantiate	O
a	O
new	O
object	O
(	O
e.g.	O
,	O
u=	O
Test()	O
)	O
,	O
the	O
new	O
object	O
will	O
"	O
inherit	O
"	O
the	O
new	O
class	O
value	O
(	O
e.g.	O
,	O
u.i	O
==	O
6	O
)	O

A	O
way	O
to	O
keep	O
the	O
static	O
variables	O
in	O
sync	O
is	O
to	O
make	O
them	O
properties	O
:	O
`	O
class	O
Test	O
(	O
object	O
):	O
`	O
,	O
`	O
_i	O
=	O
3	O
`	O
,	O
`	O
@USER	O
`	O
,	O
`	O
def	O
i	O
(	O
self	O
)`	O
,	O
`	O
return	O
type	O
(	O
self	O
)	O
._i	O
`	O
,	O
`	O
@USER	O
.setter	O
`	O
,	O
`	O
def	O
i	O
(	O
self	O
,	O
val	O
):	O
`	O
,	O
`	O
type	O
(	O
self	O
)	O
._i	O
=	O
val	O
`	O
.	O

Now	O
you	O
can	O
do	O
`	O
x	O
=	O
Test()	O
`	O
,	O
`	O
x.i	O
=	O
12	O
`	O
,	O
`	O
assert	O
x.i	O
==	O
Test.i	O
`	O
.	O

So	O
I	O
could	O
say	O
all	O
variables	O
are	O
static	O
initially	O
and	O
then	O
accessing	O
instances	O
makes	O
instance	O
variables	O
at	O
runtime	O
?	O

Static	O
and	O
Class	O
Methods	O

As	O
the	O
other	O
answers	O
have	O
noted	O
,	O
static	O
and	O
class	O
methods	O
are	O
easily	O
accomplished	O
using	O
the	O
built-in	O
decorators	O
:	O

As	O
usual	O
,	O
the	O
first	O
argument	O
to	O
`	O
MyMethod()	O
`	O
is	O
bound	O
to	O
the	O
class	O
instance	O
object	O
.	O

In	O
contrast	O
,	O
the	O
first	O
argument	O
to	O
`	O
MyClassMethod()	O
`	O
is	O
bound	O
to	O
the	O
class	O
object	O
itself	O
(	O
e.g.	O
,	O
in	O
this	O
case	O
,	O
`	O
Test	O
`)	O
.	O

For	O
`	O
MyStaticMethod()	O
`	O
,	O
none	O
of	O
the	O
arguments	O
are	O
bound	O
,	O
and	O
having	O
arguments	O
at	O
all	O
is	O
optional	O
.	O

"	O
Static	O
Variables	O
"	O

However	O
,	O
implementing	O
"	O
static	O
variables	O
"	O
(	O
well	O
,	O
mutable	O
static	O
variables	O
,	O
anyway	O
,	O
if	O
that's	O
not	O
a	O
contradiction	O
in	O
terms	O
...	O
)	O
is	O
not	O
as	O
straight	O
forward	O
.	O

As	O
millerdev	O
pointed	O
out	O
in	O
his	O
answer	O
,	O
the	O
problem	O
is	O
that	O
Python's	O
class	O
attributes	O
are	O
not	O
truly	O
"	O
static	O
variables	O
"	O
.	O

Consider	O
:	O

This	O
is	O
because	O
the	O
line	O
`	O
x.i	O
=	O
12	O
`	O
has	O
added	O
a	O
new	O
instance	O
attribute	O
`	O
i	O
`	O
to	O
`	O
x	O
`	O
instead	O
of	O
changing	O
the	O
value	O
of	O
the	O
`	O
Test	O
`	O
class	O
`	O
i	O
`	O
attribute	O
.	O

Partial	O
expected	O
static	O
variable	O
behavior	O
,	O
i.e.	O
,	O
syncing	O
of	O
the	O
attribute	O
between	O
multiple	O
instances	O
(	O
but	O
not	O
with	O
the	O
class	O
itself	O
;	O
see	O
"	O
gotcha	O
"	O
below	O
)	O
,	O
can	O
be	O
achieved	O
by	O
turning	O
the	O
class	O
attribute	O
into	O
a	O
property	O
:	O

Now	O
you	O
can	O
do	O
:	O

The	O
static	O
variable	O
will	O
now	O
remain	O
in	O
sync	O
between	O
all	O
class	O
instances	O
.	O

(	O
NOTE	O
:	O
That	O
is	O
,	O
unless	O
a	O
class	O
instance	O
decides	O
to	O
define	O
its	O
own	O
version	O
of	O
`	O
_i	O
`	O
!	O
But	O
if	O
someone	O
decides	O
to	O
do	O
THAT	O
,	O
they	O
deserve	O
what	O
they	O
get	O
,	O
don't	O
they	O
???	O
)	O

Note	O
that	O
technically	O
speaking	O
,	O
`	O
i	O
`	O
is	O
still	O
not	O
a	O
'	O
static	O
variable	O
'	O
at	O
all	O
;	O
it	O
is	O
a	O
`	O
property	O
`	O
,	O
which	O
is	O
a	O
special	O
type	O
of	O
descriptor	O
.	O

However	O
,	O
the	O
`	O
property	O
`	O
behavior	O
is	O
now	O
equivalent	O
to	O
a	O
(	O
mutable	O
)	O
static	O
variable	O
synced	O
across	O
all	O
class	O
instances	O
.	O

Immutable	O
"	O
Static	O
Variables	O
"	O

For	O
immutable	O
static	O
variable	O
behavior	O
,	O
simply	O
omit	O
the	O
`	O
property	O
`	O
setter	O
:	O

Now	O
attempting	O
to	O
set	O
the	O
instance	O
`	O
i	O
`	O
attribute	O
will	O
return	O
an	O
`	O
AttributeError	O
`	O
:	O

One	O
Gotcha	O
to	O
be	O
Aware	O
of	O

Note	O
that	O
the	O
above	O
methods	O
only	O
work	O
with	O
instances	O
of	O
your	O
class	O
-	O
they	O
will	O
not	O
work	O
when	O
using	O
the	O
class	O
itself	O
.	O

So	O
for	O
example	O
:	O

The	O
line	O
`	O
assert	O
Test.i	O
==	O
x.i	O
`	O
produces	O
an	O
error	O
,	O
because	O
the	O
`	O
i	O
`	O
attribute	O
of	O
`	O
Test	O
`	O
and	O
`	O
x	O
`	O
are	O
two	O
different	O
objects	O
.	O

Many	O
people	O
will	O
find	O
this	O
surprising	O
.	O

However	O
,	O
it	O
should	O
not	O
be	O
.	O

If	O
we	O
go	O
back	O
and	O
inspect	O
our	O
`	O
Test	O
`	O
class	O
definition	O
(	O
the	O
second	O
version	O
)	O
,	O
we	O
take	O
note	O
of	O
this	O
line	O
:	O

Clearly	O
,	O
the	O
member	O
`	O
i	O
`	O
of	O
`	O
Test	O
`	O
must	O
be	O
a	O
`	O
property	O
`	O
object	O
,	O
which	O
is	O
the	O
type	O
of	O
object	O
returned	O
from	O
the	O
`	O
property	O
`	O
function	O
.	O

If	O
you	O
find	O
the	O
above	O
confusing	O
,	O
you	O
are	O
most	O
likely	O
still	O
thinking	O
about	O
it	O
from	O
the	O
perspective	O
of	O
other	O
languages	O
(	O
e.g.	O
Java	O
or	O
c++	O
)	O
.	O

You	O
should	O
go	O
study	O
the	O
`	O
property	O
`	O
object	O
,	O
about	O
the	O
order	O
in	O
which	O
Python	O
attributes	O
are	O
returned	O
,	O
the	O
descriptor	O
protocol	O
,	O
and	O
the	O
method	O
resolution	O
order	O
(	O
MRO	O
)	O
.	O

I	O
present	O
a	O
solution	O
to	O
the	O
above	O
'	O
gotcha	O
'	O
below	O
;	O
however	O
I	O
would	O
suggest	O
-	O
strenuously	O
-	O
that	O
you	O
do	O
not	O
try	O
to	O
do	O
something	O
like	O
the	O
following	O
until	O
-	O
at	O
minimum	O
-	O
you	O
thoroughly	O
understand	O
why	O
`	O
assert	O
Test.i	O
=	O
x.i	O
`	O
causes	O
an	O
error	O
.	O

REAL	O
,	O
ACTUAL	O
Static	O
Variables	O
-	O
`	O
Test.i	O
==	O
x.i	O
`	O

I	O
present	O
the	O
(	O
Python	O
3	O
)	O
solution	O
below	O
for	O
informational	O
purposes	O
only	O
.	O

I	O
am	O
not	O
endorsing	O
it	O
as	O
a	O
"	O
good	O
solution	O
"	O
.	O

I	O
have	O
my	O
doubts	O
as	O
to	O
whether	O
emulating	O
the	O
static	O
variable	O
behavior	O
of	O
other	O
languages	O
in	O
Python	O
is	O
ever	O
actually	O
necessary	O
.	O

However	O
,	O
regardless	O
as	O
to	O
whether	O
it	O
is	O
actually	O
useful	O
,	O
the	O
below	O
should	O
help	O
further	O
understanding	O
of	O
how	O
Python	O
works	O
.	O

UPDATE	O
:	O
this	O
attempt	O
is	O
really	O
pretty	O
awful	O
;	O
if	O
you	O
insist	O
on	O
doing	O
something	O
like	O
this	O
(	O
hint	O
:	O
please	O
don't	O
;	O
Python	O
is	O
a	O
very	O
elegant	O
language	O
and	O
shoe-horning	O
it	O
into	O
behaving	O
like	O
another	O
language	O
is	O
just	O
not	O
necessary	O
)	O
,	O
use	O
the	O
code	O
in	O
Ethan	O
Furman's	O
answer	O
instead	O
.	O

Emulating	O
static	O
variable	O
behavior	O
of	O
other	O
languages	O
using	O
a	O
metaclass	O

A	O
metaclass	O
is	O
the	O
class	O
of	O
a	O
class	O
.	O

The	O
default	O
metaclass	O
for	O
all	O
classes	O
in	O
Python	O
(	O
i.e.	O
,	O
the	O
"	O
new	O
style	O
"	O
classes	O
post	O
Python	O
2.3	O
I	O
believe	O
)	O
is	O
`	O
type	O
`	O
.	O

For	O
example	O
:	O

However	O
,	O
you	O
can	O
define	O
your	O
own	O
metaclass	O
like	O
this	O
:	O

And	O
apply	B-API
it	O
to	O
your	O
own	O
class	O
like	O
this	O
(	O
Python	O
3	O
only	O
):	O

Below	O
is	O
a	O
metaclass	O
I	O
have	O
created	O
which	O
attempts	O
to	O
emulate	O
"	O
static	O
variable	O
"	O
behavior	O
of	O
other	O
languages	O
.	O

It	O
basically	O
works	O
by	O
replacing	O
the	O
default	O
getter	O
,	O
setter	O
,	O
and	O
deleter	O
with	O
versions	O
which	O
check	O
to	O
see	O
if	O
the	O
attribute	O
being	O
requested	O
is	O
a	O
"	O
static	O
variable	O
"	O
.	O

A	O
catalog	O
of	O
the	O
"	O
static	O
variables	O
"	O
is	O
stored	O
in	O
the	O
`	O
StaticVarMeta.statics	O
`	O
attribute	O
.	O

All	O
attribute	O
requests	O
are	O
initially	O
attempted	O
to	O
be	O
resolved	O
using	O
a	O
substitute	O
resolution	O
order	O
.	O

I	O
have	O
dubbed	O
this	O
the	O
"	O
static	O
resolution	O
order	O
"	O
,	O
or	O
"	O
SRO	O
"	O
.	O

This	O
is	O
done	O
by	O
looking	O
for	O
the	O
requested	O
attribute	O
in	O
the	O
set	O
of	O
"	O
static	O
variables	O
"	O
for	O
a	O
given	O
class	O
(	O
or	O
its	O
parent	O
classes	O
)	O
.	O

If	O
the	O
attribute	O
does	O
not	O
appear	O
in	O
the	O
"	O
SRO	O
"	O
,	O
the	O
class	O
will	O
fall	O
back	O
on	O
the	O
default	O
attribute	O
get	O
/	O
set	O
/	O
delete	O
behavior	O
(	O
i.e.	O
,	O
"	O
MRO	O
")	O
.	O

I	O
tried	O
to	O
use	O
your	O
way	O
but	O
I	O
faced	O
a	O
problem	O
,	O
kindly	O
have	O
a	O
look	O
at	O
my	O
question	O
here	O
stackoverflow.com/questions/29329850/get-static-variable-val	O
ue	O

@USER	O
:	O
I	O
guess	O
you	O
should	O
generally	O
view	O
anything	O
you	O
do	O
on	O
the	O
class	O
Instance	O
`	O
Test	O
`	O
(	O
before	O
using	O
it	O
for	O
instantiating	O
instances	O
)	O
as	O
being	O
in	O
the	O
domain	O
of	O
meta-programming	O
?	O

For	O
instance	O
,	O
you	O
alter	O
the	O
class-behavior	O
by	O
doing	O
`	O
Test.i	O
=	O
0	O
`	O
(	O
here	O
you	O
simply	O
destroy	O
the	O
property	O
object	O
entirely	O
)	O
.	O

I	O
guess	O
the	O
"	O
property-mechanism	O
"	O
kicks	O
in	O
only	O
on	O
property-access	O
on	O
instances	O
of	O
a	O
class	O
(	O
unless	O
you	O
change	O
underlying	O
behavior	O
using	O
a	O
meta-class	O
as	O
an	O
intermediate	O
,	O
perhaps	O
)	O
.	O

Btw	O
,	O
please	O
finish	O
this	O
answer	O
:-)	O

@USER	O
Um	O
,	O
I	O
wouldn't	O
quite	O
put	O
it	O
that	O
way	O
.	O

It	O
would	O
be	O
more	O
correct	O
to	O
call	O
it	O
"	O
class	O
object	O
programming	O
"	O
and	O
"	O
instance	O
object	O
programming	O
"	O
-	O
because	O
classes	O
ARE	O
objects	O
.	O

The	O
meta	O
programming	O
is	O
only	O
necessary	O
(	O
in	O
this	O
particular	O
case	O
)	O
if	O
you	O
wish	O
to	O
erase	O
the	O
line	O
between	O
instance	O
and	O
class	O
,	O
which	O
is	O
where	O
a	O
"	O
static	O
variable	O
"	O
lives	O
.	O

The	O
`	O
property	O
`	O
behavior	O
works	O
because	O
instance	O
objects	O
delegate	O
attribute	O
access	O
to	O
their	O
class	O
in	O
certain	O
cases	O
(	O
eg	O
when	O
the	O
attribute	O
doesn't	O
exist	O
)	O
.	O

Also	O
:	O
I	O
promise	O
I	O
will	O
get	O
around	O
to	O
finishing	O
up	O
what	O
I	O
had	O
in	O
mind	O
for	O
this	O
answer	O
.	O

Just	O
been	O
busy	O
.	O

@USER	O
Thanks	O
:-)	O
Your	O
metaclass	O
in	O
the	O
end	O
is	O
interesting	O
but	O
is	O
actually	O
a	O
bit	O
too	O
complex	O
for	O
my	O
liking	O
.	O

It	O
might	O
be	O
useful	O
in	O
a	O
large	O
framework	O
/	O
application	O
where	O
this	O
mechanism	O
is	O
absolutely	O
required	O
.	O

Anyway	O
,	O
this	O
exemplifies	O
that	O
if	O
new	O
(	O
complex	O
)	O
non-default	O
meta-behavior	O
is	O
really	O
needed	O
,	O
Python	O
makes	O
it	O
possible	O
:)	O

@USER	O
:	O
Check	O
my	O
answer	O
for	O
a	O
simpler	O
metaclass	O
that	O
does	O
the	O
job	O
.	O

You	O
can	O
also	O
add	O
class	O
variables	O
to	O
classes	O
on	O
the	O
fly	O

And	O
class	O
instances	O
can	O
change	O
class	O
variables	O

Will	O
the	O
new	O
class	O
variables	O
stick	O
even	O
if	O
the	O
class	O
is	O
imported	O
into	O
another	O
module	O
?	O

Personally	O
I	O
would	O
use	O
a	O
classmethod	O
whenever	O
I	O
needed	O
a	O
static	O
method	O
.	O

Mainly	O
because	O
I	O
get	O
the	O
class	O
as	O
an	O
argument	O
.	O

or	O
use	O
a	O
decorator	O

For	O
static	O
properties	O
..	O

Its	O
time	O
you	O
look	O
up	O
some	O
python	O
definition	O
..	O
variable	O
can	O
always	O
change	O
.	O

There	O
are	O
two	O
types	O
of	O
them	O
mutable	O
and	O
immutable	O
..	O

Also	O
,	O
there	O
are	O
class	O
attributes	O
and	O
instance	O
attributes	O
..	O

Nothing	O
really	O
like	O
static	O
attributes	O
in	O
the	O
sense	O
of	O
java	O
c++	O

Why	O
use	O
static	O
method	O
in	O
pythonic	O
sense	O
,	O
if	O
it	O
has	O
no	O
relation	O
whatever	O
to	O
the	O
class	O
!	O

If	O
I	O
were	O
you	O
,	O
I'd	O
either	O
use	O
classmethod	O
or	O
define	O
the	O
method	O
independent	O
from	O
the	O
class	O
.	O

Static	O
methods	O
in	O
python	O
are	O
called	O
classmethod	O
s	O
.	O

Take	O
a	O
look	O
at	O
the	O
following	O
code	O

Notice	O
that	O
when	O
we	O
call	O
the	O
method	O
myInstanceMethod	O
,	O
we	O
get	O
an	O
error	O
.	O

This	O
is	O
because	O
it	O
requires	O
that	O
method	O
be	O
called	O
on	O
an	O
instance	O
of	O
this	O
class	O
.	O

The	O
method	O
myStaticMethod	O
is	O
set	O
as	O
a	O
classmethod	O
using	O
the	O
decorator	O
@USER	O
.	O

Just	O
for	O
kicks	O
and	O
giggles	O
,	O
we	O
could	O
call	O
myInstanceMethod	O
on	O
the	O
class	O
by	O
passing	O
in	O
an	O
instance	O
of	O
the	O
class	O
,	O
like	O
so	O
:	O

One	O
special	O
thing	O
to	O
note	O
about	O
static	O
properties	O
instance	O
properties	O
,	O
shown	O
in	O
the	O
example	O
below	O
:	O

This	O
means	O
before	O
assigning	O
the	O
value	O
to	O
instance	O
property	O
,	O
if	O
we	O
try	O
to	O
access	O
the	O
property	O
thru	O
'	O
instance	O
,	O
the	O
static	O
value	O
is	O
used	O
.	O

Each	O
property	O
declared	O
in	O
python	O
class	O
always	O
has	O
a	O
static	O
slot	O
in	O
memory	O
.	O

You	O
could	O
also	O
enforce	O
a	O
class	O
to	O
be	O
static	O
using	O
metaclass	O
.	O

Then	O
whenever	O
by	O
accident	O
you	O
try	O
to	O
initialize	O
MyClass	O
you'll	O
get	O
an	O
StaticClassError	O
.	O

Why	O
is	O
it	O
even	O
a	O
class	O
if	O
you	O
aren't	O
going	O
to	O
instantiate	O
it	O
?	O

This	O
feels	O
like	O
twisting	O
Python	O
to	O
turn	O
it	O
into	O
Java	O
....	O

The	O
Borg	O
idiom	O
is	O
a	O
better	O
way	O
to	O
handle	O
this	O
.	O

When	O
define	O
some	O
member	O
variable	O
outside	O
any	O
member	O
method	O
,	O
the	O
variable	O
can	O
be	O
either	O
static	O
or	O
non-static	O
depending	O
on	O
how	O
the	O
variable	O
is	O
expressed	O
.	O

CLASSNAME.var	O
is	O
static	O
variable	O

INSTANCENAME.var	O
is	O
not	O
static	O
variable	O
.	O

self.var	O
inside	O
class	O
is	O
not	O
static	O
variable	O
.	O

var	O
inside	O
the	O
class	O
member	O
function	O
is	O
not	O
defined	O
.	O

For	O
example	O
:	O

The	O
results	O
are	O

It	O
is	O
possible	O
to	O
have	O
`	O
static	O
`	O
class	O
variables	O
,	O
but	O
probably	O
not	O
worth	O
the	O
effort	O
.	O

Here's	O
a	O
proof-of-concept	O
written	O
in	O
Python	O
3	O
--	O
if	O
any	O
of	O
the	O
exact	O
details	O
are	O
wrong	O
the	O
code	O
can	O
be	O
tweaked	O
to	O
match	O
just	O
about	O
whatever	O
you	O
mean	O
by	O
a	O
`	O
static	O
variable	O
`	O
:	O

and	O
in	O
use	O
:	O

and	O
some	O
tests	O
:	O

This	O
is	O
much	O
simpler	O
than	O
my	O
attempt	O
above	O
.	O

Bravo	O
!	O

To	O
avoid	O
any	O
potential	O
confusion	O
,	O
I	O
would	O
like	O
to	O
contrast	O
static	O
variables	O
and	O
immutable	O
objects	O
.	O

Some	O
primitive	O
object	O
types	O
like	O
integers	O
,	O
floats	O
,	O
strings	O
,	O
and	O
touples	O
are	O
immutable	O
in	O
Python	O
.	O

This	O
means	O
that	O
the	O
object	O
that	O
is	O
referred	O
to	O
by	O
a	O
given	O
name	O
cannot	O
change	O
if	O
it	O
is	O
of	O
one	O
of	O
the	O
aforementioned	O
object	O
types	O
.	O

The	O
name	O
can	O
be	O
reassigned	O
to	O
a	O
different	O
object	O
,	O
but	O
the	O
object	O
itself	O
may	O
not	O
be	O
changed	O
.	O

Making	O
a	O
variable	O
static	O
takes	O
this	O
a	O
step	O
further	O
by	O
disallowing	O
the	O
variable	O
name	O
to	O
point	O
to	O
any	O
object	O
but	O
that	O
to	O
which	O
it	O
currently	O
points	O
.	O

(	O
Note	O
:	O
this	O
is	O
a	O
general	O
software	O
concept	O
and	O
not	O
specific	O
to	O
Python	O
;	O
please	O
see	O
others	O
'	O
posts	O
for	O
information	O
about	O
implementing	O
statics	O
in	O
Python	O
)	O
.	O

Absolutely	O
Yes	O
,	O

Python	O
by	O
itself	O
don't	O
have	O
any	O
static	O
data	O
member	O
explicitly	O
,	O
but	O
We	O
can	O
have	O
by	O
doing	O
so	O

output	O

explanation	O

In	O
regards	O
to	O
this	O
answer	O
,	O
for	O
a	O
constant	O
static	O
variable	O
,	O
you	O
can	O
use	O
a	O
descriptor	O
.	O

Here's	O
an	O
example	O
:	O

resulting	O
in	O
...	O

You	O
can	O
always	O
raise	O
an	O
exception	O
if	O
quietly	O
ignoring	O
setting	O
value	O
(	O
`	O
pass	O
`	O
above	O
)	O
is	O
not	O
your	O
thing	O
.	O

If	O
you're	O
looking	O
for	O
a	O
C++	O
,	O
Java	O
style	O
static	O
class	O
variable	O
:	O

Have	O
a	O
look	O
at	O
this	O
answer	O
and	O
the	O
official	O
docs	O
HOWTO	O
for	O
more	O
information	O
about	O
descriptors	O
.	O

You	O
could	O
also	O
just	O
use	O
`	O
@USER	O
`	O
,	O
which	O
is	O
the	O
same	O
as	O
using	O
a	O
descriptor	O
,	O
but	O
it's	O
a	O
lot	O
less	O
code	O
.	O

The	O
best	O
way	O
I	O
found	O
is	O
to	O
use	O
another	O
class	O
.	O

You	O
can	O
create	O
an	O
object	O
and	O
then	O
use	O
it	O
on	O
other	O
objects	O
.	O

With	O
the	O
example	O
above	O
,	O
I	O
made	O
a	O
class	O
named	O
`	O
staticFlag	O
`	O
.	O

This	O
class	O
should	O
present	O
the	O
static	O
var	O
`	O
__success	O
`	O
(	O
Private	O
Static	O
Var	O
)	O
.	O

`	O
tryIt	O
`	O
class	O
represented	O
the	O
regular	O
class	O
we	O
need	O
to	O
use	O
.	O

Now	O
I	O
made	O
an	O
object	O
for	O
one	O
flag	O
(	O
`	O
staticFlag	O
`)	O
.	O

This	O
flag	O
will	O
be	O
sent	O
as	O
reference	O
to	O
all	O
the	O
regular	O
objects	O
.	O

All	O
these	O
objects	O
are	O
being	O
added	O
to	O
the	O
list	O
`	O
tryArr	O
`	O
.	O

This	O
Script	O
Results	O
:	O

Static	O
Variables	O
in	O
Class	O
factory	O
python3.6	O

For	O
anyone	O
using	O
a	O
class	O
factory	O
with	O
python3.6	O
and	O
up	O
use	O
the	O
`	O
nonlocal	O
`	O
keyword	O
to	O
add	O
it	O
to	O
the	O
scope	O
/	O
context	O
of	O
the	O
class	O
being	O
created	O
like	O
so	O
:	O

yes	O
,	O
but	O
in	O
this	O
case	O
`	O
hasattr	O
(	O
SomeClass	O
,	O
'	O
x	O
')`	O
is	O
`	O
False	O
`	O
.	O

i	O
doubt	O
this	O
is	O
what	O
anyone	O
means	O
by	O
a	O
static	O
variable	O
at	O
all	O
.	O

@USER	O
lol	O
,	O
saw	O
your	O
static	O
variable	O
code	O
,	O
stackoverflow.com/a/27568860/2026508	O
+1	O
internet	O
sir	O
,	O
and	O
i	O
thought	O
hasattr	O
didn't	O
work	O
like	O
that	O
?	O

so	O
is	O
`	O
some_var	O
`	O
immutable	O
,	O
and	O
statically	O
defined	O
,	O
or	O
is	O
it	O
not	O
?	O

What	O
does	O
outside	O
getter	O
access	O
have	O
to	O
do	O
with	O
a	O
variable	O
being	O
static	O
or	O
not	O
?	O

i	O
have	O
so	O
many	O
questions	O
now	O
.	O
would	O
love	O
to	O
hear	O
some	O
answers	O
when	O
you	O
get	O
the	O
time	O
.	O

Yeah	O
that	O
metaclass	O
is	O
pretty	O
ridiculous	O
.	O

I'm	O
not	O
certain	O
I	O
understand	O
the	O
questions	O
but	O
to	O
my	O
mind	O
,	O
`	O
some_var	O
`	O
above	O
isn't	O
a	O
class	O
member	O
at	O
all	O
.	O

In	O
Python	O
all	O
class	O
members	O
can	O
be	O
accessed	O
from	O
outside	O
the	O
class	O
.	O

The	O
`	O
nonlocal	O
`	O
keywoard	O
"	O
bumps	O
"	O
the	O
scope	O
of	O
the	O
variable	O
.	O

The	O
scope	O
of	O
a	O
class	O
body	O
definition	O
is	O
independent	O
of	O
the	O
scope	O
it	O
finds	O
itself	O
in-	O
when	O
you	O
say	O
`	O
nonlocal	O
some_var	O
`	O
,	O
that	O
is	O
just	O
creating	O
a	O
non-local	O
(	O
read	O
:	O
NOT	O
in	O
the	O
class	O
definition	O
scope	O
)	O
name	O
reference	O
to	O
another	O
named	O
object	O
.	O

Therefore	O
it	O
doesn't	O
get	O
attached	O
to	O
the	O
class	O
definition	O
because	O
it	O
is	O
not	O
in	O
the	O
class	O
body	O
scope	O
.	O

