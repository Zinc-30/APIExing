How can I set the aspect ratio in matplotlib ?
I'm trying to make a square plot ( using imshow ) , i.e. aspect ratio of 1:1 , but I can't . None of these work :
Any ideas ? Let me know if you need more info e.g. details of the other calls . It seems like the calls are just being ignored ( a problem I often seem to have with matplotlib ) .
Thanks !
Did you try ` ax.axis ( ' equal ')` , by chance ? As everyone's said , what you did should work , but ` ax.axis ` might be another route to try for a workaround .
matplotlib.org/examples/pylab_examples/equal_aspect_ratio.ht ml
Third times the charm . My guess is that this is a bug and Zhenya's answer suggests it's fixed in the latest version . I have version 0.99.1.1 and I've created the following solution :
This is ' force.png ' :
Below are my unsuccessful , yet hopefully informative attempts .
Second Answer :
My ' original answer ' below is overkill , as it does something similar to ` axes.set_aspect() ` . I think you want to use ` axes.set_aspect ( ' auto ')` . I don't understand why this is the case , but it produces a square image plot for me , for example this script :
Produces an image plot with ' equal ' aspect ratio :
and one with ' auto ' aspect ratio :
The code provided below in the ' original answer ' provides a starting off point for an explicitly controlled aspect ratio , but it seems to be ignored once an imshow is called .
Original Answer :
Here's an example of a routine that will adjust the subplot parameters so that you get the desired aspect ratio :
This produces a figure like so :
I can imagine if your having multiple subplots within the figure , you would want to include the number of y and x subplots as keyword parameters ( defaulting to 1 each ) to the routine provided . Then using those numbers and the ` hspace ` and ` wspace ` keywords , you can make all the subplots have the correct aspect ratio .
Thanks SO much - finally using your function works ! Thank you thank you :-)
For cases where ` get_images ` is an empty list ( as would happen with ` ax.plot ([ 0 , 1 ] , [ 0 , 2 ])` , you can use ` get_xlim ` and ` get_ylim `
It looks to me like this won't work if done with logscale . I've added an answer which tests for that and handles it . Feel free to incorporate that into your answer and then I'll remove mine .
What is the ` matplotlib ` version you are running ? I have recently had to upgrade to ` 1.1.0 ` , and with it , ` add_subplot ( 111 , aspect= ' equal ')` works for me .
It's 1.0.1 . Perhaps that's an answer ..
you should try with figaspect . It works for me . From the docs :
Create a figure with specified aspect ratio . If arg is a number , use that aspect ratio . If arg is an array , figaspect will
determine the width and height for a figure that would fit array
preserving aspect ratio . The figure width , height in inches are
returned . Be sure to create an axes with equal with and height , eg
Example usage :
Edit : I am not sure of what you are looking for . The above code changes the canvas ( the plot size ) . If you want to change the size of the matplotlib window , of the figure , then use :
this does produce a window of 5x1 ( wxh ) .
Thanks for this - it does have some effect , in changing the aspect ratio of the canvas : To be more specific , I need to change the aspect ratio of the figure itself , which doing the following does not ( apols formatting .. ): fig = plt.figure ( figsize =( plt.figaspect ( 2.0 )))
This answer is based on Yann's answer . It will set the aspect ratio for linear or log-log plots . I've used additional information from https://stackoverflow.com/a/16290035/2966723 to test if the axes are log-scale .
Obviously you can use any version of ` log ` you want , I've used ` scipy ` , but ` numpy ` or ` math ` should be fine .