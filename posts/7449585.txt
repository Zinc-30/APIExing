How do you set the absolute position of figure windows with matplotlib ?
I'm writing a simple Python application that uses matplotlib to display a few figures on screen . The number of figures generated is based on user input and changes throughout the application's life . The user has the ability to issue a " plot " command to generate a new figure window with the selected data series . In order to improve the user experience , I would like to provide another command that would programmatically arrange all open figure windows in some convenient arrangement ( e.g. tile them across the available screen space ) .
I believe to have found APIs that allow me to adjust the size of the figure window ( in pixels ) , but haven't had any success in finding a way to set their absolute position on screen . Is there a way to do this without delving into the details of whatever backend is in use ? I would like to do this in a backend-agnostic way so I can avoid relying upon implementation details that might change in the future .
there is not that I know a backend-agnostic way to do this , but definitely it is possible to do it for some common backends , e.g. , WX , tkagg etc .
per @USER at the comment section below , you might wanna switch to
instead . For ` TkAgg ` , just change it to
So I think you can exhaust through all the backends that are capable of doing this , if imposing a certain one is not an option .
Thanks . I'm using TKAgg on my system , but I don't think I can assume that the end user will . I might be able to enforce that the user must use some subset of them , though .
@USER R it really depends on how important this specified positioning is in your application . If it were merely for improving user experience , you can simply go for whichever subset you can take care of , otherwise , can you generate only one window , and dynamically place each plot as sub_plots while erasing old sub_plots ?
Dunno why , but for me ( Windows , Python Idle , Python 2.7 , started from Notepad++ ) the ` thismanager.window.wm_geometry ( " +500+0 ")` worked , the ` thismanager.window.SetPosition (( 500 , 0 ))` didnt ;-)
Me too @USER , thanks for tip !
FINALLY found the solution for QT backend :
If one doesn't know the x- and y-width one can read them out first , like so :
and then set the new position with the same size :
I was searching quite often for this and finally invested the 30 minutes to find this out . Hope that helps someone .
Great solution , thanks for sharing !
Much better answer than the accepted one .
note that instead of mngr = get_current_fig_manager() , we can also use fig.canvas.manager
Inspired by @USER answer , I wrote a script to move and resize a window to a specific standard position on the screen . This was tested with the Qt4Agg backend :
How would I go about adding a middle option ?
For Qt4Agg , this worked for me .
Tested on Win7 , mpl version 1.4.2 , python 2.7.5
With help from the answers thus far and some tinkering on my own , here's a solution that checks for the current backend and uses the correct syntax .
Hey , I just tried this and got an error : ` AttributeError : ' AxesSubplot ' object has no attribute ' canvas '`
This also works :
If you want to send a plot to an image and have it open with the default image manager ( which likely remembers position ) use this from here :
with small ` m ` in ` move `
does not work with QT .
To combine the two previous comments : At least when using the Qt backend ( Qt4Agg , and probably also Qt5Agg ) , the correct command to resize is ` fig.canvas.manager.window.move ( 100,400 )` . Seems to also be true for GTK3Agg , so I'll edit this answer .
For the windows platform you could install and use pyfig module from Pyfig .
Example on how to manipulate the figure windows is given below :
How about defining a function to raise the window to the top level and move it toward the top-left corner ( for example ) like this :
Then whenever you open a new figure you just type " topfig() " . Is there a way to pre-define topfig so it will always be available ?