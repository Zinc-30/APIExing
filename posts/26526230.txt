Plotting datetimeindex on x-axis with matplotlib creates wrong ticks in pandas 0.15 in contrast to 0.14
I create a simple pandas dataframe with some random values and a DatetimeIndex like so :
Then I plot it in two different ways :
( Do not use both statements at the same time as they plot on the same figure . )
I use Python 3.4 64bit and matplotlib 1.4 . With pandas 0.14 , both statements give me the expected plot ( they use slightly different formatting of the x-axis which is okay ; note that data is random so the plots do not look the same ):
However , when using pandas 0.15 , the pandas plot looks alright but the matplotlib plot has some strange tick format on the x-axis :
Is there any good reason for this behaviour and why it has changed from pandas 0.14 to 0.15 ?
A workaround is to call ` to_pydatetimes ` : ` plt.plot ( df.index.to_pydatetimes() , df.RandomValues )` .
You probably meant ` to_pydatetime() ` ( without ' s ' , same typo in your answer below ) , then it works great .
Ah yes , indeed , thanks ! Edited it in my answer
Note that this bug was fixed in pandas 0.15.1 ( https://github.com/pandas-dev/pandas/pull/8693 ) , and ` plt.plot ( df.index , df.RandomValues )` now just works again .
The reason for this change in behaviour is that starting from 0.15 , the pandas ` Index ` object is no longer a numpy ndarray subclass . But the real reason is that matplotlib does not support the ` datetime64 ` dtype .
As a workaround , in the case you want to use the matplotlib ` plot ` function , you can convert the index to python datetime's using ` to_pydatetime ` :
More in detail explanation :
Because ` Index ` is no longer a ndarray subclass , matplotlib will convert the index to a numpy array with ` datetime64 ` dtype ( while before , it retained the ` Index ` object , of which scalars are returned as ` Timestamp ` values , a subclass of ` datetime.datetime ` , which matplotlib can handle ) . In the ` plot ` function , it calls ` np.atleast_1d() ` on the input which now returns a datetime64 array , which matplotlib handles as integers .
I opened an issue about this ( as this gets possibly a lot of use ): https://github.com/pydata/pandas/issues/8614
Thanks for your effort opening an issue for this ! The workaround is fine , letting me use pandas 0.15 without having to change too much :)
With matplotlib 1.5.0 this ' just works ' :