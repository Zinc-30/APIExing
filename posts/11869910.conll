pandas	O
:	O
filter	O
rows	O
of	O
DataFrame	B-API
with	O
operator	O
chaining	O

Most	O
operations	O
in	O
`	O
pandas	O
`	O
can	O
be	O
accomplished	O
with	O
operator	O
chaining	O
(	O
`	O
groupby	B-API
`	O
,	O
`	O
aggregate	B-API
`	O
,	O
`	O
apply	B-API
`	O
,	O
etc	O
)	O
,	O
but	O
the	O
only	O
way	O
I've	O
found	O
to	O
filter	O
rows	O
is	O
via	O
normal	O
bracket	O
indexing	O

This	O
is	O
unappealing	O
as	O
it	O
requires	O
I	O
assign	O
`	O
df	O
`	O
to	O
a	O
variable	O
before	O
being	O
able	O
to	O
filter	O
on	O
its	O
values	O
.	O

Is	O
there	O
something	O
more	O
like	O
the	O
following	O
?	O

I'm	O
not	O
entirely	O
sure	O
what	O
you	O
want	O
,	O
and	O
your	O
last	O
line	O
of	O
code	O
does	O
not	O
help	O
either	O
,	O
but	O
anyway	O
:	O

"	O
Chained	O
"	O
filtering	O
is	O
done	O
by	O
"	O
chaining	O
"	O
the	O
criteria	O
in	O
the	O
boolean	O
index	O
.	O

If	O
you	O
want	O
to	O
chain	O
methods	O
,	O
you	O
can	O
add	O
your	O
own	O
mask	B-API
method	O
and	O
use	O
that	O
one	O
.	O

Great	O
answer	O
!	O

So	O
in	O
`	O
(	O
df.A	O
==	O
1	O
)	O
(	O
df.D	O
==	O
6	O
)`	O
,	O
is	O
the	O
"	O
"	O
an	O
overloaded	O
operator	O
in	O
Pandas	O
?	O

indeed	O
,	O
see	O
also	O
pandas.pydata.org/pandas-docs/stable	O

That	O
is	O
a	O
really	O
nice	O
solution	O
-	O
I	O
wasn't	O
even	O
aware	O
that	O
you	O
could	O
jury-rig	O
methods	O
like	O
that	O
in	O
python	O
.	O

A	O
function	O
like	O
this	O
would	O
be	O
really	O
nice	O
to	O
have	O
in	O
Pandas	O
itself	O
.	O

The	O
answer	O
from	O
@USER	O
is	O
great	O
.	O

I	O
would	O
extend	O
it	O
by	O
generalizing	O
the	O
mask	B-API
function	O
as	O
:	O

Then	O
you	O
can	O
do	O
stuff	O
like	O
:	O

A	O
useful	O
generalization	O
!	O

I	O
wish	O
it	O
were	O
integrated	O
directly	O
into	O
`	O
DataFrame	B-API
`	O
s	O
already	O
!	O

see	O
the	O
feature	O
request	O
at	O
github.com/pydata/pandas/issues/5900	O

Filters	O
can	O
be	O
chained	O
using	O
a	O
Pandas	O
query	O
:	O

Filters	O
can	O
also	O
be	O
combined	O
in	O
a	O
single	O
query	O
:	O

If	O
you	O
need	O
to	O
refer	O
to	O
python	O
variables	O
in	O
your	O
query	O
,	O
the	O
documentation	O
says	O
,	O
"	O
You	O
can	O
refer	O
to	O
variables	O
in	O
the	O
environment	O
by	O
prefixing	O
them	O
with	O
an	O
@	O
character	O
like	O
@USER	O
+	O
b	O
"	O
.	O

Note	O
that	O
the	O
following	O
are	O
valid	O
:	O
`	O
df.query	B-API
(	O
'	O
a	O
in	O
list	O
([	O
1	O
,	O
2	O
])')`	O
,	O
`	O
s	O
=	O
set	O
([	O
1	O
,	O
2	O
]);	O
df.query	B-API
(	O
'	O
a	O
in	O
@USER	O
')`	O
.	O

On	O
the	O
other	O
hand	O
,	O
it	O
looks	O
like	O
the	O
query	O
evaluation	O
will	O
fail	O
if	O
your	O
column	O
name	O
has	O
certain	O
special	O
characters	O
:	O
e.g.	O
"	O
Place.Name	O
"	O
.	O

I	O
had	O
the	O
same	O
question	O
except	O
that	O
I	O
wanted	O
to	O
combine	O
the	O
criteria	O
into	O
an	O
OR	O
condition	O
.	O

The	O
format	O
given	O
by	O
Wouter	O
Overmeire	O
combines	O
the	O
criteria	O
into	O
an	O
AND	O
condition	O
such	O
that	O
both	O
must	O
be	O
satisfied	O
:	O

But	O
I	O
found	O
that	O
,	O
if	O
you	O
wrap	O
each	O
condition	O
in	O
`	O
(	O
...	O
==	O
True	O
)`	O
and	O
join	B-API
the	O
criteria	O
with	O
a	O
pipe	O
,	O
the	O
criteria	O
are	O
combined	O
in	O
an	O
OR	O
condition	O
,	O
satisfied	O
whenever	O
either	O
of	O
them	O
is	O
true	O
:	O

Wouldn't	O
`	O
df	O
[(	O
df.A	O
==	O
1	O
)	O
|	O
(	O
df.D	O
==	O
6	O
)]`	O
be	O
sufficient	O
for	O
what	O
you're	O
trying	O
to	O
accomplish	O
?	O

My	O
answer	O
is	O
similar	O
to	O
the	O
others	O
.	O

If	O
you	O
do	O
not	O
want	O
to	O
create	O
a	O
new	O
function	O
you	O
can	O
use	O
what	O
pandas	O
has	O
defined	O
for	O
you	O
already	O
.	O

Use	O
the	O
pipe	O
method	O
.	O

THIS	O
is	O
what	O
you	O
want	O
if	O
you	O
want	O
to	O
chain	O
commands	O
such	O
as	O
`	O
a.join	O
(	O
b	O
)	O
.pipe	B-API
(	O
lambda	O
df	O
:	O
df	O
[	O
df.column_to_filter	O
==	O
'	O
VALUE	O
'])`	O

If	O
you	O
would	O
like	O
to	O
apply	B-API
all	O
of	O
the	O
common	O
boolean	O
masks	O
as	O
well	O
as	O
a	O
general	O
purpose	O
mask	B-API
you	O
can	O
chuck	O
the	O
following	O
in	O
a	O
file	O
and	O
then	O
simply	O
assign	O
them	O
all	O
as	O
follows	O
:	O

Usage	O
:	O

It's	O
a	O
little	O
bit	O
hacky	O
but	O
it	O
can	O
make	O
things	O
a	O
little	O
bit	O
cleaner	O
if	O
you're	O
continuously	O
chopping	O
and	O
changing	O
datasets	O
according	O
to	O
filters	O
.	O

There's	O
also	O
a	O
general	O
purpose	O
filter	O
adapted	O
from	O
Daniel	O
Velkov	O
above	O
in	O
the	O
gen_mask	O
function	O
which	O
you	O
can	O
use	O
with	O
lambda	O
functions	O
or	O
otherwise	O
if	O
desired	O
.	O

File	O
to	O
be	O
saved	O
(	O
I	O
use	O
masks.py	O
):	O

`	O
pandas.DataFrame.query	B-API
`	O

`	O
query	B-API
`	O
was	O
made	O
for	O
exactly	O
this	O
purpose	O
.	O

Consider	O
the	O
dataframe	B-API
`	O
df	O
`	O

Let's	O
use	O
`	O
query	B-API
`	O
to	O
filter	O
all	O
rows	O
where	O
`	O
D	O
B	O
`	O

Which	O
we	O
chain	O

If	O
you	O
set	O
your	O
columns	O
to	O
search	O
as	O
indexes	O
,	O
then	O
you	O
can	O
use	O
`	O
DataFrame.xs()	B-API
`	O
to	O
take	O
a	O
cross	O
section	O
.	O

This	O
is	O
not	O
as	O
versatile	O
as	O
the	O
`	O
query	B-API
`	O
answers	O
,	O
but	O
it	O
might	O
be	O
useful	O
in	O
some	O
situations	O
.	O

