How to change the order of DataFrame columns ?
I have the following ` DataFrame ` ( ` df `) :
I add more column ( s ) by assignment :
How can I move the column ` mean ` to the front , i.e. set it as first column leaving the order of the other columns untouched ?
possible duplicate of Python Pandas - Re-ordering columns in a dataframe based on column name
Out of curiosity , what would be the consequences of allowing someone with high reputation accept the most popular / correct answer when the original author of the question does not ?
One easy way would be to reassign the dataframe with a list of the columns , rearranged as needed .
This is what you have now :
Rearrange ` cols ` in any way you want . This is how I moved the last element to the first position :
Then reorder the dataframe like this :
incase you get " cannot concatenate ' str ' and ' list ' objects " make sure you [ ] the str value in cols : cols = [ cols [ 7 ]] + cols [: 7 ] + cols [8 :]
Is there any reason to use ` df.ix [: , cols ]` over ` df [ cols ]` ?
@USER That's not a set union it's a concatenation of two ordered lists .
@USER I'm just pointing out that your code is deprecated . Your handling of your post is at your discretion .
@USER , the type of ` cols ` is ` list ` ; it even allows duplicates ( which will be discarded when used on the dataframe ) . You are thinking of ` Index ` objects .
You could also do something like this :
You can get the list of columns with :
The output will produce :
... which is then easy to rearrange manually before dropping it into the first function
You could also get the list of columns with list ( df.columns )
or ` df.columns.tolist() `
Just assign the column names in the order you want them , to ` dataframe .columns ` like below :
Now , ' mean ' column comes out in the front :
This should be the accepted answer .
Does it make a copy ?
@USER - This isn't the best answer if you have , say , 1000 columns in your df .
How about :
http://pandas.pydata.org/pandas-docs/stable/dsintro.html#column-selection-addition-deletion
Could this be a future feature add to ` pandas ` ? something like ` df.move ( 0 , df.mean )` ?
In your case ,
will do exactly what you what .
In my case ( general form ):
You need to create a new list of your columns in the desired order , then use ` df = df [ cols ]` to rearrange the columns in this new order .
You can also use a more general approach . In this example , the last column ( indicated by -1 ) is inserted as the first column .
You can also use this approach for reordering columns in a desired order if they are present in the DataFrame .
This function takes two arguments , the first is the dataset , the second are the columns in the data set that you want to bring to the front .
So in my case I have a data set called Frame with variables A1 , A2 , B1 , B2 , Total and Date . If I want to bring Total to the front then all I have to do is :
If I want to bring Total and Date to the front then I do :
EDIT :
Another useful way to use this is , if you have an unfamiliar table and you're looking with variables with a particular term in them , like VAR1 , VAR2 ,... you may execute something like :
Simply do ,
TypeError : Can't convert ' int ' object to str implicitly
could be API has changed , you can also do this ... ` order = df.columns.tolist() ` ` df [ ' mean '] = df.mean ( 1 )` ` df.columns = [ ' mean '] + order `
A variation of this worked well for me . With an existing list , ` headers ` , that was used to create a dict that was then used to create the DataFrame , I called ` df.reindex ( columns=headers )` . The only problem I ran into was I had already called ` df.set_index ( ' some header name ' , inplace=True )` , so when the reindex was done , it added another column named ` some header name ` since the original column was now the index . As for the syntax specified above , ` [ ' mean '] + df.columns ` in the python interpreter gives me ` Index ( u'meanAddress ' , u'meanCity ' , u'meanFirst Name ' ... `
@USER : I don't know your prior code is , but the edit should work ( using 0.19.2 )
The edit does indeed work ( I'm on 0.20.2 ) . In my case , I've already got the columns I want , so I think df.reindex() is what I really should use .
I ran into a similar question myself , and just wanted to add what I settled on . I liked the reindex_axis ( ) method for changing column order . This worked :
` df = df.reindex_axis ([ ' mean '] + list ( df.columns [: -1 ]) , axis=1 )`
You could do the following ( borrowing parts from Aman's answer ):
This question has been answered before :
No , that's different . There the user wants to sort all columns by name . Here they want to move one column to the first column while leaving the order of the other columns untouched .
What if you don't want them sorted ?
How about using " T " ?
I tried the ` insert() ` function as suggested by Wes McKinney .
df.insert ( 0 , ' mean ' , df.mean ( 1 ))
This got the result that Timmie wanted , in one line , without the need to move that last column .
I believe @USER ' s answer is the best if you know the location of the other column .
If you don't know the location of ` mean ` , but only have its name , you cannot resort directly to ` cols = cols [ -1 :] + cols [: -1 ]` . Following is the next-best thing I could come up with :
Just type the column name you want to change , and set the index for the new location .
For your case , this would be like :
@USER : Your solution was very helpful for me , as I wanted to bring two columns in front from a dataframe where I do not know exactly the names of all columns , because they are generated from a pivot statement before .
So , if you are in the same situation : To bring columns in front that you know the name of and then let them follow by " all the other columns " , I came up with the following general solution ;
The simplest way would be to change the order of the column names like this
` df = df [[ ' mean ' , Col1 , Col2 , Col3 ]]`
` DataFrame.sort_index ( axis=1 )` is quite clean . Check doc here