Python	O
:	O
2d	O
contour	O
plot	O
from	O
3	O
lists	O
:	O
x	O
,	O
y	O
and	O
rho	O
?	O

I	O
have	O
a	O
simple	O
problem	O
in	O
python	O
and	O
matplotlib	O
.	O

I	O
have	O
3	O
lists	O
:	O
x	O
,	O
y	O
and	O
rho	O
with	O
rho	O
[	O
i	O
]	O
a	O
density	O
at	O
the	O
point	O
x	O
[	O
i	O
]	O
,	O
y	O
[	O
i	O
]	O
.	O

All	O
values	O
of	O
x	O
and	O
y	O
are	O
between	O
-1	O
.	O
and	O
1	O
.	O
but	O
they	O
are	O
not	O
in	O
a	O
specific	O
order	O
.	O

How	O
to	O
make	O
a	O
contour	O
plot	O
(	O
like	O
with	O
imshow	O
)	O
of	O
the	O
density	O
rho	O
(	O
interpolated	O
at	O
the	O
points	O
x	O
,	O
y	O
)	O
.	O

Thank	O
you	O
very	O
much	O
.	O

EDIT	O
:	O
I	O
work	O
with	O
large	O
arrays	O
:	O
x	O
,	O
y	O
and	O
rho	O
have	O
between	O
10,000	O
and	O
1,000,000	O
elements	O

did	O
the	O
code	O
you	O
accepted	O
worked	O
for	O
you	O
?	O

'	O
m	O
having	O
same-sort	O
of	O
list	O
scenario	O
but	O
not	O
being	O
able	O
to	O
solve	O
it	O
.	O

You	O
need	O
to	O
interpolate	B-API
your	O
`	O
rho	O
`	O
values	O
.	O

There's	O
no	O
one	O
way	O
to	O
do	O
this	O
,	O
and	O
the	O
"	O
best	O
"	O
method	O
depends	O
entirely	O
on	O
the	O
a-priori	O
information	O
you	O
should	O
be	O
incorporating	O
into	O
the	O
interpolation	O
.	O

Before	O
I	O
go	O
into	O
a	O
rant	O
on	O
"	O
black-box	O
"	O
interpolation	O
methods	O
,	O
though	O
,	O
a	O
radial	O
basis	O
function	O
(	O
e.g.	O
a	O
"	O
thin-plate-spline	O
"	O
is	O
a	O
particular	O
type	O
of	O
radial	O
basis	O
function	O
)	O
is	O
often	O
a	O
good	O
choice	O
.	O

If	O
you	O
have	O
millions	O
of	O
points	O
,	O
this	O
implementation	O
will	O
be	O
inefficient	O
,	O
but	O
as	O
a	O
starting	O
point	O
:	O

Very	O
interesting	O
method	O
but	O
it	O
doesn't	O
work	O
with	O
large	O
arrays	O
:	O
x	O
,	O
y	O
and	O
rho	O
have	O
around	O
10000	O
elements	O
...	O

You	O
can	O
still	O
use	O
an	O
Rbf	O
for	O
large	O
arrays	O
,	O
you	O
just	O
need	O
to	O
only	O
include	O
nearby	O
points	O
.	O

I'll	O
add	O
an	O
example	O
in	O
just	O
a	O
bit	O
.	O

Alternately	O
,	O
if	O
you	O
don't	O
want	O
to	O
actually	O
sample	O
everything	O
on	O
a	O
regular	O
grid	O
,	O
you	O
can	O
use	O
delaunay	O
triangulation	O
to	O
draw	O
the	O
contours	O
(	O
which	O
is	O
just	O
a	O
very	O
simple	O
and	O
not	O
particularly	O
smooth	O
form	O
of	O
interpolation	O
)	O
.	O

With	O
that	O
many	O
points	O
,	O
however	O
,	O
it's	O
more	O
practical	O
to	O
just	O
use	O
a	O
local	O
interpolation	O
method	O
.	O

@USER	O
Hi	O
,	O
I'm	O
having	O
a	O
problem	O
with	O
this	O
above	O
code	O
,	O
My	O
data-set	O
consists	O
of	O
lists	O
x	O
,	O
y	O
and	O
z	O
.	O

x	O
and	O
y	O
vary	O
independently	O
,	O
z	O
varies	O
depending	O
on	O
(	O
x	O
,	O
y	O
)	O
.	O

`	O
x	O
=	O
(	O
1.2	O
to	O
2.5	O
)`	O
,	O
`	O
y	O
=(	O
90	O
to	O
180	O
)`	O
and	O
`	O
z	O
=(	O
5	O
to	O
-5	O
)`	O
.	O

If	O
I	O
try	O
the	O
above	O
code	O
with	O
my	O
dataset	O
i'm	O
getting	O
a	O
collapsed-plot	O
(	O
nothing	O
along	O
x-axis	O
)	O
.	O

Please	O
help	O
.	O

@USER	O
-	O
I'm	O
guessing	O
,	O
but	O
it	O
may	O
be	O
the	O
way	O
you're	O
plotting	O
the	O
output	O
.	O

By	O
default	O
,	O
`	O
imshow	O
`	O
will	O
force	O
the	O
aspect	O
ratio	O
of	O
the	O
plot	O
to	O
be	O
1	O
.	O

In	O
other	O
words	O
,	O
one	O
centimenter	O
in	O
the	O
x-direction	O
is	O
the	O
same	O
number	O
of	O
units	O
as	O
one	O
centimenter	O
in	O
the	O
y-direction	O
.	O

This	O
will	O
force	O
the	O
axes	O
to	O
be	O
very	O
long	O
and	O
narrow	O
with	O
your	O
data	O
ranges	O
.	O

You're	O
probably	O
getting	O
reasonable	O
output	O
,	O
but	O
plotting	O
it	O
so	O
that	O
it's	O
difficult	O
to	O
see	O
.	O

Try	O
passing	O
`	O
aspect=	O
"	O
auto	O
"`	O
to	O
`	O
imshow	O
`	O
.	O

@USER	O
-	O
Also	O
be	O
aware	O
that	O
you	O
may	O
want	O
to	O
rescale	O
your	O
data	O
ranges	O
before	O
interpolating	O
.	O

E.g.	O
see	O
the	O
second	O
and	O
third	O
figures	O
in	O
stackoverflow.com/a/3867302/325565	O
Because	O
the	O
x	O
and	O
y	O
ranges	O
of	O
your	O
data	O
only	O
vary	O
by	O
a	O
factor	O
of	O
10	O
,	O
though	O
,	O
you	O
won't	O
have	O
particularly	O
severe	O
anisotropy	O
problems	O
.	O

You	O
can	O
probably	O
ignore	O
this	O
,	O
but	O
it's	O
good	O
to	O
be	O
aware	O
of	O
.	O

You	O
can	O
use	O
scipy's	O
`	O
griddata	O
`	O
(	O
requires	O
Scipy	O
=	O
0.10	O
)	O
,	O
it's	O
a	O
triangulation-based	O
method	O
.	O

There's	O
also	O
inverse	O
distance	O
weighed	O
interpolation	O
--	O
similar	O
to	O
RBF	O
,	O
but	O
should	O
work	O
better	O
for	O
large	O
#	O
of	O
points	O
:	O
Inverse	O
Distance	O
Weighted	O
(	O
IDW	O
)	O
Interpolation	O
with	O
Python	O

