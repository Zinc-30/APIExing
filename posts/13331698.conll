How	O
to	O
apply	B-API
a	O
function	O
to	O
two	O
columns	O
of	O
Pandas	O
dataframe	B-API

Suppose	O
I	O
have	O
a	O
`	O
df	O
`	O
which	O
has	O
columns	O
of	O
`'	O
ID	O
'	O
,	O
'	O
col_1	O
'	O
,	O
'	O
col_2	O
'`	O
.	O

And	O
I	O
define	O
a	O
function	O
:	O

`	O
f	O
=	O
lambda	O
x	O
,	O
y	O
:	O
my_function_expression	O
`	O
.	O

Now	O
I	O
want	O
to	O
apply	B-API
the	O
`	O
f	O
`	O
to	O
`	O
df	O
`'	O
s	O
two	O
columns	O
`'	O
col_1	O
'	O
,	O
'	O
col_2	O
'`	O
to	O
element-wise	O
calculate	O
a	O
new	O
column	O
`'	O
col_3	O
'`	O
,	O
somewhat	O
like	O
:	O

How	O
to	O
do	O
?	O

**	O
Add	O
detail	O
sample	O
as	O
below	O
***	O

can	O
you	O
apply	B-API
f	O
directly	O
to	O
columns	O
:	O
df	O
[	O
'	O
col_3	O
']	O
=	O
f	O
(	O
df	O
[	O
'	O
col_1	O
']	O
,	O
df	O
[	O
'	O
col_2	O
'])	O

would	O
be	O
useful	O
to	O
know	O
what	O
`	O
f	O
`	O
is	O
doing	O

no	O
,	O
df	O
[	O
'	O
col_3	O
']	O
=	O
f	O
(	O
df	O
[	O
'	O
col_1	O
']	O
,	O
df	O
[	O
'	O
col_2	O
'])	O
not	O
work	O
.	O

For	O
f	O
only	O
accepts	O
scalar	O
input	O
,	O
not	O
vector	O
inputs	O
.	O

OK	O
,	O
you	O
can	O
assume	O
f	O
=	O
lambda	O
x	O
,	O
y	O
:	O
x+y	O
.	O

(	O
of	O
course	O
,	O
my	O
real	O
f	O
is	O
not	O
that	O
simple	O
,	O
otherwise	O
i	O
can	O
directly	O
df	O
[	O
'	O
col_3	O
']	O
=	O
df	O
[	O
'	O
col_1	O
']	O
+	O
df	O
[	O
'	O
col_2	O
']	O
)	O

I	O
found	O
a	O
related	O
Q	O
A	O
at	O
below	O
url	O
,	O
but	O
my	O
issue	O
is	O
calculating	O
a	O
new	O
column	O
by	O
two	O
existing	O
columns	O
,	O
not	O
2	O
from	O
1	O
.	O
stackoverflow.com/questions/12356501	O

Here's	O
an	O
example	O
using	O
`	O
apply	B-API
`	O
on	O
the	O
dataframe	B-API
,	O
which	O
I	O
am	O
calling	O
with	O
`	O
axis	O
=	O
1	O
`	O
.	O

Note	O
the	O
difference	O
is	O
that	O
instead	O
of	O
trying	O
to	O
pass	O
two	O
values	O
to	O
the	O
function	O
`	O
f	O
`	O
,	O
rewrite	O
the	O
function	O
to	O
accept	O
a	O
pandas	O
Series	O
object	O
,	O
and	O
then	O
index	O
the	O
Series	O
to	O
get	O
the	O
values	O
needed	O
.	O

Depending	O
on	O
your	O
use	O
case	O
,	O
it	O
is	O
sometimes	O
helpful	O
to	O
create	O
a	O
pandas	O
`	O
group	O
`	O
object	O
,	O
and	O
then	O
use	O
`	O
apply	B-API
`	O
on	O
the	O
group	O
.	O

Yes	O
,	O
i	O
tried	O
to	O
use	O
apply	B-API
,	O
but	O
can't	O
find	O
the	O
valid	O
syntax	O
expression	O
.	O

And	O
if	O
each	O
row	O
of	O
df	O
is	O
unique	O
,	O
still	O
use	O
groupby	B-API
?	O

Added	O
an	O
example	O
to	O
my	O
answer	O
,	O
hope	O
this	O
does	O
what	O
you're	O
looking	O
for	O
.	O

If	O
not	O
,	O
please	O
provide	O
a	O
more	O
specific	O
example	O
function	O
since	O
`	O
sum	B-API
`	O
is	O
solved	O
successfully	O
by	O
any	O
of	O
the	O
methods	O
suggested	O
so	O
far	O
.	O

i	O
provide	O
a	O
detail	O
sample	O
in	O
question	O
.	O

How	O
to	O
use	O
Pandas	O
'	O
apply	B-API
'	O
function	O
to	O
create	O
'	O
col_3	O
'	O
?	O

Would	O
you	O
pls	O
paste	O
your	O
code	O
?	O

I	O
rewrite	O
the	O
function	O
:	O
def	O
get_sublist	O
(	O
x	O
):	O
return	O
mylist	O
[	O
x	O
[	O
1	O
]:	O
x	O
[	O
2	O
]	O
+	O
1	O
]	O
and	O
df	O
[	O
'	O
col_3	O
']	O
=	O
df.apply	B-API
(	O
get_sublist	O
,	O
axis=1	O
)	O
gives	O
'	O
ValueError	O
:	O
operands	O
could	O
not	O
be	O
broadcast	O
together	O
with	O
shapes	O
(	O
2	O
)	O
(	O
3	O
)'	O

@USER	O
:	O
with	O
Pandas	O
version	O
0.14.1	O
(	O
and	O
possibly	O
earlier	O
)	O
,	O
use	O
can	O
use	O
a	O
lambda	O
expression	O
as	O
well	O
.	O

Give	O
the	O
`	O
df	O
`	O
object	O
you	O
defined	O
,	O
another	O
approach	O
(	O
with	O
equivalent	O
results	O
)	O
is	O
`	O
df.apply	B-API
(	O
lambda	O
x	O
:	O
x	O
[	O
0	O
]	O
+	O
x	O
[	O
1	O
]	O
,	O
axis	O
=	O
1	O
)`	O
.	O

A	O
interesting	O
question	O
!	O

my	O
answer	O
as	O
below	O
:	O

Output	O
:	O

I	O
changed	O
the	O
column	O
name	O
to	O
ID	O
,	O
J1	O
,	O
J2	O
,	O
J3	O
to	O
ensure	O
ID	O
J1	O
J2	O
J3	O
,	O
so	O
the	O
column	O
display	O
in	O
right	O
sequence	O
.	O

One	O
more	O
brief	O
version	O
:	O

A	O
simple	O
solution	O
is	O
:	O

how	O
is	O
this	O
answer	O
different	O
to	O
the	O
approach	O
in	O
thequestion	O
:	O
df	O
[	O
'	O
col_3	O
']	O
=	O
df	O
[[	O
'	O
col_1	O
'	O
,	O
'	O
col_2	O
']]	O
.apply	B-API
(	O
f	O
)	O
just	O
to	O
confirm	O
,	O
the	O
approach	O
in	O
the	O
question	O
didn't	O
work	O
because	O
the	O
poster	O
did	O
not	O
specify	O
this	O
axis=1	O
,	O
the	O
default	O
is	O
axis	O
=	O
0	O
?	O

The	O
method	O
you	O
are	O
looking	O
for	O
is	O
Series.combine	B-API
.	O

However	O
,	O
it	O
seems	O
some	O
care	O
has	O
to	O
be	O
taken	O
around	O
datatypes	O
.	O

In	O
your	O
example	O
,	O
you	O
would	O
(	O
as	O
I	O
did	O
when	O
testing	O
the	O
answer	O
)	O
naively	O
call	O

However	O
,	O
this	O
throws	O
the	O
error	O
:	O

My	O
best	O
guess	O
is	O
that	O
it	O
seems	O
to	O
expect	O
the	O
result	O
to	O
be	O
of	O
the	O
same	O
type	O
as	O
the	O
series	O
calling	O
the	O
method	O
(	O
df.col_1	O
here	O
)	O
.	O

However	O
,	O
the	O
following	O
works	O
:	O

With	O
my	O
quirky	O
function	O
,	O
this	O
actually	O
worked	O
!!	O

The	O
way	O
you	O
have	O
written	O
f	O
it	O
needs	O
two	O
inputs	O
.	O

If	O
you	O
look	O
at	O
the	O
error	O
message	O
it	O
says	O
you	O
are	O
not	O
providing	O
two	O
inputs	O
to	O
f	O
,	O
just	O
one	O
.	O

The	O
error	O
message	O
is	O
correct	O
.	O

The	O
mismatch	O
is	O
because	O
df	O
[[	O
'	O
col1	O
'	O
,	O
'	O
col2	O
']]	O
returns	O
a	O
single	O
dataframe	B-API
with	O
two	O
columns	O
,	O
not	O
two	O
separate	O
columns	O
.	O

You	O
need	O
to	O
change	O
your	O
f	O
so	O
that	O
it	O
takes	O
a	O
single	O
input	O
,	O
keep	O
the	O
above	O
data	O
frame	O
as	O
input	O
,	O
then	O
break	O
it	O
up	O
into	O
x	O
,	O
y	O
inside	O
the	O
function	O
body	O
.	O

Then	O
do	O
whatever	O
you	O
need	O
and	O
return	O
a	O
single	O
value	O
.	O

You	O
need	O
this	O
function	O
signature	O
because	O
the	O
syntax	O
is	O
.apply	B-API
(	O
f	O
)	O

So	O
f	O
needs	O
to	O
take	O
the	O
single	O
thing	O
=	O
dataframe	B-API
and	O
not	O
two	O
things	O
which	O
is	O
what	O
your	O
current	O
f	O
expects	O
.	O

Since	O
you	O
haven't	O
provided	O
the	O
body	O
of	O
f	O
I	O
can't	O
help	O
in	O
anymore	O
detail	O
-	O
but	O
this	O
should	O
provide	O
the	O
way	O
out	O
without	O
fundamentally	O
changing	O
your	O
code	O
or	O
using	O
some	O
other	O
methods	O
rather	O
than	O
apply	B-API

I'm	O
going	O
to	O
put	O
in	O
a	O
vote	O
for	O
np.vectorize	O
.	O

It	O
allows	O
you	O
to	O
just	O
shoot	O
over	O
x	O
number	O
of	O
columns	O
and	O
not	O
deal	O
with	O
the	O
dataframe	B-API
in	O
the	O
function	O
,	O
so	O
it's	O
great	O
for	O
functions	O
you	O
don't	O
control	O
or	O
doing	O
something	O
like	O
sending	O
2	O
columns	O
and	O
a	O
constant	O
into	O
a	O
function	O
(	O
i.e.	O
col_1	O
,	O
col_2	O
,	O
'	O
foo	O
')	O
.	O

This	O
doesn't	O
really	O
answer	O
the	O
question	O
using	O
pandas	O
.	O

The	O
question	O
is	O
"	O
How	O
to	O
apply	B-API
a	O
function	O
to	O
two	O
columns	O
of	O
Pandas	O
dataframe	B-API
"	O
not	O
"	O
How	O
to	O
apply	B-API
a	O
function	O
to	O
two	O
columns	O
of	O
Pandas	O
dataframe	B-API
using	O
only	O
Pandas	O
methods	O
"	O
and	O
numpy	O
is	O
a	O
dependency	O
of	O
Pandas	O
so	O
you	O
have	O
to	O
have	O
it	O
installed	O
anyway	O
,	O
so	O
this	O
seems	O
like	O
a	O
strange	O
objection	O
.	O

I'm	O
sure	O
this	O
isn't	O
as	O
fast	O
as	O
the	O
solutions	O
using	O
Pandas	O
or	O
Numpy	O
operations	O
,	O
but	O
if	O
you	O
don't	O
want	O
to	O
rewrite	O
your	O
function	O
you	O
can	O
use	O
map	B-API
.	O

Using	O
the	O
original	O
example	O
data	O
-	O

We	O
could	O
pass	O
as	O
many	O
arguments	O
as	O
we	O
wanted	O
into	O
the	O
function	O
this	O
way	O
.	O

The	O
output	O
is	O
what	O
we	O
wanted	O

My	O
example	O
to	O
your	O
questions	O
:	O

