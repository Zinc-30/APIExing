Interactive matplotlib plot with two sliders
I used matplotlib to create some plot , which depends on 8 variables . I would like to study how the plot changes when I change some of them . I created some script that calls the matplotlib one and generates different snapshots that later I convert into a movie , it is not bad , but a bit clumsy .
I wonder if somehow I could interact with the plot regeneration using keyboard keys to increase / decrease values of some of the variables and see instantly how the plot changes .
What is the best approach for this ?
Also if you can point me to interesting links or a link with a plot example with just two sliders ?
In addition to what @USER mentioned , have a look at the slider widget .
There's an example on the matplotlib examples page . It's a graphical slider bar rather than keyboard bindings , but it works quite well for what you want to do .
( I'm making this community wiki , as I'm just copy-pasting from the example . This particular example teaches bad habits ( e.g. ` from pylab import * `) , but it gets the point across . The example has been fixed to avoid the use of ` pylab ` . )
wow , this is awesome , exactly what I need ! thanks !
Is it possible to actually interact with this tool or does it just generate an image ? If so , what do I need to run it ? I'm currently using IPython
@USER - By " ipython " do you man an ipython notebook ? ( Instead of the normal ipython shell . ) If so , ipython notebooks can't use an interactive backend . You'll need to run things either in a regular ipython shell , or directly ( e.g. " python name_of_your_file.py ") .
@USER - Yes , by default matplotlib will be built with an interactive backend of some sort . If you're using pre-built binaries ( as you would be on windows ) , presumably the person who built them did it correctly . If you're using winpython , matplotlib definitely has an interactive backend ( probably TkAgg ) . Try running the script directly and see what happens . ( i.e. type " python name_of_the_file.py " in a terminal / cmd window . )
To explain more about what's going on , an ipython notebook is not the same as ipython . ` ipython ` is an interactive python shell . An ipython notebook is a web-based interface that basically sends snippets of code back to ` ipython ` to evaluate and return the results of . For that reason , ipython notebooks just render matplotlib figures as static .png ' s , instead of popping up an interactive window . ` ipython ` itself ( or just running the script directly with ` python `) will show an interactive gui window for each matplotlib figure .
Matplotlib has some fairly nice gui functionality . There are some documentation examples in the source tarball of matplotlib , in / examples / user_interfaces and matplotlib / examples / event_handling . Specifically on keyhandling is : http://matplotlib.sourceforge.net/examples/event_handling/keypress_demo.html
I have done something kind of similar to what you are aiming for :
I was using this to shift through displaying different images in a stack on keypresses , but you should be able to put logic in to modify your values given keyboard input .
If you want to do things like have the user input values , I think the examples have options for dialog boxes , but if you just want to increment / decrement a number of variables , just defining keyboard pairs for them in this manner might work well
I don't think that simply plotting graphs using ` plt.plot ` will allow you to do this . You will need to yourself make a custom GUI script / app by embedding Matplotlib into it . Currently , Matplotlib supports all the major GUI toolkits - PyGTK+ , PyQt4 and wxPython .
I use wxPython and embedding matplotlib in it is fairly easy . Similar should be case with the other GUI toolkits . You can get all the information you need for this in the book -
It is available on amazon here .
If you want to do it fast and simple , then the method of the slider inside matplotlib is much better and easier . Just copy the snippet and change a few things . This book is also good , but more for advance and if you want to make it correct !
Looks a bit like an advertisment and its contribution is questionable . It is true that a solution via a GUI toolkit is possible but it was not asked for such .
Use ` waitforbuttonpress ( timeout= 0.001 )` then plot will see your mouse ticks .