How to pretty-printing a numpy.array without scientific notation and with given precision ?
I'm curious , whether there is any way to print formatted numpy.arrays , e.g. , in the way similar to this :
If I want to print the numpy.array of floats , it prints several decimals , often in ' scientific ' format , which is rather hard to read even for low-dimensional arrays . However , numpy.array apparently has to be printed as a string , i.e. , with %s . Is there any solution for this purpose ?
You can use ` set_printoptions ` to set the precision of the output :
And ` suppress ` suppresses the use of scientific notation for small numbers :
See the docs for set_printoptions for other options .
To apply print options locally , you could use a contextmanager :
For example , inside the ` with-suite ` ` precision=3 ` and ` suppress=True ` are set :
But outside the ` with-suite ` the print options are back to default settings :
To prevent zeros from being stripped from the end of floats :
` np.set_printoptions ` now has a ` formatter ` parameter which allows you to specify a format function for each type .
which prints
instead of
is there a means to apply the formatting to only the specific print statement ( as opposed to setting a general output format used by all print statements ) ?
@USER : There is no NumPy function to set print options for just one ` print ` , but you could use a context manager to make something similar . I've edited the post above to show what I mean .
+1 for the context manager
your ` np.set_printoptions ( precision=3 )` suppress the end zeros .. how do you get them to display like this ` [ 0.078 0.480 0.413 0.830 0.776 0.102 0.513 0.462 0.335 0.712 ]` ?
@USER : I've added a way to do this above .
Unutbu gave a really complete answer ( they got a +1 from me too ) , but here is a lo-tech alternative :
As a function ( using the ` format() ` syntax for formatting ):
Usage :
The index of the array is accessible in the format string :
You can get a subset of the ` np.set_printoptions ` functionality from the ` np.array_str ` command , which applies only to a single print statement .
http://docs.scipy.org/doc/numpy/reference/generated/numpy.array_str.html
For example :
And here is what I use , and it's pretty uncomplicated :
The gem that makes it all too easy to obtain the result as a string ( in today's numpy versions ) is hidden in denis answer :
` np.array2string `
Years later , another one is below . But for everyday use I just
` numpy.char.mod ` may also be useful , depending on the details of your application e.g. : ` numpy.char.mod ( ' Value=% 4.2f ' , numpy.arange ( 5 , 10 , 0.1 ))` will return a string array with elements " Value= 5.00 " , " Value= 5.10 " etc . ( as a somewhat contrived example ) .
I often want different columns to have different formats . Here is how I print a simple 2D array using some variety in the formatting by converting ( slices of ) my NumPy array to a tuple :