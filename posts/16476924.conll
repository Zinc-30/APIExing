How	O
to	O
iterate	O
over	O
rows	O
in	O
a	O
DataFrame	B-API
in	O
Pandas	O
?	O

I	O
have	O
a	O
DataFrames	O
from	O
pandas	O
:	O

Output	O
:	O

Now	O
I	O
want	O
to	O
iterate	O
over	O
the	O
rows	O
of	O
the	O
above	O
frame	O
.	O

For	O
every	O
row	O
I	O
want	O
to	O
be	O
able	O
to	O
access	O
its	O
elements	O
(	O
values	O
in	O
cells	O
)	O
by	O
the	O
name	O
of	O
the	O
columns	O
.	O

So	O
,	O
for	O
example	O
,	O
I	O
would	O
like	O
to	O
have	O
something	O
like	O
that	O
:	O

Is	O
it	O
possible	O
to	O
do	O
that	O
in	O
pandas	O
?	O

I	O
found	O
similar	O
question	O
.	O

But	O
it	O
does	O
not	O
give	O
me	O
the	O
answer	O
I	O
need	O
.	O

For	O
example	O
,	O
it	O
is	O
suggested	O
there	O
to	O
use	O
:	O

or	O

But	O
I	O
do	O
not	O
understand	O
what	O
the	O
`	O
row	O
`	O
object	O
is	O
and	O
how	O
I	O
can	O
work	O
with	O
it	O
.	O

Possible	O
duplicate	O
of	O
What	O
is	O
the	O
most	O
efficient	O
way	O
to	O
loop	O
through	O
dataframes	O
with	O
pandas	O
?	O

Possible	O
duplicate	O
of	O
add	O
one	O
row	O
in	O
a	O
pandas.DataFrame	B-API

iterrows	B-API
is	O
a	O
generator	O
which	O
yield	O
both	O
index	O
and	O
row	O

Note	O
:	O
"	O
Because	O
iterrows	B-API
returns	O
a	O
Series	O
for	O
each	O
row	O
,	O
it	O
does	O
not	O
preserve	O
dtypes	B-API
across	O
the	O
rows	O
.	O

"	O
Also	O
,	O
"	O
You	O
should	O
never	O
modify	O
something	O
you	O
are	O
iterating	O
over	O
.	O

"	O
According	O
to	O
pandas	O
0.19.1	O
docs	O

While	O
`	O
iterrows()	B-API
`	O
is	O
a	O
good	O
option	O
,	O
sometimes	O
`	O
itertuples()	B-API
`	O
can	O
be	O
much	O
faster	O
:	O

Much	O
of	O
the	O
time	O
difference	O
in	O
your	O
two	O
examples	O
seems	O
like	O
it	O
is	O
due	O
to	O
the	O
fact	O
that	O
you	O
appear	O
to	O
be	O
using	O
label-based	O
indexing	O
for	O
the	O
.iterrows()	B-API
command	O
and	O
integer-based	O
indexing	O
for	O
the	O
.itertuples()	B-API
command	O
.	O

For	O
a	O
finance	O
data	O
based	O
dataframe	B-API
(	O
timestamp	O
,	O
and	O
4x	O
float	O
)	O
,	O
itertuples	B-API
is	O
19	O
,	O
57	O
times	O
faster	O
then	O
iterrows	B-API
on	O
my	O
machine	O
.	O

Only	O
`	O
for	O
a	O
,	O
b	O
,	O
c	O
in	O
izip	O
(	O
df	O
[	O
"	O
a	O
"]	O
,	O
df	O
[	O
"	O
b	O
"]	O
,	O
df	O
[	O
"	O
c	O
"]	O
:	O
`	O
is	O
almost	O
equally	O
fast	O
.	O

Can	O
you	O
explain	O
why	O
it's	O
faster	O
?	O

@USER	O
`	O
iterrows()	B-API
`	O
boxes	O
each	O
row	O
of	O
data	O
into	O
a	O
Series	O
,	O
whereas	O
`	O
itertuples()	B-API
`	O
does	O
not	O
.	O

You	O
can	O
also	O
use	O
`	O
df.apply()	B-API
`	O
to	O
iterate	O
over	O
rows	O
and	O
access	O
multiple	O
columns	O
for	O
a	O
function	O
.	O

docs	O
:	O
DataFrame.apply()	B-API

Is	O
the	O
df	O
[	O
'	O
price	O
']	O
refers	O
to	O
a	O
column	O
name	O
in	O
the	O
data	O
frame	O
?	O

I	O
am	O
trying	O
to	O
create	O
a	O
dictionary	O
with	O
unique	O
values	O
from	O
several	O
columns	O
in	O
a	O
csv	O
file	O
.	O

I	O
used	O
your	O
logic	O
to	O
create	O
a	O
dictionary	O
with	O
unique	O
keys	O
and	O
values	O
and	O
got	O
an	O
error	O
stating	O
TypeError	O
:	O
(	O
"'	O
Series	O
'	O
objects	O
are	O
mutable	O
,	O
thus	O
they	O
cannot	O
be	O
hashed	O
"	O
,	O
u'occurred	O
at	O
index	O
0	O
')	O

Code	O
:	O
df	O
[	O
'	O
Workclass	O
']	O
=	O
df.apply	B-API
(	O
lambda	O
row	O
:	O
dic_update	O
(	O
row	O
)	O
,	O
axis=1	O
)	O
end	O
of	O
line	O
id	O
=	O
0	O
end	O
of	O
line	O
def	O
dic_update	O
(	O
row	O
):	O
if	O
row	O
not	O
in	O
dic	O
:	O
dic	O
[	O
row	O
]	O
=	O
id	O
id	O
=	O
id	O
+	O
1	O

Never	O
mind	O
,	O
I	O
got	O
it	O
.	O

Changed	O
the	O
function	O
call	O
line	O
to	O
df_new	O
=	O
df	O
[	O
'	O
Workclass	O
']	O
.apply	B-API
(	O
same	O
thing	O
)	O

To	O
iterate	O
through	O
DataFrame's	O
row	O
in	O
pandas	O
way	O
one	O
can	O
use	O
:	O

DataFrame.iterrows()	B-API

`	O
for	O
index	O
,	O
row	O
in	O
df.iterrows()	B-API
:	O

print	O
row	O
[	O
"	O
c1	O
"]	O
,	O
row	O
[	O
"	O
c2	O
"]	O

`	O

DataFrame.itertuples()	B-API

`	O
for	O
row	O
in	O
df.itertuples	B-API
(	O
index=True	O
,	O
name=	O
'	O
Pandas	O
')	O
:	O

print	O
getattr	O
(	O
row	O
,	O
"	O
c1	O
")	O
,	O
getattr	O
(	O
row	O
,	O
"	O
c2	O
")	O

`	O

`	O
itertuples()	B-API
`	O
is	O
supposed	O
to	O
be	O
faster	O
than	O
`	O
iterrows()	B-API
`	O

But	O
be	O
aware	O
,	O
according	O
to	O
the	O
docs	O
(	O
pandas	O
0.19.1	O
at	O
the	O
moment	O
):	O

iterrows	B-API
:	O
data's	O
`	O
dtype	B-API
`	O
might	O
not	O
match	O
from	O
row	O
to	O
row	O

Because	O
iterrows	B-API
returns	O
a	O
Series	O
for	O
each	O
row	O
,	O
it	O
does	O
not	O
preserve	O
dtypes	B-API
across	O
the	O
rows	O
(	O
dtypes	B-API
are	O
preserved	O
across	O
columns	O
for	O
DataFrames	O
)	O

*	O

iterrows	B-API
:	O
Do	O
not	O
modify	O
rows	O

You	O
should	O
never	O
modify	O
something	O
you	O
are	O
iterating	O
over	O
.	O

This	O
is	O
not	O
guaranteed	O
to	O
work	O
in	O
all	O
cases	O
.	O

Depending	O
on	O
the	O
data	O
types	O
,	O
the	O
iterator	O
returns	O
a	O
copy	O
and	O
not	O
a	O
view	O
,	O
and	O
writing	O
to	O
it	O
will	O
have	O
no	O
effect	O
.	O

Use	O
DataFrame.apply()	B-API
instead	O
:	O

`	O
new_df	O
=	O
df.apply	B-API
(	O
lambda	O
x	O
:	O
x	O
*	O
2	O
)	O

`	O

itertuples	B-API
:	O

The	O
column	O
names	O
will	O
be	O
renamed	O
to	O
positional	O
names	O
if	O
they	O
are	O
invalid	O
Python	O
identifiers	O
,	O
repeated	O
,	O
or	O
start	O
with	O
an	O
underscore	O
.	O

With	O
a	O
large	O
number	O
of	O
columns	O
(	O
255	O
)	O
,	O
regular	O
tuples	O
are	O
returned	O
.	O

You	O
can	O
use	O
the	O
df.iloc	B-API
function	O
as	O
follows	O
:	O

Using	O
`	O
0	O
`	O
in	O
`	O
range	O
`	O
is	O
pointless	O
,	O
you	O
can	O
omit	O
it	O
.	O

To	O
loop	O
all	O
rows	O
in	O
a	O
`	O
dataframe	B-API
`	O
you	O
can	O
use	O
:	O

Use	O
itertuples()	B-API
.	O

It	O
is	O
faster	O
than	O
iterrows()	B-API
:	O

Using	O
`	O
iterrows	B-API
`	O
which	O
return	O
a	O
generator	O
that	O
iterates	O
over	O
the	O
rows	O
of	O
the	O
frame	O

for	O
more	O
detail	O
on	O
iterrows	B-API

