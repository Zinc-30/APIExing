Matplotlib	O
2	O
Subplots	O
,	O
1	O
Colorbar	O

I've	O
spent	O
entirely	O
too	O
long	O
researching	O
how	O
to	O
get	O
two	O
subplots	O
to	O
share	O
the	O
same	O
y-axis	O
with	O
a	O
single	O
colorbar	O
shared	O
between	O
the	O
two	O
in	O
Matplotlib	O
.	O

What	O
was	O
happening	O
was	O
that	O
when	O
I	O
called	O
the	O
`	O
colorbar()	O
`	O
function	O
in	O
either	O
`	O
subplot1	O
`	O
or	O
`	O
subplot2	O
`	O
,	O
it	O
would	O
autoscale	O
the	O
plot	O
such	O
that	O
the	O
colorbar	O
plus	O
the	O
plot	O
would	O
fit	O
inside	O
the	O
'	O
subplot	O
'	O
bounding	O
box	O
,	O
causing	O
the	O
two	O
side-by-side	O
plots	O
to	O
be	O
two	O
very	O
different	O
sizes	O
.	O

To	O
get	O
around	O
this	O
,	O
I	O
tried	O
to	O
create	O
a	O
third	O
subplot	O
which	O
I	O
then	O
hacked	O
to	O
render	O
no	O
plot	O
with	O
just	O
a	O
colorbar	O
present	O
.	O

The	O
only	O
problem	O
is	O
,	O
now	O
the	O
heights	O
and	O
widths	O
of	O
the	O
two	O
plots	O
are	O
uneven	O
,	O
and	O
I	O
can't	O
figure	O
out	O
how	O
to	O
make	O
it	O
look	O
okay	O
.	O

Here	O
is	O
my	O
code	O
:	O

Just	O
place	O
the	O
colorbar	O
in	O
its	O
own	O
axis	O
and	O
use	O
`	O
subplots_adjust	O
`	O
to	O
make	O
room	O
for	O
it	O
.	O

As	O
a	O
quick	O
example	O
:	O

Awesome	O
!	O

Thanks	O
so	O
much	O
for	O
the	O
help	O
.	O

ImageGrid	O
is	O
also	O
very	O
useful	O
for	O
this	O
exact	O
purpose	O
.	O

if	O
you	O
need	O
to	O
use	O
tight_layout()	O
,	O
you	O
will	O
want	O
to	O
do	O
everything	O
after	O
subplots_adjust	O
after	O
tight_layout	O
,	O
and	O
then	O
tweak	O
the	O
coordinates	O
for	O
subplots_adjust	O
and	O
add_axes	O
manually	O
.	O

How	O
can	O
I	O
have	O
a	O
single	O
color	O
bar	O
for	O
two	O
different	O
scatter	O
plots	O
that	O
I	O
already	O
have	O
?	O

I	O
tried	O
above	O
but	O
I	O
don't	O
know	O
how	O
to	O
substitute	O
"	O
im	O
"	O
with	O
appropriate	O
variables	O
.	O

Let	O
say	O
my	O
scatter	O
plots	O
are	O
plot1	O
=p	O
ylib.scatter	O
(	O
x	O
,	O
y	O
,	O
z	O
)	O
and	O
plot2	O
=p	O
ylib.scatter	O
(	O
a	O
,	O
b	O
,	O
c	O
)	O

This	O
may	O
have	O
been	O
obvious	O
to	O
others	O
,	O
but	O
I	O
wanted	O
to	O
point	O
out	O
that	O
in	O
order	O
that	O
the	O
colourbar	O
does	O
accurately	O
represent	O
the	O
colour	O
in	O
all	O
the	O
plots	O
,	O
the	O
`	O
vmin	O
`	O
and	O
`	O
vmax	O
`	O
arguments	O
are	O
critical	O
.	O

They	O
control	O
the	O
colour	O
range	O
of	O
each	O
subplot	O
.	O

If	O
you	O
have	O
real	O
data	O
,	O
you	O
may	O
need	O
to	O
do	O
a	O
pass	O
through	O
this	O
to	O
find	O
the	O
min	O
and	O
max	O
values	O
first	O
.	O

You	O
can	O
simplify	O
Joe	O
Kington's	O
code	O
using	O
the	O
`	O
ax	O
`	O
parameter	O
of	O
`	O
figure.colorbar()	O
`	O
with	O
a	O
list	O
of	O
axes	O
.	O

From	O
the	O
documentation	O
:	O

ax	O

None	O
|	O
parent	O
axes	O
object	O
(	O
s	O
)	O
from	O
which	O
space	O
for	O
a	O
new	O
colorbar	O
axes	O
will	O
be	O
stolen	O
.	O

If	O
a	O
list	O
of	O
axes	O
is	O
given	O
they	O
will	O
all	O
be	O
resized	O
to	O
make	O
room	O
for	O
the	O
colorbar	O
axes	O
.	O

This	O
solution	O
worked	O
very	O
well	O
here	O
,	O
and	O
seems	O
to	O
be	O
the	O
easiest	O
one	O
.	O

If	O
you	O
change	O
nrows	O
to	O
1	O
,	O
both	O
plots	O
are	O
shoter	O
than	O
colorbar	O
.	O

so	O
,	O
how	O
can	O
solve	O
this	O
problem	O
?	O

Pity	O
it	O
doesn't	O
work	O
with	O
tight_layout	O
,	O
but	O
good	O
solution	O
nonetheless	O
.	O

Using	O
`	O
make_axes	O
`	O
is	O
even	O
easier	O
and	O
gives	O
a	O
better	O
result	O
.	O

It	O
also	O
provides	O
possibilities	O
to	O
customise	O
the	O
positioning	O
of	O
the	O
colorbar	O
.	O

Also	O
note	O
the	O
option	O
of	O
`	O
subplots	O
`	O
to	O
share	O
x	O
and	O
y	O
axes	O
.	O

This	O
method	O
does	O
not	O
work	O
when	O
the	O
subplot	O
is	O
not	O
square	O
.	O

If	O
you	O
change	O
`	O
nrows=1	O
`	O
,	O
the	O
colorbar	O
becomes	O
larger	O
than	O
the	O
subplots	O
again	O
.	O

This	O
solution	O
does	O
not	O
require	O
manual	O
tweaking	O
of	O
axes	O
locations	O
or	O
colorbar	O
size	O
,	O
works	O
with	O
multi-row	O
and	O
single-row	O
layouts	O
,	O
and	O
works	O
with	O
`	O
tight_layout()	O
`	O
.	O

It	O
is	O
adapted	O
from	O
a	O
gallery	O
example	O
,	O
using	O
`	O
ImageGrid	O
`	O
from	O
matplotlib's	O
AxesGrid	O
Toolbox	O
.	O

Double	O
+1	O
,	O
this	O
is	O
a	O
great	O
approach	O

Indeed	O
works	O
with	O
tight_layout	O
,	O
but	O
I	O
have	O
no	O
idea	O
how	O
to	O
add	O
a	O
label	O
to	O
that	O
colorbar	O
.	O

It	O
doesn't	O
accept	O
the	O
kws	O
label	O
,	O
title	O
,	O
text	O
...	O
anything	O
!	O

And	O
the	O
docs	O
don't	O
help	O
much	O
.	O

@USER	O
To	O
set	O
a	O
label	O
,	O
you	O
can	O
grab	O
the	O
colorbar's	O
handle	O
when	O
you	O
instantiate	O
it	O
,	O
as	O
:	O
`	O
thecb	O
=	O
ax.cax.colorbar	O
(	O
im	O
)`	O
.	O

Then	O
you	O
can	O
do	O
`	O
thecb.set_label_text	O
(	O
"	O
foo	O
")`	O

Can	O
you	O
show	O
how	O
to	O
use	O
this	O
`	O
rect	O
`	O
parameter	O
?	O

@USER	O
The	O
`	O
rect	O
`	O
parameter	O
specifies	O
the	O
bounding	O
box	O
of	O
the	O
figure	O
elements	O
with	O
the	O
figure	O
area	O
.	O

It	O
takes	O
normalized	O
figure	O
co-ords	O
and	O
the	O
default	O
is	O
`	O
[	O
0	O
,	O
0	O
,	O
1	O
,	O
1	O
]`	O
.	O

So	O
specifying	O
`	O
rect	O
=[	O
0	O
,	O
0	O
,	O
0.9	O
,	O
1	O
]`	O
as	O
an	O
argument	O
to	O
`	O
tight_layout	O
`	O
would	O
force	O
the	O
figure	O
elements	O
that	O
tight_layout	O
knows	O
about	O
to	O
fit	O
within	O
90%	O
of	O
the	O
figure	O
width	O
,	O
leaving	O
10%	O
for	O
your	O
label	O
.	O

See	O
doc	O
.	O

The	O
solution	O
of	O
using	O
a	O
list	O
of	O
axes	O
by	O
abevieiramota	O
works	O
very	O
well	O
until	O
you	O
use	O
only	O
one	O
row	O
of	O
images	O
,	O
as	O
pointed	O
out	O
in	O
the	O
comments	O
.	O

Using	O
a	O
reasonable	O
aspect	O
ratio	O
for	O
`	O
figsize	O
`	O
helps	O
,	O
but	O
is	O
still	O
far	O
from	O
perfect	O
.	O

For	O
example	O
:	O

The	O
colorbar	O
function	O
provides	O
the	O
`	O
shrink	O
`	O
parameter	O
which	O
is	O
a	O
scaling	O
factor	O
for	O
the	O
size	O
of	O
the	O
colorbar	O
axes	O
.	O

It	O
does	O
require	O
some	O
manual	O
trial	O
and	O
error	O
.	O

For	O
example	O
:	O

As	O
a	O
beginner	O
who	O
stumbled	O
across	O
this	O
thread	O
,	O
I'd	O
like	O
to	O
add	O
a	O
python-for-dummies	O
adaptation	O
of	O
abevieiramota	O
'	O
s	O
very	O
neat	O
answer	O
(	O
because	O
I'm	O
at	O
the	O
level	O
that	O
I	O
had	O
to	O
look	O
up	O
'	O
ravel	B-API
'	O
to	O
work	O
out	O
what	O
their	O
code	O
was	O
doing	O
):	O

Much	O
less	O
pythonic	O
,	O
much	O
easier	O
for	O
noobs	O
like	O
me	O
to	O
see	O
what's	O
actually	O
happening	O
here	O
.	O

As	O
pointed	O
out	O
in	O
other	O
answers	O
,	O
the	O
idea	O
is	O
usually	O
to	O
define	O
an	O
axes	O
for	O
the	O
colorbar	O
to	O
reside	O
in	O
.	O

There	O
are	O
various	O
ways	O
of	O
doing	O
so	O
;	O
one	O
that	O
hasn't	O
been	O
mentionned	O
yet	O
would	O
be	O
to	O
directly	O
specify	O
the	O
colorbar	O
axes	O
at	O
subplot	O
creation	O
with	O
`	O
plt.subplots()	O
`	O
.	O

The	O
advantage	O
is	O
that	O
the	O
axes	O
position	O
does	O
not	O
need	O
to	O
be	O
manually	O
set	O
and	O
in	O
all	O
cases	O
with	O
automatic	O
aspect	O
the	O
colorbar	O
will	O
be	O
exactly	O
the	O
same	O
height	O
as	O
the	O
subplots	O
.	O

Even	O
in	O
many	O
cases	O
where	O
images	O
are	O
used	O
the	O
result	O
will	O
be	O
satisfying	O
as	O
shown	O
below	O
.	O

When	O
using	O
`	O
plt.subplots()	O
`	O
,	O
the	O
use	O
of	O
`	O
gridspec_kw	O
`	O
argument	O
allows	O
to	O
make	O
the	O
colorbar	O
axes	O
much	O
smaller	O
than	O
the	O
other	O
axes	O
.	O

Example	O
:	O

This	O
works	O
well	O
,	O
if	O
the	O
plots	O
'	O
aspect	O
is	O
autoscaled	O
or	O
the	O
images	O
are	O
shrunk	O
due	O
to	O
their	O
aspect	O
in	O
the	O
width	O
direction	O
(	O
as	O
in	O
the	O
above	O
)	O
.	O

If	O
,	O
however	O
,	O
the	O
images	O
are	O
wider	O
then	O
high	O
,	O
the	O
result	O
would	O
look	O
as	O
follows	O
,	O
which	O
might	O
be	O
undesired	O
.	O

A	O
solution	O
to	O
fix	O
the	O
colorbar	O
height	O
to	O
the	O
subplot	O
height	O
would	O
be	O
to	O
use	O
`	O
mpl_toolkits.axes_grid1.inset_locator.InsetPosition	O
`	O
to	O
set	O
the	O
colorbar	O
axes	O
relative	O
to	O
the	O
image	O
subplot	O
axes	O
.	O

