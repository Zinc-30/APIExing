Python pandas groupby object apply method duplicates first group
My first SO question :
I am confused about this behavior of apply method of groupby in pandas ( 0.12.0-4 ) , it appears to apply the function TWICE to the first row of a data frame . For example :
I first check that the groupby function works ok , and it seems to be fine :
Then I try to do something similar using apply on the groupby object and I get the first row output twice :
Any help would be appreciated ! Thanks .
Edit : @USER provides the answer below . I am dense and did not understand it immediately , so here is a simple example to show that despite the double printout of the first group in the example above , the apply method operates only once on the first group and does not mutate the original data frame :
But by assigning the return of the method to a new object , we see that it works as expected :
df2 = df.groupby ( ' class ' , group_keys = True ) .apply ( addone )
print ( df2 )
This is checking whether you are mutating the data in the apply . If you are then it has to take a slower path than otherwise . It doesn't change the results .
@USER : Could the result of the first call be saved so it is not called again ? This might help if the function called by apply takes a long time ... ( along with being more intuitive , since this question comes up a lot . )
@USER : Or maybe the function could be wrapped in a memoizer ...
its actually tricky ; the fast-path is in cython ( usually ) , so right now it doesn't pass it back to python space ( it could I suppose ) . transform DOES do this however ( where it choses a path and then uses that result to move on ) . Its just a little bit tricky in code . Welcome to do a PR !
Wouldn't it make more sense to just bite the bullet and make an explicit mutating / non-mutating parameter , defaulting to non-mutating ? [ Somewhat silly additional comment deleted , but my first question stands . ]
This is by design , as described here and here
The ` apply ` function needs to know the shape of the returned data to intelligently figure out how it will be combined . To do this it calls the function ( ` checkit ` in your case ) twice to achieve this .
Depending on your actual use case , you can replace the call to ` apply ` with ` aggregate ` , ` transform ` or ` filter ` , as described in detail here . These functions require the return value to be a particular shape , and so don't call the function twice .
However - if the function you are calling does not have side-effects , it most likely does not matter that the function is being called twice on the first value .