import module from string variable
I'm working on a documentation ( personal ) for nested matplotlib ( MPL ) library , which differs from MPL own provided , by interested submodule packages . I'm writing Python script which I hope will automate document generation from future MPL releases .
I selected interested submodules / packages and want to list their main classes from which I'll generate list and process it with ` pydoc `
Problem is that I can't find a way to instruct Python to load submodule from string . Here is example of what I tried :
.
.
And here is 3 way comparison of above lists through pprint :
I don't understand what's loaded in ` y ` object - it's base ` matplotlib ` plus something else , but it lack information that I wanted and that is main classes from ` matplotlib.text ` package . It's top blue coloured part on screenshot ( ` x ` list )
Please don't suggest Sphinx as different approach .
Can you explain why you need to use ` __import__ ( str )` rather than the standard ` import ` statemetn ?
It's because I'll process lists which items are MPL submodules and get their methods paths
@USER - c'mon - there are endless ideas where you'd want this functionality . When you have a textual configuration of libraries , you can load them by name , which wouldn't quite work with the ` import ` statement . Here's one example of use : djangosnippets.org/snippets/3048
The ` __import__ ` function can be a bit hard to understand .
If you change
to
then ` i ` will refer to ` matplotlib.text ` .
In Python 2.7 and Python 3.1 or later , you can use ` importlib ` :
Some notes
If you're trying to import something from a sub-folder e.g. ` . / feature / email.py ` , the code will look like ` importlib.import_module ( " feature.email ")`
You can't import anything if there is no ` __init__.py ` in the folder with file you are trying to import
` importlib ` should be avaliable on pypi for python2.7
Yes , it is : pypi.python.org/pypi/importlib .
For anyone who's coming here from Google . It should be noted that if you're trying to import something from a sub-folder ( for example , ` . / feature / email.py `) the code will look like ` importlib.import_module ( " feature.email ")`
Finally , also remember that you can't import anything if there is no ` __init__.py ` in the folder with file you are trying to import .
@USER This is for ` import moduleName ` where moduleName is string . How about ` from moduleName import * ` ?
I think importlib.import_module is what you are looking for . ( Only available for Python = 2.7 or 3.x ):
An alternative is ` imp.load_source ( .. )` using the ` imp ` module as suggested in this answer stackoverflow.com/questions/67631
@USER This is for ` import moduleName ` where moduleName is string . How about ` from moduleName import * ` ?
spent some time trying to import modules from a list , and this is the thread that got me most of the way there - but I didnt grasp the use of ___import____ -
so here's how to import a module from a string , and get the same behavior as just import . And try / except the error case , too . :)
and yes , for python 2.7 you have other options - but for 2.6 , this works .