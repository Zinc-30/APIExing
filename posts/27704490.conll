Interactive	O
pixel	O
information	O
of	O
an	O
image	O
in	O
Python	O
?	O

Short	O
version	O
:	O
is	O
there	O
a	O
Python	O
method	O
for	O
displaying	O
an	O
image	O
which	O
shows	O
,	O
in	O
real	O
time	O
,	O
the	O
pixel	O
indices	O
and	O
intensities	O
?	O

So	O
that	O
as	O
I	O
move	O
the	O
cursor	O
over	O
the	O
image	O
,	O
I	O
have	O
a	O
continually	O
updated	O
display	O
such	O
as	O
`	O
pixel	O
[	O
103,214	O
]	O
=	O
198	O
`	O
(	O
for	O
grayscale	O
)	O
or	O
`	O
pixel	O
[	O
103,214	O
]	O
=	O
(	O
138,24,211	O
)`	O
for	O
rgb	O
?	O

Long	O
version	O
:	O

Suppose	O
I	O
open	O
a	O
grayscale	O
image	O
saved	O
as	O
an	O
ndarray	O
`	O
im	O
`	O
and	O
display	O
it	O
with	O
`	O
imshow	O
`	O
from	O
matplotlib	O
:	O

What	O
I	O
get	O
is	O
the	O
image	O
,	O
and	O
in	O
the	O
bottom	O
right	O
of	O
the	O
window	O
frame	O
,	O
an	O
interactive	O
display	O
of	O
the	O
pixel	O
indices	O
.	O

Except	O
that	O
they're	O
not	O
quite	O
,	O
as	O
the	O
values	O
are	O
not	O
integers	O
:	O
`	O
x=	O
134.64	O
y=	O
129.169	O
`	O
for	O
example	O
.	O

If	O
I	O
set	O
the	O
display	O
with	O
correct	O
resolution	O
:	O

the	O
x	O
and	O
y	O
values	O
are	O
still	O
not	O
integers	O
.	O

The	O
`	O
imshow	O
`	O
method	O
from	O
the	O
`	O
spectral	O
`	O
package	O
does	O
a	O
better	O
job	O
:	O

Then	O
in	O
the	O
bottom	O
right	O
I	O
now	O
have	O
`	O
pixel	O
=[	O
103,152	O
]`	O
for	O
example	O
.	O

However	O
,	O
none	O
of	O
these	O
methods	O
also	O
shows	O
the	O
pixel	O
values	O
.	O

So	O
I	O
have	O
two	O
questions	O
:	O

Can	O
the	O
`	O
imshow	O
`	O
from	O
`	O
matplotlib	O
`	O
(	O
and	O
the	O
`	O
imshow	O
`	O
from	O
`	O
scikit-image	O
`)	O
be	O
coerced	O
into	O
showing	O
the	O
correct	O
(	O
integer	O
)	O
pixel	O
indices	O
?	O

Can	O
any	O
of	O
these	O
methods	O
be	O
extended	O
to	O
show	O
the	O
pixel	O
values	O
as	O
well	O
?	O

There	O
a	O
couple	O
of	O
different	O
ways	O
to	O
go	O
about	O
this	O
.	O

You	O
can	O
monkey-patch	O
`	O
ax.format_coord	O
`	O
,	O
similar	O
to	O
this	O
official	O
example	O
.	O

I'm	O
going	O
to	O
use	O
a	O
slightly	O
more	O
"	O
pythonic	O
"	O
approach	O
here	O
that	O
doesn't	O
rely	O
on	O
global	O
variables	O
.	O

(	O
Note	O
that	O
I'm	O
assuming	O
no	O
`	O
extent	O
`	O
kwarg	O
was	O
specified	O
,	O
similar	O
to	O
the	O
matplotlib	O
example	O
.	O
To	O
be	O
fully	O
general	O
,	O
you	O
need	O
to	O
do	O
a	O
touch	O
more	O
work	O
.	O
)	O

Alternatively	O
,	O
just	O
to	O
plug	O
one	O
of	O
my	O
own	O
projects	O
,	O
you	O
can	O
use	O
`	O
mpldatacursor	O
`	O
for	O
this	O
.	O

If	O
you	O
specify	O
`	O
hover=True	O
`	O
,	O
the	O
box	O
will	O
pop	O
up	O
whenever	O
you	O
hover	O
over	O
an	O
enabled	O
artist	O
.	O

(	O
By	O
default	O
it	O
only	O
pops	O
up	O
when	O
clicked	O
.	O
)	O
Note	O
that	O
`	O
mpldatacursor	O
`	O
does	O
handle	O
the	O
`	O
extent	O
`	O
and	O
`	O
origin	O
`	O
kwargs	O
to	O
`	O
imshow	O
`	O
correctly	O
.	O

Also	O
,	O
I	O
forgot	O
to	O
mention	O
how	O
to	O
show	O
the	O
pixel	O
indices	O
.	O

In	O
the	O
first	O
example	O
,	O
it's	O
just	O
assuming	O
that	O
`	O
i	O
,	O
j	O
=	O
int	O
(	O
y	O
)	O
,	O
int	O
(	O
x	O
)`	O
.	O

You	O
can	O
add	O
those	O
in	O
place	O
of	O
`	O
x	O
`	O
and	O
`	O
y	O
`	O
,	O
if	O
you'd	O
prefer	O
.	O

With	O
`	O
mpldatacursor	O
`	O
,	O
you	O
can	O
specify	O
them	O
with	O
a	O
custom	O
formatter	O
.	O

The	O
`	O
i	O
`	O
and	O
`	O
j	O
`	O
arguments	O
are	O
the	O
correct	O
pixel	O
indices	O
,	O
regardless	O
of	O
the	O
`	O
extent	O
`	O
and	O
`	O
origin	O
`	O
of	O
the	O
image	O
plotted	O
.	O

For	O
example	O
(	O
note	O
the	O
`	O
extent	O
`	O
of	O
the	O
image	O
vs	O
.	O
the	O
`	O
i	O
,	O
j	O
`	O
coordinates	O
displayed	O
):	O

Duplicate	O
of	O
stackoverflow.com/questions/27704490	O
and	O
links	O
there	O
in	O
.	O

I	O
think	O
this	O
is	O
a	O
better	O
answer	O
than	O
any	O
of	O
the	O
other	O
ones	O
.	O

Can	O
you	O
mark	O
all	O
of	O
them	O
as	O
duplicates	O
of	O
this	O
one	O
(	O
I	O
have	O
already	O
voted	O
on	O
most	O
of	O
them	O
before	O
I	O
had	O
1-vote	O
duplicate	O
close	O
)	O
?	O

And	O
can	O
you	O
put	O
in	O
a	O
PR	O
to	O
change	O
the	O
official	O
example	O
to	O
use	O
the	O
`	O
Formatter	O
`	O
class	O
?	O

@USER	O
-	O
Done	O
on	O
the	O
close	O
votes	O
.	O

(	O
And	O
thanks	O
!	O
)	O
If	O
any	O
of	O
those	O
seem	O
significantly	O
different	O
from	O
this	O
question	O
,	O
feel	O
free	O
to	O
re-open	O
them	O
.	O

I'll	O
put	O
in	O
a	O
PR	O
for	O
the	O
example	O
later	O
tonight	O
.	O

@USER	O
-	O
Yes	O
,	O
it	O
should	O
work	O
.	O

However	O
,	O
I	O
think	O
your	O
problem	O
might	O
be	O
related	O
to	O
a	O
bug	O
I	O
just	O
fixed	O
a	O
couple	O
of	O
days	O
ago	O
:	O
github.com/joferkington/mpldatacursor/commit	O
If	O
you	O
have	O
a	O
chance	O
,	O
you	O
might	O
try	O
reinstalling	O
from	O
the	O
current	O
github	O
master	O
.	O

Sorry	O
about	O
that	O
!	O

Note	O
that	O
the	O
first	O
example	O
is	O
incorrect	O
by	O
half	O
a	O
pixel	O
.	O

It	O
should	O
rather	O
be	O
`	O
z	O
=	O
self.im.get_array()	O
[	O
int	O
(	O
y+	O
0.5	O
)	O
,	O
int	O
(	O
x+	O
0.5	O
)]`	O
.	O

with	O
Jupyter	O
you	O
can	O
do	O
so	O
either	O
with	O
`	O
datacursor	O
(	O
myax	O
)`	O
or	O
by	O
`	O
ax.format_coord	O
`	O
.	O

Sample	O
code	O
:	O

the	O
`	O
datacursor	O
(	O
myax	O
)`	O
can	O
also	O
be	O
replaced	O
with	O
`	O
ax.format_coord	O
=	O
lambda	O
x	O
,	O
y	O
:	O
"	O
x=%g	O
y=%g	O
"	O
%	O
(	O
x	O
,	O
y	O
)`	O

All	O
of	O
the	O
examples	O
that	O
I	O
have	O
seen	O
only	O
work	O
if	O
your	O
x	O
and	O
y	O
extents	O
start	O
from	O
0	O
.	O

Here	O
is	O
code	O
that	O
uses	O
your	O
image	O
extents	O
to	O
find	O
the	O
z	O
value	O
.	O

If	O
you	O
are	O
using	O
PySide	O
/	O
PyQT	O
here	O
is	O
an	O
example	O
to	O
have	O
a	O
mouse	O
hover	O
tooltip	O
for	O
the	O
data	O

