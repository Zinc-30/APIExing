Generating	O
movie	O
from	O
python	O
without	O
saving	O
individual	O
frames	O
to	O
files	O

I	O
would	O
like	O
to	O
create	O
an	O
h264	O
or	O
divx	O
movie	O
from	O
frames	O
that	O
I	O
generate	O
in	O
a	O
python	O
script	O
in	O
matplotlib	O
.	O

There	O
are	O
about	O
100k	O
frames	O
in	O
this	O
movie	O
.	O

In	O
examples	O
on	O
the	O
web	O
[	O
eg	O
.	O
1	O
]	O
,	O
I	O
have	O
only	O
seen	O
the	O
method	O
of	O
saving	O
each	O
frame	O
as	O
a	O
png	O
and	O
then	O
running	O
mencoder	O
or	O
ffmpeg	O
on	O
these	O
files	O
.	O

In	O
my	O
case	O
,	O
saving	O
each	O
frame	O
is	O
impractical	O
.	O

Is	O
there	O
a	O
way	O
to	O
take	O
a	O
plot	O
generated	O
from	O
matplotlib	O
and	O
pipe	O
it	O
directly	O
to	O
ffmpeg	O
,	O
generating	O
no	O
intermediate	O
files	O
?	O

Programming	O
with	O
ffmpeg's	O
C-api	O
is	O
too	O
difficult	O
for	O
me	O
[	O
eg	O
.	O
2	O
]	O
.	O

Also	O
,	O
I	O
need	O
an	O
encoding	O
that	O
has	O
good	O
compression	O
such	O
as	O
x264	O
as	O
the	O
movie	O
file	O
will	O
otherwise	O
be	O
too	O
large	O
for	O
a	O
subsequent	O
step	O
.	O

So	O
it	O
would	O
be	O
great	O
to	O
stick	O
with	O
mencoder	O
/	O
ffmpeg	O
/	O
x264	O
.	O

Is	O
there	O
something	O
that	O
can	O
be	O
done	O
with	O
pipes	O
[	O
3	O
]	O
?	O

[	O
1	O
]	O
http://matplotlib.sourceforge.net/examples/animation/movie_demo.html	O

[	O
2	O
]	O
How	O
does	O
one	O
encode	O
a	O
series	O
of	O
images	O
into	O
H264	O
using	O
the	O
x264	O
C	O
API	O
?	O

[	O
3	O
]	O
http://www.ffmpeg.org/ffmpeg-doc.html#SEC41	O

I	O
have	O
yet	O
to	O
figure	O
out	O
a	O
way	O
to	O
do	O
this	O
with	O
currently	O
maintained	O
libraries	O
...	O

(	O
I	O
used	O
pymedia	O
in	O
the	O
past	O
,	O
but	O
it's	O
no	O
longer	O
maintained	O
,	O
and	O
won't	O
build	O
on	O
any	O
system	O
I	O
use	O
...	O
)	O
If	O
it	O
helps	O
,	O
you	O
can	O
get	O
an	O
RGB	O
buffer	O
of	O
a	O
matplotlib	O
figure	O
by	O
using	O
`	O
buffer	O
=	O
fig.canvas.tostring_rgb()	O
`	O
,	O
and	O
the	O
width	O
and	O
height	O
of	O
the	O
figure	O
in	O
pixels	O
with	O
`	O
fig.canvas.get_width_height()	O
`	O
(	O
or	O
`	O
fig.bbox.width	O
`	O
,	O
etc	O
)	O

OK	O
,	O
thanks	O
.	O

That's	O
useful	O
.	O

I	O
wonder	O
if	O
some	O
transformation	O
of	O
buffer	O
can	O
be	O
piped	O
to	O
ffmpeg	O
.	O
pyffmpeg	O
has	O
a	O
sophisticated	O
Cython	O
wrapper	O
,	O
recently	O
updated	O
,	O
for	O
reading	O
an	O
avi	O
frame	O
by	O
frame	O
.	O

But	O
not	O
writing	O
.	O

That	O
sounds	O
like	O
a	O
possible	O
place	O
to	O
start	O
for	O
someone	O
familiar	O
with	O
the	O
ffmpeg	O
library	O
.	O

Even	O
something	O
like	O
matlab's	O
im2frame	O
would	O
be	O
great	O
.	O

I'm	O
playing	O
around	O
with	O
having	O
ffmpeg	O
read	O
either	O
from	O
an	O
input	O
pipe	O
(	O
with	O
the	O
`	O
-f	O
image2pipe	O
`	O
option	O
so	O
that	O
it	O
expects	O
a	O
series	O
of	O
images	O
)	O
,	O
or	O
from	O
a	O
local	O
socket	O
(	O
eg	O
`	O
udp	O
:/	O
/	O
localhost	O
:	O
some_port	O
`)	O
and	O
writing	O
to	O
the	O
socket	O
in	O
python	O
...	O

So	O
far	O
,	O
only	O
partial	O
success	O
...	O

I	O
feel	O
like	O
I'm	O
almost	O
there	O
,	O
though	O
...	O

I'm	O
just	O
not	O
familiar	O
enough	O
with	O
ffmpeg	O
...	O

For	O
what	O
it's	O
worth	O
,	O
my	O
problem	O
was	O
due	O
to	O
an	O
issue	O
with	O
ffmpeg	O
accepting	O
a	O
stream	O
of	O
.png	O
'	O
s	O
or	O
raw	O
RGB	O
buffers	O
,	O
(	O
there's	O
a	O
bug	O
already	O
filed	O
:	O
roundup.ffmpeg.org/issue1854	O
)	O
It	O
works	O
if	O
you	O
use	O
jpegs	O
.	O

(	O
Use	O
`	O
ffmpeg	O
-f	O
image2pipe	O
-vcodec	O
mjpeg	O
-i	O
-	O
ouput.whatever	O
`	O
.	O

You	O
can	O
open	O
a	O
`	O
subprocess.Popen	O
(	O
cmdstring.split()	O
,	O
stdin=	O
subprocess.PIPE	O
)`	O
and	O
write	O
each	O
frame	O
to	O
its	O
`	O
stdin	O
`)	O
I'll	O
post	O
a	O
more	O
detailed	O
example	O
if	O
I	O
get	O
a	O
chance	O
...	O

That's	O
great	O
!	O

I	O
will	O
try	O
this	O
tomorrow	O
.	O

This	O
functionality	O
is	O
now	O
(	O
at	O
least	O
as	O
of	O
1.2.0	O
,	O
maybe	O
1.1	O
)	O
baked	O
into	O
matplotlib	O
via	O
the	O
`	O
MovieWriter	O
`	O
class	O
and	O
it's	O
sub-classes	O
in	O
the	O
`	O
animation	O
`	O
module	O
.	O

Documentation	O
for	O
`	O
animation	O
`	O

After	O
patching	O
ffmpeg	O
(	O
see	O
Joe	O
Kington	O
comments	O
to	O
my	O
question	O
)	O
,	O
I	O
was	O
able	O
to	O
get	O
piping	O
png's	O
to	O
ffmpeg	O
as	O
follows	O
:	O

It	O
would	O
not	O
work	O
without	O
the	O
patch	O
,	O
which	O
trivially	O
modifies	O
two	O
files	O
and	O
adds	O
`	O
libavcodec	O
/	O
png_parser.c	O
`	O
.	O

I	O
had	O
to	O
manually	O
apply	B-API
the	O
patch	O
to	O
`	O
libavcodec	O
/	O
Makefile	O
`	O
.	O

Lastly	O
,	O
I	O
removed	O
'	O
-number	O
'	O
from	O
`	O
Makefile	O
`	O
to	O
get	O
the	O
man	O
pages	O
to	O
build	O
.	O

With	O
compile	O
options	O
,	O

Nicely	O
done	O
!	O

+1	O
(	O
I	O
was	O
never	O
able	O
to	O
get	O
ffmpeg	O
to	O
accept	O
a	O
stream	O
of	O
.png	O
'	O
s	O
,	O
I	O
think	O
I	O
need	O
to	O
update	O
my	O
version	O
of	O
ffmpeg	O
...	O
)	O
And	O
,	O
just	O
in	O
case	O
you	O
were	O
wondering	O
,	O
it	O
is	O
perfectly	O
acceptable	O
to	O
mark	O
your	O
answer	O
as	O
the	O
answer	O
to	O
your	O
question	O
.	O

See	O
discussion	O
here	O
:	O
meta.stackexchange.com/questions/17845	O

Ok	O
,	O
I	O
will	O
mark	O
it	O
as	O
answered	O
.	O

Thanks	O
for	O
the	O
tips	O
again	O
.	O

Wow	O
,	O
cool	O
.	O

I've	O
been	O
trying	O
to	O
do	O
the	O
same	O
thing	O
.	O

Hi	O
@USER	O
,	O
the	O
patch	O
link	O
is	O
dead	O
.	O

Do	O
you	O
know	O
if	O
it	O
has	O
been	O
absorbed	O
into	O
the	O
main	O
branch	O
?	O

If	O
not	O
is	O
there	O
some	O
way	O
to	O
get	O
that	O
patch	O
?	O

@USER	O
,	O
I	O
am	O
guessing	O
the	O
patch	O
has	O
been	O
absorbed	O
from	O
the	O
following	O
post	O
:	O
superuser.com/questions/426193	O

Converting	O
to	O
image	O
formats	O
is	O
quite	O
slow	O
and	O
adds	O
dependencies	O
.	O

After	O
looking	O
at	O
these	O
page	O
and	O
other	O
I	O
got	O
it	O
working	O
using	O
raw	O
uncoded	O
buffers	O
using	O
mencoder	O
(	O
ffmpeg	O
solution	O
still	O
wanted	O
)	O
.	O

Details	O
at	O
:	O
http://vokicodder.blogspot.com/2011/02/numpy-arrays-to-video.html	O

I	O
got	O
some	O
nice	O
speedups	O
.	O

I	O
modified	O
this	O
for	O
ffmpeg	O
,	O
see	O
my	O
answer	O
below	O
if	O
you	O
still	O
want	O
it	O

This	O
is	O
great	O
!	O

I	O
wanted	O
to	O
do	O
the	O
same	O
.	O

But	O
,	O
I	O
could	O
never	O
compile	O
the	O
patched	O
ffmpeg	O
source	O
(	O
0.6.1	O
)	O
in	O
Vista	O
with	O
MingW32+MSYS+pr	O
enviroment	O
...	O

png_parser.c	O
produced	O
Error1	O
during	O
compilation	O
.	O

So	O
,	O
I	O
came	O
up	O
with	O
a	O
jpeg	O
solution	O
to	O
this	O
using	O
PIL	O
.	O

Just	O
put	O
your	O
ffmpeg.exe	O
in	O
the	O
same	O
folder	O
as	O
this	O
script	O
.	O

This	O
should	O
work	O
with	O
ffmpeg	O
without	O
the	O
patch	O
under	O
Windows	O
.	O

I	O
had	O
to	O
use	O
stdin.write	O
method	O
rather	O
than	O
the	O
communicate	O
method	O
which	O
is	O
recommended	O
in	O
the	O
official	O
documentation	O
about	O
subprocess	O
.	O

Note	O
that	O
the	O
2nd	O
-vcodec	O
option	O
specifies	O
the	O
encoding	O
codec	O
.	O

The	O
pipe	O
is	O
closed	O
by	O
p.stdin.close()	O
.	O

These	O
are	O
all	O
really	O
great	O
answers	O
.	O

Here's	O
another	O
suggestion	O
.	O

@USER	O
is	O
correct	O
that	O
the	O
bottleneck	O
is	O
typically	O
the	O
writing	O
of	O
the	O
image	O
,	O
so	O
if	O
you	O
are	O
writing	O
png	O
files	O
to	O
your	O
video	O
compressor	O
,	O
it	O
will	O
be	O
pretty	O
slow	O
(	O
even	O
if	O
you	O
are	O
sending	O
them	O
through	O
a	O
pipe	O
instead	O
of	O
writing	O
to	O
disk	O
)	O
.	O

I	O
found	O
a	O
solution	O
using	O
pure	O
ffmpeg	O
,	O
which	O
I	O
personally	O
find	O
easier	O
to	O
use	O
than	O
matplotlib.animation	O
or	O
mencoder	O
.	O

Also	O
,	O
in	O
my	O
case	O
,	O
I	O
wanted	O
to	O
just	O
save	O
the	O
image	O
in	O
an	O
axis	O
,	O
instead	O
of	O
saving	O
all	O
of	O
the	O
tick	O
labels	O
,	O
figure	O
title	O
,	O
figure	O
background	O
,	O
etc	O
.	O

Basically	O
I	O
wanted	O
to	O
make	O
a	O
movie	O
/	O
animation	O
using	O
matplotlib	O
code	O
,	O
but	O
not	O
have	O
it	O
"	O
look	O
like	O
a	O
graph	O
"	O
.	O

I've	O
included	O
that	O
code	O
here	O
,	O
but	O
you	O
can	O
make	O
standard	O
graphs	O
and	O
pipe	O
them	O
to	O
ffmpeg	O
instead	O
if	O
you	O
want	O
.	O

