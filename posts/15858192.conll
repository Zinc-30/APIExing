How	O
to	O
set	O
xlim	O
and	O
ylim	O
for	O
a	O
subplot	O
in	O
matplotlib	O
[	O
duplicate	O
]	O

This	O
question	O
already	O
has	O
an	O
answer	O
here	O
:	O

Python	O
,	O
Matplotlib	O
,	O
subplot	O
:	O
How	O
to	O
set	O
the	O
axis	O
range	O
?	O

3	O
answers	O

I	O
would	O
like	O
to	O
limit	O
the	O
X	O
and	O
Y	O
axis	O
in	O
matplotlib	O
but	O
for	O
a	O
speific	O
subplot	O
.	O

As	O
I	O
can	O
see	O

subplot	O
figure	O
itself	O
doesn't	O
have	O
any	O
axis	O
property	O
.	O

I	O
want	O
for	O
example	O
to	O
change	O
only	O
the	O
limits	O
for	O
the	O
second	O
plot	O
!	O

how	O
are	O
you	O
making	O
the	O
subplots	O
?	O

Please	O
show	O
us	O
what	O
you	O
are	O
doing	O
.	O

Is	O
this	O
more	O
than	O
one	O
way	O
to	O
do	O
it	O
???	O

your	O
question	O
was	O
not	O
clear	O
,	O
I	O
can	O
think	O
of	O
may	O
4	O
or	O
5	O
ways	O
to	O
set	O
up	O
something	O
this	O
simple	O
with	O
sub-plots	O
.	O

If	O
you	O
can	O
think	O
of	O
setting	O
up	O
in	O
4	O
or	O
5	O
ways	O
,	O
it	O
shows	O
that	O
you	O
already	O
understood	O
the	O
question	O
in	O
the	O
first	O
place	O
.	O

Because	O
,	O
I	O
suspected	O
that	O
you	O
have	O
some	O
gaps	O
in	O
your	O
understanding	O
of	O
the	O
class	O
hierarchy	O
of	O
of	O
mpl	O
(	O
which	O
your	O
variable	O
names	O
confirm	O
)	O
.	O

Thus	O
,	O
you	O
will	O
benefit	O
the	O
most	O
if	O
I	O
can	O
show	O
you	O
how	O
to	O
adapt	O
the	O
code	O
you	O
already	O
have	O
.	O

You	O
should	O
learn	O
a	O
bit	O
of	O
the	O
OO	O
interface	O
to	O
matplotlib	O
,	O
not	O
just	O
the	O
state	O
machine	O
interface	O
.	O

Almost	O
all	O
of	O
the	O
`	O
plt	O
.	O

*	O
`	O
function	O
are	O
thin	O
wrappers	O
that	O
basically	O
do	O
`	O
gca()	O
.	O

*	O
`	O
.	O

`	O
plt.subplot	O
`	O
(	O
doc	O
)	O
return	O
an	O
`	O
axes	B-API
`	O
(	O
doc	O
)	O
object	O
.	O

Once	O
you	O
have	O
a	O
referance	O
to	O
the	O
axes	O
object	O
you	O
can	O
plot	O
directly	O
to	O
it	O
,	O
change	O
it's	O
limits	O
,	O
etc	O
.	O

and	O
so	O
on	O
for	O
as	O
many	O
axes	O
as	O
you	O
want	O
.	O

or	O
better	O
,	O
wrap	O
it	O
all	O
up	O
in	O
a	O
loop	O
:	O

Problem	O
with	O
keeping	O
the	O
axis	O
instance	O
is	O
that	O
it	O
does	O
not	O
have	O
all	O
the	O
properties	O
that	O
plt	O
has	O
,	O
for	O
example	O
one	O
cannot	O
use	O
axis.ylim()	O
to	O
get	O
the	O
ylim	O
of	O
the	O
plot	O
on	O
an	O
axis	O
.	O

@USER	O
You	O
use	O
`	O
set_xlim	O
`	O
and	O
`	O
set_ylim	O
`	O
.	O

`	O
plt	O
`	O
has	O
many	O
fewer	O
options	O
than	O
working	O
directly	O
with	O
the	O
axes	O
object	O
.	O

In	O
fact	O
,	O
almost	O
every	O
function	O
in	O
`	O
plt	O
`	O
is	O
a	O
very	O
thin	O
wrapper	O
that	O
first	O
calls	O
`	O
ax	O
=	O
plt.gca()	O
`	O
and	O
then	O
calls	O
what	O
ever	O
function	O
on	O
that	O
object	O
.	O

You	O
should	O
not	O
be	O
using	O
`	O
plt	O
`	O
for	O
anything	O
but	O
interactive	O
work	O
.	O

Yes	O
,	O
I	O
agree	O
,	O
not	O
relying	O
on	O
the	O
interactive	O
version	O
is	O
preferable	O
,	O
but	O
there	O
is	O
no	O
way	O
to	O
get	O
the	O
ylim	O
of	O
a	O
plot	O
having	O
only	O
axis	O
.	O

After	O
a	O
plot	O
is	O
done	O
,	O
it	O
will	O
have	O
an	O
automatic	O
ylim	O
assigned	O
,	O
but	O
the	O
axis	O
will	O
not	O
have	O
that	O
information	O
.	O

So	O
if	O
latter	O
drawings	O
depend	O
on	O
the	O
ylim	O
,	O
as	O
you	O
said	O
one	O
has	O
to	O
set_ylim	O
to	O
override	O
the	O
current	O
range	O
.	O

sorry	O
,	O
forgot	O
about	O
that	O
bit	O
of	O
magic	O
in	O
`	O
plt.ylim	O
`	O
.	O

There	O
is	O
also	O
a	O
`	O
get_ylim()	O
`	O
function	O
on	O
the	O
`	O
axes	B-API
`	O
which	O
will	O
return	O
the	O
limits	O
and	O
`	O
ax.get_yaxis()	O
`	O
function	O
which	O
will	O
return	O
to	O
you	O
the	O
`	O
axis	O
`	O
(	O
note	O
difference	O
between	O
`	O
axes	B-API
`	O
and	O
`	O
axis	O
`)	O
.	O

There	O
are	O
also	O
the	O
symmetric	O
versions	O
for	O
the	O
xaxis	O
.	O

