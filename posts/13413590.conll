How	O
to	O
drop	O
rows	O
of	O
Pandas	O
DataFrame	B-API
whose	O
value	O
in	O
certain	O
columns	O
is	O
NaN	O

I	O
have	O
a	O
`	O
DataFrame	B-API
`	O
:	O

Then	O
I	O
just	O
want	O
the	O
records	O
whose	O
`	O
EPS	O
`	O
is	O
not	O
`	O
NaN	O
`	O
,	O
that	O
is	O
,	O
`	O
df.drop	B-API
(	O
....	O
)`	O
will	O
return	O
the	O
dataframe	B-API
as	O
below	O
:	O

How	O
do	O
I	O
do	O
that	O
?	O

dropna	B-API
:	O
pandas.pydata.org/pandas-docs/stable/generated	O

`	O
df.dropna	B-API
(	O
subset	O
=	O
[	O
'	O
column1_name	O
'	O
,	O
'	O
column2_name	O
'	O
,	O
'	O
column3_name	O
'])`	O

Don't	O
`	O
drop	B-API
`	O
.	O

Just	O
take	O
rows	O
where	O
`	O
EPS	O
`	O
is	O
finite	O
:	O

I'd	O
recommend	O
using	O
`	O
pandas.notnull	B-API
`	O
instead	O
of	O
`	O
np.isfinite	O
`	O

@USER	O
The	O
docs	O
say	O
that	O
pandas.notnull	B-API
is	O
a	O
direct	O
replacement	O
for	O
np.isfinite	O
.	O

In	O
this	O
case	O
,	O
null	O
does	O
not	O
mean	O
zero	O
.	O

Is	O
there	O
any	O
advantage	O
to	O
indexing	O
and	O
copying	O
over	O
dropping	O
?	O

Creates	O
Error	O
:	O
TypeError	O
:	O
ufunc	O
'	O
isfinite	O
'	O
not	O
supported	O
for	O
the	O
input	O
types	O
,	O
and	O
the	O
inputs	O
could	O
not	O
be	O
safely	O
coerced	O
to	O
any	O
supported	O
types	O
according	O
to	O
the	O
casting	O
rule	O
''	O
safe	O
''	O

This	O
question	O
is	O
already	O
resolved	O
,	O
but	O
...	O

...	O
also	O
consider	O
the	O
solution	O
suggested	O
by	O
Wouter	O
in	O
his	O
original	O
comment	O
.	O

The	O
ability	O
to	O
handle	O
missing	O
data	O
,	O
including	O
`	O
dropna()	B-API
`	O
,	O
is	O
built	O
into	O
pandas	O
explicitly	O
.	O

Aside	O
from	O
potentially	O
improved	O
performance	O
over	O
doing	O
it	O
manually	O
,	O
these	O
functions	O
also	O
come	O
with	O
a	O
variety	O
of	O
options	O
which	O
may	O
be	O
useful	O
.	O

There	O
are	O
also	O
other	O
options	O
(	O
See	O
docs	O
at	O
http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.dropna.html	O
)	O
,	O
including	O
dropping	O
columns	O
instead	O
of	O
rows	O
.	O

Pretty	O
handy	O
!	O

you	O
can	O
also	O
use	O
`	O
df.dropna	B-API
(	O
subset	O
=	O
[	O
'	O
column_name	O
'])`	O
.	O

Hope	O
that	O
saves	O
at	O
least	O
one	O
person	O
the	O
extra	O
5	O
seconds	O
of	O
'	O
what	O
am	O
I	O
doing	O
wrong	O
'	O
.	O

Great	O
answer	O
,	O
+1	O

@USER	O
,	O
I	O
just	O
spent	O
20	O
minutes	O
to	O
write	O
a	O
function	O
for	O
that	O
!	O

The	O
official	O
documentation	O
was	O
very	O
cryptic	O
:	O
"	O
Labels	O
along	O
other	O
axis	O
to	O
consider	O
,	O
e.g.	O
if	O
you	O
are	O
dropping	O
rows	O
these	O
would	O
be	O
a	O
list	O
of	O
columns	O
to	O
include	O
"	O
.	O

I	O
was	O
unable	O
to	O
understand	O
,	O
what	O
they	O
meant	O
...	O

I	O
know	O
this	O
has	O
already	O
been	O
answered	O
,	O
but	O
just	O
for	O
the	O
sake	O
of	O
a	O
purely	O
pandas	O
solution	O
to	O
this	O
specific	O
question	O
as	O
opposed	O
to	O
the	O
general	O
description	O
from	O
Aman	O
(	O
which	O
was	O
wonderful	O
)	O
and	O
in	O
case	O
anyone	O
else	O
happens	O
upon	O
this	O
:	O

Actually	O
,	O
the	O
specific	O
answer	O
would	O
be	O
:	O
`	O
df.dropna	B-API
(	O
subset	O
=[	O
'	O
EPS	O
'])`	O
(	O
based	O
on	O
the	O
general	O
description	O
of	O
Aman	O
,	O
of	O
course	O
this	O
does	O
also	O
work	O
)	O

`	O
notnull	B-API
`	O
is	O
also	O
what	O
Wes	O
(	O
author	O
of	O
Pandas	O
)	O
suggested	O
in	O
his	O
comment	O
on	O
another	O
answer	O
.	O

This	O
maybe	O
a	O
noob	O
question	O
.	O

But	O
when	O
I	O
do	O
a	O
df	O
[	O
pd.notnull	B-API
(	O
...	O
)	O
or	O
df.dropna	B-API
the	O
index	O
gets	O
dropped	O
.	O

So	O
if	O
there	O
was	O
a	O
null	O
value	O
in	O
row-index	O
10	O
in	O
a	O
df	O
of	O
length	O
200	O
.	O

The	O
dataframe	B-API
after	O
running	O
the	O
drop	O
function	O
has	O
index	O
values	O
from	O
1	O
to	O
9	O
and	O
then	O
11	O
to	O
200	O
.	O

Anyway	O
to	O
"	O
re-index	O
"	O
it	O

You	O
could	O
use	O
dataframe	B-API
method	O
notnull	B-API
or	O
inverse	O
of	O
isnull	B-API
,	O
or	O
numpy.isnan	O
:	O

notnull	B-API
is	O
very	O
nice	O
!	O

yet	O
another	O
solution	O
which	O
uses	O
the	O
fact	O
that	O
`	O
np.nan	O
!	O

=	O
np.nan	O
`	O
:	O

You	O
can	O
use	O
this	O
:	O

It	O
may	O
be	O
added	O
at	O
that	O
'	O
'	O
can	O
be	O
used	O
to	O
add	O
additional	O
conditions	O
e.g	O
.	O

Notice	O
that	O
when	O
evaluating	O
the	O
statements	O
,	O
pandas	O
needs	O
parenthesis	O
.	O

Sorry	O
,	O
but	O
OP	O
want	O
someting	O
else	O
.	O

Btw	O
,	O
your	O
code	O
is	O
wrong	O
,	O
return	O
`	O
ValueError	O
:	O
The	O
truth	O
value	O
of	O
a	O
Series	O
is	O
ambiguous	O
.	O

Use	O
a.empty	O
,	O
a.bool()	O
,	O
a.item()	O
,	O
a.any()	O
or	O
a.all()	O
.	O

`	O
.	O

You	O
need	O
add	O
parenthesis	O
-	O
`	O
df	O
=	O
df	O
[(	O
df.EPS	O
2.0	O
)	O
(	O
df.EPS	O
4.0	O
)]`	O
,	O
but	O
also	O
it	O
is	O
not	O
answer	O
for	O
this	O
question	O
.	O

For	O
some	O
reason	O
none	O
of	O
the	O
previously	O
submitted	O
answers	O
worked	O
for	O
me	O
.	O

This	O
basic	O
solution	O
did	O
:	O

Though	O
of	O
course	O
that	O
will	O
drop	O
rows	O
with	O
negative	O
numbers	O
,	O
too	O
.	O

So	O
if	O
you	O
want	O
those	O
it's	O
probably	O
smart	O
to	O
add	O
this	O
after	O
,	O
too	O
.	O

