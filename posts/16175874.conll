python	O
pandas	O
dataframe	B-API
slicing	O
by	O
date	O
conditions	O

I	O
am	O
able	O
to	O
read	O
and	O
slice	O
pandas	O
dataframe	B-API
using	O
python	O
datetime	O
objects	O
,	O
however	O
I	O
am	O
forced	O
to	O
use	O
only	O
existing	O
dates	O
in	O
index	O
.	O

For	O
example	O
,	O
this	O
works	O
:	O

However	O
if	O
I	O
use	O
a	O
start	O
or	O
end	O
date	O
that	O
is	O
not	O
present	O
in	O
the	O
DF	O
,	O
I	O
get	O
python	O
KeyError	O
.	O

My	O
Question	O
:	O
How	O
do	O
I	O
query	O
the	O
dataframe	B-API
object	O
for	O
a	O
date	O
range	O
;	O
even	O
when	O
the	O
start	O
and	O
end	O
dates	O
are	O
not	O
present	O
in	O
the	O
DataFrame	B-API
.	O

Does	O
pandas	O
allow	O
for	O
range	O
based	O
slicing	O
?	O

I	O
am	O
using	O
pandas	O
version	O
0.10.1	O

Use	O
`	O
searchsorted	B-API
`	O
to	O
find	O
the	O
nearest	O
times	O
first	O
,	O
and	O
then	O
use	O
it	O
to	O
slice	O
.	O

If	O
I	O
copy	O
paste	O
your	O
example	O
,	O
it	O
works	O
fine	O
.	O

But	O
the	O
start	O
and	O
end	O
variables	O
in	O
my	O
program	O
,	O
always	O
default	O
to	O
the	O
length	O
of	O
the	O
dataframe	B-API
!	O

what	O
am	O
I	O
doing	O
wrong	O
?	O

-	O
pastebin.com/raw.php?i=hfpHqF7s	O

Seems	O
you	O
should	O
sort	O
your	O
`	O
DataFrame	B-API
`	O
in	O
ascending	O
order	O
.	O

Thanks	O
,	O
it	O
worked	O
when	O
the	O
data	O
was	O
in	O
sorted	O
in	O
ascending	O
order	O
.	O

Note	O
that	O
`	O
searchsorted	B-API
`	O
is	O
no	O
longer	O
defined	O
on	O
DataFrame	B-API
or	O
Series	O
,	O
see	O
this	O
question	O
.	O

Short	O
answer	O
:	O
Sort	O
your	O
data	O
(	O
`	O
data.sort()	O
`)	O
and	O
then	O
I	O
think	O
everything	O
will	O
work	O
the	O
way	O
you	O
are	O
expecting	O
.	O

Yes	O
,	O
you	O
can	O
slice	O
using	O
datetimes	O
not	O
present	O
in	O
the	O
DataFrame	B-API
.	O

For	O
example	O
:	O

As	O
you	O
can	O
see	O
,	O
you	O
don't	O
even	O
have	O
to	O
build	O
datetime	O
objects	O
;	O
strings	O
work	O
.	O

Because	O
the	O
datetimes	O
in	O
your	O
index	O
are	O
not	O
sequential	O
,	O
the	O
behavior	O
is	O
weird	O
.	O

If	O
we	O
shuffle	O
the	O
index	O
of	O
my	O
example	O
here	O
...	O

...	O
and	O
take	O
the	O
same	O
slice	O
,	O
we	O
get	O
a	O
different	O
result	O
.	O

It	O
returns	O
the	O
first	O
element	O
inside	O
the	O
range	O
and	O
stops	O
at	O
the	O
first	O
element	O
outside	O
the	O
range	O
.	O

This	O
is	O
probably	O
not	O
useful	O
behavior	O
.	O

If	O
you	O
want	O
to	O
select	O
ranges	O
of	O
dates	O
,	O
would	O
it	O
make	O
sense	O
to	O
sort	O
it	O
by	O
date	O
first	O
?	O

When	O
I	O
try	O
to	O
do	O
this	O
,	O
I	O
get	O
an	O
python	O
exception	O
:	O
TimeSeriesError	O
:	O
Partial	O
indexing	O
only	O
valid	O
for	O
ordered	O
time	O
series	O
.	O

The	O
exception	O
was	O
self	O
explanatory	O
-	O
I	O
had	O
missed	O
sorting	O
the	O
data	O
,	O
:(	O
-	O
Thanks	O
,	O
text	O
based	O
slicing	O
as	O
you've	O
shown	O
above	O
works	O
as	O
expected	O
.	O

But	O
I	O
used	O
the	O
searchsorted	B-API
function	O
since	O
the	O
dates	O
in	O
program	O
were	O
already	O
datetime	O
objects	O
.	O

df	O
[	O
'	O
20130419	O
'	O
:	O
'	O
20130422	O
']	O
is	O
exceptional	O
!	O

Even	O
works	O
with	O
sparse	O
data	O
(	O
e.g.	O
specifying	O
a	O
date	O
that	O
doesn't	O
exist	O
in	O
the	O
index	O
)	O
.	O

Thank	O
you	O
!	O

Please	O
note	O
that	O
data.sort()	O
is	O
now	O
deprecated	O
.	O

The	O
replacement	O
for	O
this	O
application	O
would	O
be	O
data.sort_index()	O
-	O
http://pandas.pydata.org/pandas-docs/stable/generated/pandas	O
.DataFrame	O
.sort_inde	O
x.html	O

Thanks	O
,	O
Kapocsi	O
.	O

Updated	O
.	O

You	O
can	O
use	O
a	O
simple	O
mask	B-API
to	O
accomplish	O
this	O
:	O

By	O
the	O
way	O
,	O
this	O
works	O
for	O
hierarchical	O
indexing	O
as	O
well	O
.	O

In	O
that	O
case	O
`	O
data.index	O
`	O
would	O
be	O
replaced	O
with	O
`	O
data.index.levels	O
[	O
0	O
]`	O
or	O
similar	O
.	O

