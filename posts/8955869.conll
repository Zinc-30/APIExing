why	O
is	O
plotting	O
with	O
Matplotlib	O
so	O
slow	O
?	O

I'm	O
currently	O
evaluating	O
different	O
python	O
plotting	O
libraries	O
.	O

Right	O
now	O
I'm	O
trying	O
matplotlib	O
and	O
I'm	O
quite	O
disappointed	O
with	O
the	O
performance	O
.	O

The	O
following	O
example	O
is	O
modified	O
from	O
SciPy	O
examples	O
and	O
gives	O
me	O
only	O
~	O
8	O
frames	O
per	O
second	O
!	O

Any	O
ways	O
of	O
speeding	O
this	O
up	O
or	O
should	O
I	O
pick	O
a	O
different	O
plotting	O
library	O
?	O

The	O
following	O
might	O
be	O
relevant	O
:	O
stackoverflow.com/questions/5003094	O

@USER	O
-	O
Glumpy	O
only	O
helped	O
in	O
that	O
example	O
because	O
he	O
was	O
dealing	O
with	O
rapidly	O
displaying	O
image	O
data	O
.	O

It	O
won't	O
help	O
in	O
this	O
case	O
.	O

Try	O
changing	O
the	O
backend	O
.	O

See	O
my	O
answer	O
:	O
stackoverflow.com/a/30655528/2066079	O
.	O
or	O
the	O
this	O
FAQ	O
about	O
backends	O
:	O
matplotlib.org/faq/usage_faq.html#what-is-a-backend	O

First	O
off	O
,	O
(	O
though	O
this	O
won't	O
change	O
the	O
performance	O
at	O
all	O
)	O
consider	O
cleaning	O
up	O
your	O
code	O
,	O
similar	O
to	O
this	O
:	O

With	O
the	O
above	O
example	O
,	O
I	O
get	O
around	O
10fps	O
.	O

Just	O
a	O
quick	O
note	O
,	O
depending	O
on	O
your	O
exact	O
use	O
case	O
,	O
matplotlib	O
may	O
not	O
be	O
a	O
great	O
choice	O
.	O

It's	O
oriented	O
towards	O
publication-quality	O
figures	O
,	O
not	O
real-time	O
display	O
.	O

However	O
,	O
there	O
are	O
a	O
lot	O
of	O
things	O
you	O
can	O
do	O
to	O
speed	O
this	O
example	O
up	O
.	O

There	O
are	O
two	O
main	O
reasons	O
why	O
this	O
is	O
as	O
slow	O
as	O
it	O
is	O
.	O

1	O
)	O
Calling	O
`	O
fig.canvas.draw()	O
`	O
redraws	O
everything	O
.	O

It's	O
your	O
bottleneck	O
.	O

In	O
your	O
case	O
,	O
you	O
don't	O
need	O
to	O
re-draw	O
things	O
like	O
the	O
axes	O
boundaries	O
,	O
tick	O
labels	O
,	O
etc	O
.	O

2	O
)	O
In	O
your	O
case	O
,	O
there	O
are	O
a	O
lot	O
of	O
subplots	O
with	O
a	O
lot	O
of	O
tick	O
labels	O
.	O

These	O
take	O
a	O
long	O
time	O
to	O
draw	O
.	O

Both	O
these	O
can	O
be	O
fixed	O
by	O
using	O
blitting	O
.	O

To	O
do	O
blitting	O
efficiently	O
,	O
you'll	O
have	O
to	O
use	O
backend-specific	O
code	O
.	O

In	O
practice	O
,	O
if	O
you're	O
really	O
worried	O
about	O
smooth	O
animations	O
,	O
you're	O
usually	O
embedding	O
matplotlib	O
plots	O
in	O
some	O
sort	O
of	O
gui	O
toolkit	O
,	O
anyway	O
,	O
so	O
this	O
isn't	O
much	O
of	O
an	O
issue	O
.	O

However	O
,	O
without	O
knowing	O
a	O
bit	O
more	O
about	O
what	O
you're	O
doing	O
,	O
I	O
can't	O
help	O
you	O
there	O
.	O

Nonetheless	O
,	O
there	O
is	O
a	O
gui-neutral	O
way	O
of	O
doing	O
it	O
that	O
is	O
still	O
reasonably	O
fast	O
.	O

This	O
gives	O
me	O
~200fps	O
.	O

To	O
make	O
this	O
a	O
bit	O
more	O
convenient	O
,	O
there's	O
an	O
`	O
animations	O
`	O
module	O
in	O
recent	O
versions	O
of	O
matplotlib	O
.	O

As	O
an	O
example	O
:	O

your	O
code	O
is	O
very	O
fast	O
indeed	O
,	O
however	O
I	O
end	O
up	O
with	O
2000	O
lines	O
per	O
axis	O
!	O

somehow	O
"	O
line.set_ydata	O
"	O
creates	O
a	O
new	O
line	O
instead	O
of	O
updating	O
it	O
-	O
or	O
is	O
the	O
background	O
just	O
not	O
being	O
cleared	O
?	O

Plus	O
,	O
why	O
is	O
your	O
version	O
so	O
much	O
faster	O
?	O

just	O
because	O
you	O
dropped	O
"	O
draw()	O
"	O
and	O
replaced	O
it	O
with	O
"	O
ax.draw_artist	O
"	O
?	O

In	O
which	O
example	O
?	O

(	O
I	O
tested	O
them	O
,	O
but	O
it's	O
possible	O
copy-pasted	O
the	O
wrong	O
version	O
into	O
the	O
answer	O
.	O
)	O
Also	O
,	O
which	O
version	O
of	O
matplotlib	O
are	O
you	O
using	O
?	O

here's	O
a	O
link	O
to	O
the	O
resulting	O
image	O
i.imgur.com/aBRFz.png	O
might	O
this	O
be	O
an	O
artifact	O
caused	O
by	O
my	O
graphics	O
card	O
?	O

I	O
was	O
seeing	O
the	O
same	O
thing	O
that	O
memyself	O
was	O
seeing	O
in	O
i.imgur.com/aBRFz.png	O
until	O
I	O
moved	O
the	O
background	O
capture	O
below	O
the	O
fig.show()	O
.	O

Nice	O
,	O
but	O
`	O
animation	O
`	O
seems	O
to	O
update	O
the	O
plot	O
by	O
`	O
interval	O
`	O
period	O
of	O
time	O
,	O
what	O
if	O
I	O
just	O
want	O
to	O
update	O
it	O
when	O
new	O
data	O
is	O
ready	O
?	O

Matplotlib	O
makes	O
great	O
publication-quality	O
graphics	O
,	O
but	O
is	O
not	O
very	O
well	O
optimized	O
for	O
speed	O
.	O

There	O
are	O
a	O
variety	O
of	O
python	O
plotting	O
packages	O
that	O
are	O
designed	O
with	O
speed	O
in	O
mind	O
:	O

http://pyqwt.sourceforge.net	O

[	O
edit	O
:	O
pyqwt	O
is	O
no	O
longer	O
maintained	O
;	O
the	O
previous	O
maintainer	O
is	O
recommending	O
pyqtgraph	O
]	O

http://code.google.com/p/guiqwt	O

http://code.enthought.com/projects/chaco	O

http://www.pyqtgraph.org	O

To	O
start	O
,	O
Joe	O
Kington's	O
answer	O
provides	O
very	O
good	O
advice	O
using	O
a	O
gui-neutral	O
approach	O
,	O
and	O
you	O
should	O
definitely	O
take	O
his	O
advice	O
(	O
especially	O
about	O
Blitting	O
)	O
and	O
put	O
it	O
into	O
practice	O
.	O

More	O
info	O
on	O
this	O
approach	O
,	O
read	O
the	O
Matplotlib	O
Cookbook	O

However	O
,	O
the	O
non-GUI-neutral	O
(	O
GUI-biased	O
?	O
)	O
approach	O
is	O
key	O
to	O
speeding	O
up	O
the	O
plotting	O
.	O

In	O
other	O
words	O
,	O
the	O
backend	O
is	O
extremely	O
important	O
to	O
plot	O
speed	O
.	O

Put	O
these	O
two	O
lines	O
before	O
you	O
import	O
anything	O
else	O
from	O
matplotlib	O
:	O

Of	O
course	O
,	O
there	O
are	O
various	O
options	O
to	O
use	O
instead	O
of	O
`	O
GTKAgg	O
`	O
,	O
but	O
according	O
to	O
the	O
cookbook	O
mentioned	O
before	O
,	O
this	O
was	O
the	O
fastest	O
.	O

See	O
the	O
link	O
about	O
backends	O
for	O
more	O
options	O
.	O

This	O
only	O
works	O
on	O
windows	O
though	O
,	O
do	O
you	O
know	O
of	O
a	O
way	O
to	O
make	O
it	O
work	O
on	O
Mac	O
.	O

The	O
reason	O
it	O
is	O
windows	O
specific	O
is	O
that	O
pygtk	O
is	O
windows	O
specific	O

For	O
the	O
first	O
solution	O
proposed	O
by	O
Joe	O
Kington	O
(	O
.copy_from_bbox	O
.draw_artist	O
canvas.blit	O
)	O
,	O
I	O
had	O
to	O
capture	O
the	O
backgrounds	O
after	O
the	O
fig.canvas.draw()	O
line	O
,	O
otherwise	O
the	O
background	O
had	O
no	O
effect	O
and	O
I	O
got	O
the	O
same	O
result	O
as	O
you	O
mentioned	O
.	O

If	O
you	O
put	O
it	O
after	O
the	O
fig.show()	O
it	O
still	O
does	O
not	O
work	O
as	O
proposed	O
by	O
Michael	O
Browne	O
.	O

So	O
just	O
put	O
the	O
background	O
line	O
after	O
the	O
canvas.draw()	O
:	O

you	O
should	O
just	O
edit	O
his	O
answer	O
instead	O
of	O
posting	O
as	O
a	O
separate	O
one	O

This	O
may	O
not	O
apply	B-API
to	O
many	O
of	O
you	O
,	O
but	O
I'm	O
usually	O
operating	O
my	O
computers	O
under	O
Linux	O
,	O
so	O
by	O
default	O
I	O
save	O
my	O
matplotlib	O
plots	O
as	O
PNG	O
and	O
SVG	O
.	O

This	O
works	O
fine	O
under	O
Linux	O
but	O
is	O
unbearably	O
slow	O
on	O
my	O
Windows	O
7	O
installations	O
[	O
MiKTeX	O
under	O
Python	O
(	O
x	O
,	O
y	O
)	O
or	O
Anaconda	O
]	O
,	O
so	O
I've	O
taken	O
to	O
adding	O
this	O
code	O
,	O
and	O
things	O
work	O
fine	O
over	O
there	O
again	O
:	O

