How	O
can	O
I	O
set	O
the	O
aspect	O
ratio	O
in	O
matplotlib	O
?	O

I'm	O
trying	O
to	O
make	O
a	O
square	O
plot	O
(	O
using	O
imshow	O
)	O
,	O
i.e.	O
aspect	O
ratio	O
of	O
1:1	O
,	O
but	O
I	O
can't	O
.	O

None	O
of	O
these	O
work	O
:	O

Any	O
ideas	O
?	O

Let	O
me	O
know	O
if	O
you	O
need	O
more	O
info	O
e.g.	O
details	O
of	O
the	O
other	O
calls	O
.	O

It	O
seems	O
like	O
the	O
calls	O
are	O
just	O
being	O
ignored	O
(	O
a	O
problem	O
I	O
often	O
seem	O
to	O
have	O
with	O
matplotlib	O
)	O
.	O

Thanks	O
!	O

Did	O
you	O
try	O
`	O
ax.axis	O
(	O
'	O
equal	O
')`	O
,	O
by	O
chance	O
?	O

As	O
everyone's	O
said	O
,	O
what	O
you	O
did	O
should	O
work	O
,	O
but	O
`	O
ax.axis	O
`	O
might	O
be	O
another	O
route	O
to	O
try	O
for	O
a	O
workaround	O
.	O

matplotlib.org/examples/pylab_examples/equal_aspect_ratio.ht	O
ml	O

Third	O
times	O
the	O
charm	O
.	O

My	O
guess	O
is	O
that	O
this	O
is	O
a	O
bug	O
and	O
Zhenya's	O
answer	O
suggests	O
it's	O
fixed	O
in	O
the	O
latest	O
version	O
.	O

I	O
have	O
version	O
0.99.1.1	O
and	O
I've	O
created	O
the	O
following	O
solution	O
:	O

This	O
is	O
'	O
force.png	O
'	O
:	O

Below	O
are	O
my	O
unsuccessful	O
,	O
yet	O
hopefully	O
informative	O
attempts	O
.	O

Second	O
Answer	O
:	O

My	O
'	O
original	O
answer	O
'	O
below	O
is	O
overkill	O
,	O
as	O
it	O
does	O
something	O
similar	O
to	O
`	O
axes.set_aspect()	O
`	O
.	O

I	O
think	O
you	O
want	O
to	O
use	O
`	O
axes.set_aspect	O
(	O
'	O
auto	O
')`	O
.	O

I	O
don't	O
understand	O
why	O
this	O
is	O
the	O
case	O
,	O
but	O
it	O
produces	O
a	O
square	O
image	O
plot	O
for	O
me	O
,	O
for	O
example	O
this	O
script	O
:	O

Produces	O
an	O
image	O
plot	O
with	O
'	O
equal	O
'	O
aspect	O
ratio	O
:	O

and	O
one	O
with	O
'	O
auto	O
'	O
aspect	O
ratio	O
:	O

The	O
code	O
provided	O
below	O
in	O
the	O
'	O
original	O
answer	O
'	O
provides	O
a	O
starting	O
off	O
point	O
for	O
an	O
explicitly	O
controlled	O
aspect	O
ratio	O
,	O
but	O
it	O
seems	O
to	O
be	O
ignored	O
once	O
an	O
imshow	O
is	O
called	O
.	O

Original	O
Answer	O
:	O

Here's	O
an	O
example	O
of	O
a	O
routine	O
that	O
will	O
adjust	O
the	O
subplot	O
parameters	O
so	O
that	O
you	O
get	O
the	O
desired	O
aspect	O
ratio	O
:	O

This	O
produces	O
a	O
figure	O
like	O
so	O
:	O

I	O
can	O
imagine	O
if	O
your	O
having	O
multiple	O
subplots	O
within	O
the	O
figure	O
,	O
you	O
would	O
want	O
to	O
include	O
the	O
number	O
of	O
y	O
and	O
x	O
subplots	O
as	O
keyword	O
parameters	O
(	O
defaulting	O
to	O
1	O
each	O
)	O
to	O
the	O
routine	O
provided	O
.	O

Then	O
using	O
those	O
numbers	O
and	O
the	O
`	O
hspace	O
`	O
and	O
`	O
wspace	O
`	O
keywords	O
,	O
you	O
can	O
make	O
all	O
the	O
subplots	O
have	O
the	O
correct	O
aspect	O
ratio	O
.	O

Thanks	O
SO	O
much	O
-	O
finally	O
using	O
your	O
function	O
works	O
!	O

Thank	O
you	O
thank	O
you	O
:-)	O

For	O
cases	O
where	O
`	O
get_images	O
`	O
is	O
an	O
empty	O
list	O
(	O
as	O
would	O
happen	O
with	O
`	O
ax.plot	O
([	O
0	O
,	O
1	O
]	O
,	O
[	O
0	O
,	O
2	O
])`	O
,	O
you	O
can	O
use	O
`	O
get_xlim	O
`	O
and	O
`	O
get_ylim	O
`	O

It	O
looks	O
to	O
me	O
like	O
this	O
won't	O
work	O
if	O
done	O
with	O
logscale	O
.	O

I've	O
added	O
an	O
answer	O
which	O
tests	O
for	O
that	O
and	O
handles	O
it	O
.	O

Feel	O
free	O
to	O
incorporate	O
that	O
into	O
your	O
answer	O
and	O
then	O
I'll	O
remove	O
mine	O
.	O

What	O
is	O
the	O
`	O
matplotlib	O
`	O
version	O
you	O
are	O
running	O
?	O

I	O
have	O
recently	O
had	O
to	O
upgrade	O
to	O
`	O
1.1.0	O
`	O
,	O
and	O
with	O
it	O
,	O
`	O
add_subplot	O
(	O
111	O
,	O
aspect=	O
'	O
equal	O
')`	O
works	O
for	O
me	O
.	O

It's	O
1.0.1	O
.	O

Perhaps	O
that's	O
an	O
answer	O
..	O

you	O
should	O
try	O
with	O
figaspect	O
.	O

It	O
works	O
for	O
me	O
.	O

From	O
the	O
docs	O
:	O

Create	O
a	O
figure	O
with	O
specified	O
aspect	O
ratio	O
.	O

If	O
arg	O
is	O
a	O
number	O
,	O
use	O
that	O
aspect	O
ratio	O
.	O

If	O
arg	O
is	O
an	O
array	O
,	O
figaspect	O
will	O

determine	O
the	O
width	O
and	O
height	O
for	O
a	O
figure	O
that	O
would	O
fit	O
array	O

preserving	O
aspect	O
ratio	O
.	O

The	O
figure	O
width	O
,	O
height	O
in	O
inches	O
are	O

returned	O
.	O

Be	O
sure	O
to	O
create	O
an	O
axes	O
with	O
equal	O
with	O
and	O
height	O
,	O
eg	O

Example	O
usage	O
:	O

Edit	O
:	O
I	O
am	O
not	O
sure	O
of	O
what	O
you	O
are	O
looking	O
for	O
.	O

The	O
above	O
code	O
changes	O
the	O
canvas	O
(	O
the	O
plot	O
size	O
)	O
.	O

If	O
you	O
want	O
to	O
change	O
the	O
size	O
of	O
the	O
matplotlib	O
window	O
,	O
of	O
the	O
figure	O
,	O
then	O
use	O
:	O

this	O
does	O
produce	O
a	O
window	O
of	O
5x1	O
(	O
wxh	O
)	O
.	O

Thanks	O
for	O
this	O
-	O
it	O
does	O
have	O
some	O
effect	O
,	O
in	O
changing	O
the	O
aspect	O
ratio	O
of	O
the	O
canvas	O
:	O
To	O
be	O
more	O
specific	O
,	O
I	O
need	O
to	O
change	O
the	O
aspect	O
ratio	O
of	O
the	O
figure	O
itself	O
,	O
which	O
doing	O
the	O
following	O
does	O
not	O
(	O
apols	O
formatting	O
..	O
):	O
fig	O
=	O
plt.figure	O
(	O
figsize	O
=(	O
plt.figaspect	O
(	O
2.0	O
)))	O

This	O
answer	O
is	O
based	O
on	O
Yann's	O
answer	O
.	O

It	O
will	O
set	O
the	O
aspect	O
ratio	O
for	O
linear	O
or	O
log-log	O
plots	O
.	O

I've	O
used	O
additional	O
information	O
from	O
https://stackoverflow.com/a/16290035/2966723	O
to	O
test	O
if	O
the	O
axes	O
are	O
log-scale	O
.	O

Obviously	O
you	O
can	O
use	O
any	O
version	O
of	O
`	O
log	O
`	O
you	O
want	O
,	O
I've	O
used	O
`	O
scipy	O
`	O
,	O
but	O
`	O
numpy	O
`	O
or	O
`	O
math	O
`	O
should	O
be	O
fine	O
.	O

